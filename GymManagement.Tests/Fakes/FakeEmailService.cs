using GymManagement.Web.Services;
using System.Collections.Generic;
using System.Threading.Tasks;
using System;

namespace GymManagement.Tests.Fakes
{
    /// <summary>
    /// üìß FAKE EMAIL SERVICE
    /// Replaces real email service for testing
    /// Captures email operations for verification
    /// </summary>
    public class FakeEmailService : IEmailService
    {
        #region Properties

        public List<EmailRecord> SentEmails { get; private set; } = new();
        public bool ShouldThrowException { get; set; } = false;
        public string ExceptionMessage { get; set; } = "Email service error";
        public bool IsEnabled { get; set; } = true;

        #endregion

        #region IEmailService Implementation

        // Core email methods
        public async Task SendEmailAsync(string toEmail, string subject, string body)
        {
            if (ShouldThrowException)
                throw new InvalidOperationException(ExceptionMessage);

            if (!IsEnabled)
                return;

            var emailRecord = new EmailRecord
            {
                To = toEmail,
                Subject = subject,
                Body = body,
                SentAt = DateTime.Now,
                IsHtml = false
            };

            SentEmails.Add(emailRecord);
            await Task.Delay(10); // Simulate async operation
        }

        public async Task SendEmailAsync(string toEmail, string toName, string subject, string body)
        {
            if (ShouldThrowException)
                throw new InvalidOperationException(ExceptionMessage);

            if (!IsEnabled)
                return;

            var emailRecord = new EmailRecord
            {
                To = toEmail,
                ToName = toName,
                Subject = subject,
                Body = body,
                SentAt = DateTime.Now,
                IsHtml = false
            };

            SentEmails.Add(emailRecord);
            await Task.Delay(10); // Simulate async operation
        }

        public async Task SendBulkEmailAsync(IEnumerable<string> toEmails, string subject, string body)
        {
            if (ShouldThrowException)
                throw new InvalidOperationException(ExceptionMessage);

            if (!IsEnabled)
                return;

            foreach (var email in toEmails)
            {
                var emailRecord = new EmailRecord
                {
                    To = email,
                    Subject = subject,
                    Body = body,
                    SentAt = DateTime.Now,
                    IsHtml = false,
                    IsBulk = true
                };

                SentEmails.Add(emailRecord);
            }

            await Task.Delay(toEmails.Count() * 5); // Simulate bulk operation
        }

        // Existing templates
        public async Task SendWelcomeEmailAsync(string toEmail, string memberName, string username, string tempPassword)
        {
            await SendEmailAsync(toEmail, memberName, "Ch√†o m·ª´ng ƒë·∫øn v·ªõi Gym!",
                $"Xin ch√†o {memberName}, ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi h·ªá th·ªëng qu·∫£n l√Ω ph√≤ng gym! Username: {username}, M·∫≠t kh·∫©u t·∫°m: {tempPassword}");
        }

        public async Task SendPasswordResetEmailAsync(string toEmail, string memberName, string resetLink)
        {
            await SendEmailAsync(toEmail, memberName, "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u",
                $"Xin ch√†o {memberName}, click v√†o link sau ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u: {resetLink}");
        }

        public async Task SendRegistrationConfirmationEmailAsync(string toEmail, string memberName, string packageName, DateTime expiryDate)
        {
            await SendEmailAsync(toEmail, memberName, "X√°c nh·∫≠n ƒëƒÉng k√Ω",
                $"Xin ch√†o {memberName}, b·∫°n ƒë√£ ƒëƒÉng k√Ω th√†nh c√¥ng g√≥i {packageName}. H·∫øt h·∫°n: {expiryDate:dd/MM/yyyy}");
        }

        public async Task SendPaymentConfirmationEmailAsync(string toEmail, string memberName, decimal amount, string paymentMethod)
        {
            await SendEmailAsync(toEmail, memberName, "X√°c nh·∫≠n thanh to√°n",
                $"Xin ch√†o {memberName}, thanh to√°n {amount:N0} VNƒê qua {paymentMethod} ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng!");
        }

        // New notification templates
        public async Task SendScheduleChangeNotificationAsync(string toEmail, string memberName, string changeDetails, string classOrSessionInfo)
        {
            await SendEmailAsync(toEmail, memberName, "Thay ƒë·ªïi l·ªãch tr√¨nh",
                $"Xin ch√†o {memberName}, c√≥ thay ƒë·ªïi l·ªãch tr√¨nh: {changeDetails} cho {classOrSessionInfo}");
        }

        public async Task SendClassReminderEmailAsync(string toEmail, string memberName, string className, DateTime classTime, string instructorName, string location)
        {
            await SendEmailAsync(toEmail, memberName, "Nh·∫Øc nh·ªü l·ªõp h·ªçc",
                $"Xin ch√†o {memberName}, nh·∫Øc nh·ªü l·ªõp {className} v√†o {classTime:dd/MM/yyyy HH:mm} v·ªõi HLV {instructorName} t·∫°i {location}");
        }

        public async Task SendClassCancellationEmailAsync(string toEmail, string memberName, string className, DateTime originalTime, string reason)
        {
            await SendEmailAsync(toEmail, memberName, "H·ªßy l·ªõp h·ªçc",
                $"Xin ch√†o {memberName}, l·ªõp {className} v√†o {originalTime:dd/MM/yyyy HH:mm} ƒë√£ b·ªã h·ªßy. L√Ω do: {reason}");
        }

        public async Task SendInstructorScheduleChangeAsync(string toEmail, string instructorName, string changeDetails, DateTime effectiveDate)
        {
            await SendEmailAsync(toEmail, instructorName, "Thay ƒë·ªïi l·ªãch d·∫°y",
                $"Xin ch√†o {instructorName}, c√≥ thay ƒë·ªïi l·ªãch d·∫°y: {changeDetails}. C√≥ hi·ªáu l·ª±c t·ª´ {effectiveDate:dd/MM/yyyy}");
        }

        public async Task SendMembershipExpiryReminderAsync(string toEmail, string memberName, string packageName, DateTime expiryDate, int daysRemaining)
        {
            await SendEmailAsync(toEmail, memberName, "Nh·∫Øc nh·ªü h·∫øt h·∫°n th√†nh vi√™n",
                $"Xin ch√†o {memberName}, g√≥i {packageName} s·∫Ω h·∫øt h·∫°n v√†o {expiryDate:dd/MM/yyyy} (c√≤n {daysRemaining} ng√†y)");
        }

        public async Task SendBookingConfirmationEmailAsync(string toEmail, string memberName, string sessionType, DateTime sessionTime, string instructorName)
        {
            await SendEmailAsync(toEmail, memberName, "X√°c nh·∫≠n ƒë·∫∑t l·ªãch",
                $"Xin ch√†o {memberName}, b·∫°n ƒë√£ ƒë·∫∑t l·ªãch th√†nh c√¥ng {sessionType} v√†o {sessionTime:dd/MM/yyyy HH:mm} v·ªõi HLV {instructorName}");
        }

        public async Task SendBookingCancellationEmailAsync(string toEmail, string memberName, string sessionType, DateTime sessionTime, string reason)
        {
            await SendEmailAsync(toEmail, memberName, "H·ªßy ƒë·∫∑t l·ªãch",
                $"Xin ch√†o {memberName}, l·ªãch {sessionType} v√†o {sessionTime:dd/MM/yyyy HH:mm} ƒë√£ b·ªã h·ªßy. L√Ω do: {reason}");
        }

        public async Task SendImportantChangeConfirmationAsync(string toEmail, string memberName, string changeType, string changeDetails, DateTime effectiveDate)
        {
            await SendEmailAsync(toEmail, memberName, "X√°c nh·∫≠n thay ƒë·ªïi quan tr·ªçng",
                $"Xin ch√†o {memberName}, thay ƒë·ªïi {changeType}: {changeDetails}. C√≥ hi·ªáu l·ª±c t·ª´ {effectiveDate:dd/MM/yyyy}");
        }

        public async Task SendPasswordResetNotificationAsync(string toEmail, string memberName, string newPassword)
        {
            await SendEmailAsync(toEmail, memberName, "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i",
                $"Xin ch√†o {memberName}, m·∫≠t kh·∫©u c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i. M·∫≠t kh·∫©u m·ªõi: {newPassword}. Vui l√≤ng ƒëƒÉng nh·∫≠p v√† ƒë·ªïi m·∫≠t kh·∫©u ngay l·∫≠p t·ª©c.");
        }

        #endregion

        #region Test Helper Methods

        /// <summary>
        /// Reset all captured data
        /// </summary>
        public void Reset()
        {
            SentEmails.Clear();
            ShouldThrowException = false;
            ExceptionMessage = "Email service error";
            IsEnabled = true;
        }

        /// <summary>
        /// Get emails sent to specific recipient
        /// </summary>
        public List<EmailRecord> GetEmailsTo(string recipient)
        {
            return SentEmails.Where(e => e.To.Equals(recipient, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        /// <summary>
        /// Get emails with specific subject
        /// </summary>
        public List<EmailRecord> GetEmailsWithSubject(string subject)
        {
            return SentEmails.Where(e => e.Subject.Contains(subject, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        /// <summary>
        /// Check if email was sent
        /// </summary>
        public bool WasEmailSent(string to, string subjectContains = null)
        {
            return SentEmails.Any(e => 
                e.To.Equals(to, StringComparison.OrdinalIgnoreCase) &&
                (subjectContains == null || e.Subject.Contains(subjectContains, StringComparison.OrdinalIgnoreCase)));
        }

        /// <summary>
        /// Get total emails sent
        /// </summary>
        public int GetTotalEmailsSent() => SentEmails.Count;

        /// <summary>
        /// Get emails sent in date range
        /// </summary>
        public List<EmailRecord> GetEmailsInDateRange(DateTime from, DateTime to)
        {
            return SentEmails.Where(e => e.SentAt >= from && e.SentAt <= to).ToList();
        }

        #endregion
    }

    #region Supporting Classes

    /// <summary>
    /// Record of sent email for testing verification
    /// </summary>
    public class EmailRecord
    {
        public string To { get; set; } = string.Empty;
        public string ToName { get; set; } = string.Empty;
        public string Subject { get; set; } = string.Empty;
        public string Body { get; set; } = string.Empty;
        public DateTime SentAt { get; set; }
        public bool IsHtml { get; set; }
        public bool IsBulk { get; set; }

        public override string ToString()
        {
            return $"Email to {To} ({ToName}): {Subject} (Sent: {SentAt:yyyy-MM-dd HH:mm:ss})";
        }
    }

    #endregion
}
