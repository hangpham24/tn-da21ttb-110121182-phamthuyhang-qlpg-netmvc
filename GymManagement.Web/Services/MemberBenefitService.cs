using GymManagement.Web.Data.Models;
using GymManagement.Web.Data;
using Microsoft.EntityFrameworkCore;

namespace GymManagement.Web.Services
{
    /// <summary>
    /// Service ƒë∆°n gi·∫£n ƒë·ªÉ ki·ªÉm tra quy·ªÅn l·ª£i c·ªßa member
    /// Logic r√µ r√†ng: C√≥ g√≥i t·∫≠p = Mi·ªÖn ph√≠ m·ªçi th·ª©, Kh√¥ng c√≥ = Ph·∫£i tr·∫£ ph√≠
    /// </summary>
    public class MemberBenefitService : IMemberBenefitService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly ILogger<MemberBenefitService> _logger;

        // Gi√° c·ªë ƒë·ªãnh cho gym ƒë∆°n gi·∫£n
        private const decimal CLASS_FEE_FOR_NON_MEMBER = 300000m; // 300k VNƒê/th√°ng l·ªõp h·ªçc
        private const decimal WALKIN_FEE = 15000m; // 15k VNƒê/ng√†y cho kh√°ch v√£ng lai

        public MemberBenefitService(IUnitOfWork unitOfWork, ILogger<MemberBenefitService> logger)
        {
            _unitOfWork = unitOfWork;
            _logger = logger;
        }

        /// <summary>
        /// Ki·ªÉm tra member c√≥ g√≥i t·∫≠p ƒëang ho·∫°t ƒë·ªông kh√¥ng
        /// </summary>
        public async Task<bool> HasActivePackageAsync(int memberId)
        {
            try
            {
                // Cache key cho performance
                var cacheKey = $"member_active_package_{memberId}_{DateTime.Today:yyyyMMdd}";

                var hasActivePackage = await _unitOfWork.Context.DangKys
                    .AnyAsync(d => d.NguoiDungId == memberId &&
                                  d.GoiTapId != null &&
                                  d.TrangThai == "ACTIVE" &&
                                  d.NgayKetThuc >= DateOnly.FromDateTime(DateTime.Today));

                _logger.LogInformation("Member {MemberId} has active package: {HasPackage}", memberId, hasActivePackage);
                return hasActivePackage;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error checking active package for member {MemberId}", memberId);
                return false;
            }
        }

        /// <summary>
        /// L·∫•y th√¥ng tin g√≥i t·∫≠p hi·ªán t·∫°i c·ªßa member
        /// </summary>
        public async Task<DangKy?> GetActivePackageAsync(int memberId)
        {
            try
            {
                return await _unitOfWork.Context.DangKys
                    .Include(d => d.GoiTap)
                    .FirstOrDefaultAsync(d => d.NguoiDungId == memberId &&
                                             d.GoiTapId != null &&
                                             d.TrangThai == "ACTIVE" &&
                                             d.NgayKetThuc >= DateOnly.FromDateTime(DateTime.Today));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting active package for member {MemberId}", memberId);
                return null;
            }
        }

        /// <summary>
        /// Ki·ªÉm tra member c√≥ th·ªÉ booking l·ªõp h·ªçc mi·ªÖn ph√≠ kh√¥ng
        /// LOGIC ƒê∆†N GI·∫¢N: C√≥ g√≥i t·∫≠p = Mi·ªÖn ph√≠, Kh√¥ng c√≥ = Ph·∫£i tr·∫£ 300k/th√°ng
        /// </summary>
        public async Task<(bool CanBook, bool IsFree, decimal Fee, string Reason)> CanBookClassAsync(int memberId, int lopHocId)
        {
            try
            {
                // Validation ƒë·∫ßu v√†o
                if (memberId <= 0)
                    return (false, false, 0, "Member ID kh√¥ng h·ª£p l·ªá");

                if (lopHocId <= 0)
                    return (false, false, 0, "L·ªõp h·ªçc ID kh√¥ng h·ª£p l·ªá");

                // Ki·ªÉm tra l·ªõp h·ªçc c√≥ t·ªìn t·∫°i kh√¥ng
                var lopHoc = await _unitOfWork.Context.LopHocs.FindAsync(lopHocId);
                if (lopHoc == null)
                    return (false, false, 0, "L·ªõp h·ªçc kh√¥ng t·ªìn t·∫°i");

                if (lopHoc.TrangThai != "OPEN")
                    return (false, false, 0, "L·ªõp h·ªçc ƒë√£ ƒë√≥ng");

                // Ki·ªÉm tra member c√≥ g√≥i t·∫≠p kh√¥ng
                var hasActivePackage = await HasActivePackageAsync(memberId);

                if (hasActivePackage)
                {
                    // C√≥ g√≥i t·∫≠p ‚Üí MI·ªÑN PH√ç
                    return (true, true, 0, "Mi·ªÖn ph√≠ v·ªõi g√≥i t·∫≠p");
                }
                else
                {
                    // Kh√¥ng c√≥ g√≥i t·∫≠p ‚Üí PH·∫¢I TR·∫¢ PH√ç
                    return (true, false, CLASS_FEE_FOR_NON_MEMBER, $"Ph√≠ l·ªõp h·ªçc: {CLASS_FEE_FOR_NON_MEMBER:N0} VNƒê");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error checking class booking for member {MemberId}, class {LopHocId}", memberId, lopHocId);
                return (false, false, 0, "C√≥ l·ªói x·∫£y ra khi ki·ªÉm tra");
            }
        }

        /// <summary>
        /// Ki·ªÉm tra member c√≥ th·ªÉ check-in gym kh√¥ng
        /// </summary>
        public async Task<(bool CanCheckIn, bool IsFree, decimal Fee, string Reason)> CanCheckInGymAsync(int memberId)
        {
            try
            {
                var hasActivePackage = await HasActivePackageAsync(memberId);

                if (hasActivePackage)
                {
                    return (true, true, 0, "Mi·ªÖn ph√≠ v·ªõi g√≥i t·∫≠p");
                }
                else
                {
                    return (false, false, 0, "C·∫ßn mua g√≥i t·∫≠p ho·∫∑c v√© v√£ng lai ƒë·ªÉ v√†o gym");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error checking gym access for member {MemberId}", memberId);
                return (false, false, 0, "C√≥ l·ªói x·∫£y ra khi ki·ªÉm tra");
            }
        }

        /// <summary>
        /// L·∫•y th√¥ng tin t·ªïng quan quy·ªÅn l·ª£i c·ªßa member
        /// </summary>
        public async Task<MemberBenefitInfo> GetMemberBenefitsAsync(int memberId)
        {
            try
            {
                var activePackage = await GetActivePackageAsync(memberId);
                var hasActivePackage = activePackage != null;

                return new MemberBenefitInfo
                {
                    MemberId = memberId,
                    HasActivePackage = hasActivePackage,
                    PackageName = activePackage?.GoiTap?.TenGoi,
                    PackageExpiry = activePackage?.NgayKetThuc,
                    CanAccessGym = hasActivePackage,
                    CanBookClassesFree = hasActivePackage,
                    ClassFeeIfNotMember = CLASS_FEE_FOR_NON_MEMBER,
                    WalkInFee = WALKIN_FEE
                };
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting member benefits for {MemberId}", memberId);
                return new MemberBenefitInfo { MemberId = memberId };
            }
        }

        /// <summary>
        /// T√≠nh ph√≠ cho booking l·ªõp h·ªçc
        /// </summary>
        public async Task<decimal> CalculateClassBookingFeeAsync(int memberId, int lopHocId)
        {
            var (canBook, isFree, fee, reason) = await CanBookClassAsync(memberId, lopHocId);
            return canBook ? fee : 0;
        }

        /// <summary>
        /// Ki·ªÉm tra s·ªë l∆∞·ª£ng booking c√≤n l·∫°i trong th√°ng (n·∫øu c√≥ gi·ªõi h·∫°n)
        /// Hi·ªán t·∫°i: KH√îNG GI·ªöI H·∫†N cho ƒë∆°n gi·∫£n
        /// </summary>
        public async Task<(int Used, int Limit, bool HasLimit)> GetMonthlyBookingUsageAsync(int memberId)
        {
            // Logic ƒë∆°n gi·∫£n: Kh√¥ng gi·ªõi h·∫°n s·ªë bu·ªïi booking
            var currentMonth = DateTime.Today.Month;
            var currentYear = DateTime.Today.Year;

            var usedBookings = await _unitOfWork.Context.Bookings
                .CountAsync(b => b.ThanhVienId == memberId &&
                               b.Ngay.Month == currentMonth &&
                               b.Ngay.Year == currentYear &&
                               b.TrangThai == "BOOKED");

            return (usedBookings, -1, false); // -1 = unlimited
        }
    }

    /// <summary>
    /// DTO ch·ª©a th√¥ng tin quy·ªÅn l·ª£i c·ªßa member
    /// </summary>
    public class MemberBenefitInfo
    {
        public int MemberId { get; set; }
        public bool HasActivePackage { get; set; }
        public string? PackageName { get; set; }
        public DateOnly? PackageExpiry { get; set; }
        public bool CanAccessGym { get; set; }
        public bool CanBookClassesFree { get; set; }
        public decimal ClassFeeIfNotMember { get; set; }
        public decimal WalkInFee { get; set; }

        public string StatusText => HasActivePackage ? "Th√†nh vi√™n c√≥ g√≥i t·∫≠p" : "Th√†nh vi√™n ch∆∞a c√≥ g√≥i t·∫≠p";
        public string GymAccessText => CanAccessGym ? "‚úÖ ƒê∆∞·ª£c v√†o gym mi·ªÖn ph√≠" : "‚ùå C·∫ßn mua g√≥i t·∫≠p";
        public string ClassAccessText => CanBookClassesFree ? "‚úÖ Booking l·ªõp h·ªçc mi·ªÖn ph√≠" : $"üí∞ Ph√≠ l·ªõp h·ªçc: {ClassFeeIfNotMember:N0} VNƒê/th√°ng";
    }
}
