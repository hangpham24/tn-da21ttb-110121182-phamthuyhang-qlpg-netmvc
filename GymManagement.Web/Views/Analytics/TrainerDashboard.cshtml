@model GymManagement.Web.Models.DTOs.DashboardAnalyticsDto

@{
    ViewData["Title"] = "Analytics Dashboard - Trainer";
    Layout = "_TrainerLayout";
}

@section Styles {
    <style>
        .metric-card {
            transition: all 0.3s ease;
        }
        .metric-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        }
        .chart-container {
            position: relative;
            height: 350px;
        }
        .export-btn {
            transition: all 0.2s ease;
        }
        .export-btn:hover {
            transform: scale(1.05);
        }
    </style>
}

<div class="min-h-screen bg-gray-50 p-6">
    <!-- Header Section -->
    <div class="mb-8">
        <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center">
            <div>
                <h1 class="text-3xl font-bold text-gray-900 mb-2">üìä Analytics Dashboard</h1>
                <p class="text-gray-600">Ph√¢n t√≠ch hi·ªáu su·∫•t v√† b√°o c√°o c√° nh√¢n</p>
            </div>
            <div class="mt-4 sm:mt-0 flex space-x-3">
                <button onclick="refreshData()" class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                    </svg>
                    L√†m m·ªõi
                </button>
                <div class="relative">
                    <button onclick="toggleExportMenu()" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                        </svg>
                        Xu·∫•t b√°o c√°o
                        <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                        </svg>
                    </button>
                    <!-- Export Menu -->
                    <div id="exportMenu" class="hidden absolute right-0 mt-2 w-56 bg-white rounded-md shadow-lg z-10">
                        <div class="py-1">
                            <button onclick="exportReport('trainer_classes', 'pdf')" class="export-btn block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                                üìÑ B√°o c√°o l·ªõp h·ªçc (PDF)
                            </button>
                            <button onclick="exportReport('trainer_classes', 'excel')" class="export-btn block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                                üìä B√°o c√°o l·ªõp h·ªçc (Excel)
                            </button>
                            <button onclick="exportReport('attendance', 'pdf')" class="export-btn block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                                ‚úÖ B√°o c√°o ƒëi·ªÉm danh (PDF)
                            </button>
                            <button onclick="exportReport('attendance', 'excel')" class="export-btn block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                                ‚úÖ B√°o c√°o ƒëi·ªÉm danh (Excel)
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- KPI Metrics Row -->
    <div id="kpiMetrics" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <!-- KPI cards will be loaded here -->
    </div>

    <!-- Date Range Filter -->
    <div class="bg-white rounded-lg shadow p-6 mb-8">
        <div class="flex flex-col sm:flex-row gap-4 items-center">
            <div class="flex items-center space-x-4">
                <label class="text-sm font-medium text-gray-700">Kho·∫£ng th·ªùi gian:</label>
                <input type="date" id="startDate" class="border border-gray-300 rounded-md px-3 py-2 text-sm">
                <span class="text-gray-500">ƒë·∫øn</span>
                <input type="date" id="endDate" class="border border-gray-300 rounded-md px-3 py-2 text-sm">
            </div>
            <button onclick="updateCharts()" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 text-sm">
                C·∫≠p nh·∫≠t
            </button>
            <div class="flex space-x-2">
                <button onclick="setDateRange(7)" class="px-3 py-2 text-sm border border-gray-300 rounded-md hover:bg-gray-50">7 ng√†y</button>
                <button onclick="setDateRange(30)" class="px-3 py-2 text-sm border border-gray-300 rounded-md hover:bg-gray-50">30 ng√†y</button>
                <button onclick="setDateRange(90)" class="px-3 py-2 text-sm border border-gray-300 rounded-md hover:bg-gray-50">90 ng√†y</button>
            </div>
        </div>
    </div>

    <!-- Charts Grid -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
        <!-- Personal Performance -->
        <div class="bg-white rounded-lg shadow p-6">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">üéØ Hi·ªáu su·∫•t c√° nh√¢n</h3>
            <div class="chart-container">
                <canvas id="personalPerformanceChart"></canvas>
            </div>
        </div>

        <!-- Attendance Analytics -->
        <div class="bg-white rounded-lg shadow p-6">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">‚úÖ Ph√¢n t√≠ch ƒêi·ªÉm danh</h3>
            <div class="chart-container">
                <canvas id="attendanceChart"></canvas>
            </div>
        </div>
    </div>

    <!-- Class Statistics -->
    <div class="bg-white rounded-lg shadow p-6 mb-8">
        <h3 class="text-lg font-semibold text-gray-900 mb-6">üìö Th·ªëng k√™ L·ªõp h·ªçc</h3>
        <div id="classStatistics" class="grid grid-cols-1 md:grid-cols-3 gap-6">
            <!-- Class stats will be loaded here -->
        </div>
    </div>

    <!-- Performance Trends -->
    <div class="bg-white rounded-lg shadow p-6">
        <h3 class="text-lg font-semibold text-gray-900 mb-4">üìà Xu h∆∞·ªõng Hi·ªáu su·∫•t</h3>
        <div class="chart-container">
            <canvas id="performanceTrendsChart"></canvas>
        </div>
    </div>
</div>

<!-- Loading Overlay -->
<div id="loadingOverlay" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
    <div class="bg-white rounded-lg p-6 flex items-center space-x-4">
        <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
        <span class="text-gray-700">ƒêang t·∫£i d·ªØ li·ªáu...</span>
    </div>
</div>

@section Scripts {
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>

    <script>
        // Global variables
        let charts = {};

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            initializeDatePickers();
            loadKpiMetrics();
            loadAllCharts();
            loadClassStatistics();
        });

        // Initialize date pickers with default values
        function initializeDatePickers() {
            const endDate = new Date();
            const startDate = new Date();
            startDate.setDate(startDate.getDate() - 30);

            document.getElementById('startDate').value = startDate.toISOString().split('T')[0];
            document.getElementById('endDate').value = endDate.toISOString().split('T')[0];
        }

        // Load KPI Metrics
        async function loadKpiMetrics() {
            try {
                const response = await fetch('@Url.Action("GetKpiMetrics")');
                const metrics = await response.json();
                
                if (metrics.error) {
                    showNotification('error', metrics.error);
                    return;
                }

                renderKpiMetrics(metrics);
            } catch (error) {
                console.error('Error loading KPI metrics:', error);
                showNotification('error', 'C√≥ l·ªói x·∫£y ra khi t·∫£i KPI metrics.');
            }
        }

        // Render KPI Metrics
        function renderKpiMetrics(metrics) {
            const container = document.getElementById('kpiMetrics');
            container.innerHTML = '';

            // Add some default trainer metrics if not enough
            const defaultMetrics = [
                { name: 'total_classes', displayName: 'T·ªïng l·ªõp h·ªçc', value: 0, format: 'number', icon: 'book', color: 'blue' },
                { name: 'total_students', displayName: 'T·ªïng h·ªçc vi√™n', value: 0, format: 'number', icon: 'users', color: 'green' },
                { name: 'avg_attendance', displayName: 'ƒêi·ªÉm danh TB', value: 0, format: 'percentage', icon: 'check-circle', color: 'purple' },
                { name: 'monthly_salary', displayName: 'L∆∞∆°ng th√°ng n√†y', value: 0, format: 'currency', icon: 'dollar-sign', color: 'yellow' }
            ];

            const displayMetrics = metrics.length > 0 ? metrics : defaultMetrics;

            displayMetrics.forEach(metric => {
                const changeClass = metric.changeDirection === 'up' ? 'text-green-600' : 
                                   metric.changeDirection === 'down' ? 'text-red-600' : 'text-gray-600';
                
                const changeIcon = metric.changeDirection === 'up' ? '‚ÜóÔ∏è' : 
                                  metric.changeDirection === 'down' ? '‚ÜòÔ∏è' : '‚û°Ô∏è';

                const card = `
                    <div class="metric-card bg-white rounded-lg shadow p-6">
                        <div class="flex items-center">
                            <div class="p-3 rounded-full bg-${metric.color || 'blue'}-100 text-${metric.color || 'blue'}-600">
                                <span class="text-2xl">${getMetricIcon(metric.icon)}</span>
                            </div>
                            <div class="ml-4 flex-1">
                                <p class="text-sm font-medium text-gray-600">${metric.displayName}</p>
                                <p class="text-2xl font-bold text-gray-900">${formatMetricValue(metric.value, metric.format)}</p>
                                ${metric.changePercent !== null && metric.changePercent !== undefined ? `
                                    <p class="text-sm ${changeClass} flex items-center">
                                        ${changeIcon} ${Math.abs(metric.changePercent).toFixed(1)}%
                                    </p>
                                ` : ''}
                            </div>
                        </div>
                    </div>
                `;
                container.insertAdjacentHTML('beforeend', card);
            });
        }

        // Get metric icon
        function getMetricIcon(iconName) {
            const icons = {
                'users': 'üë•',
                'dollar-sign': 'üí∞',
                'check-circle': '‚úÖ',
                'book': 'üìö',
                'chart-bar': 'üìä'
            };
            return icons[iconName] || 'üìä';
        }

        // Format metric value
        function formatMetricValue(value, format) {
            switch (format) {
                case 'currency':
                    return new Intl.NumberFormat('vi-VN', {
                        style: 'currency',
                        currency: 'VND'
                    }).format(value);
                case 'percentage':
                    return `${value.toFixed(1)}%`;
                default:
                    return new Intl.NumberFormat('vi-VN').format(value);
            }
        }

        // Load all charts
        async function loadAllCharts() {
            showLoading(true);
            
            try {
                await Promise.all([
                    loadPersonalPerformanceChart(),
                    loadAttendanceChart(),
                    loadPerformanceTrendsChart()
                ]);
            } catch (error) {
                console.error('Error loading charts:', error);
                showNotification('error', 'C√≥ l·ªói x·∫£y ra khi t·∫£i bi·ªÉu ƒë·ªì.');
            } finally {
                showLoading(false);
            }
        }

        // Load Personal Performance Chart
        async function loadPersonalPerformanceChart() {
            try {
                const response = await fetch('@Url.Action("GetTrainerPerformanceAnalytics")');
                const data = await response.json();
                
                if (data.error) {
                    showNotification('error', data.error);
                    return;
                }

                renderChart('personalPerformanceChart', data, 'radar');
            } catch (error) {
                console.error('Error loading personal performance chart:', error);
            }
        }

        // Load Attendance Chart
        async function loadAttendanceChart() {
            try {
                const startDate = document.getElementById('startDate').value;
                const endDate = document.getElementById('endDate').value;
                
                const response = await fetch(`@Url.Action("GetAttendanceAnalytics")?startDate=${startDate}&endDate=${endDate}`);
                const data = await response.json();
                
                if (data.error) {
                    showNotification('error', data.error);
                    return;
                }

                renderChart('attendanceChart', data, 'bar');
            } catch (error) {
                console.error('Error loading attendance chart:', error);
            }
        }

        // Load Performance Trends Chart
        async function loadPerformanceTrendsChart() {
            try {
                const startDate = document.getElementById('startDate').value;
                const endDate = document.getElementById('endDate').value;
                
                // For now, we'll simulate trend data
                const trendData = {
                    chartType: 'line',
                    title: 'Xu h∆∞·ªõng Hi·ªáu su·∫•t',
                    labels: generateDateLabels(30),
                    series: [
                        {
                            name: 'ƒêi·ªÉm danh',
                            data: generateRandomData(30, 20, 50),
                            color: '#3B82F6'
                        },
                        {
                            name: 'ƒê√°nh gi√°',
                            data: generateRandomData(30, 3, 5),
                            color: '#10B981'
                        }
                    ],
                    options: {
                        xAxisLabel: 'Ng√†y',
                        yAxisLabel: 'Gi√° tr·ªã'
                    }
                };

                renderChart('performanceTrendsChart', trendData, 'line');
            } catch (error) {
                console.error('Error loading performance trends chart:', error);
            }
        }

        // Load Class Statistics
        async function loadClassStatistics() {
            try {
                // For now, we'll simulate class statistics
                const statsData = [
                    { title: 'L·ªõp ƒëang d·∫°y', value: '8', icon: 'üìö', color: 'blue' },
                    { title: 'H·ªçc vi√™n ƒëang theo', value: '156', icon: 'üë•', color: 'green' },
                    { title: 'T·ª∑ l·ªá tham gia', value: '85%', icon: 'üìà', color: 'purple' }
                ];

                renderClassStatistics(statsData);
            } catch (error) {
                console.error('Error loading class statistics:', error);
            }
        }

        // Render Class Statistics
        function renderClassStatistics(stats) {
            const container = document.getElementById('classStatistics');
            container.innerHTML = '';

            stats.forEach(stat => {
                const card = `
                    <div class="text-center p-6 bg-gray-50 rounded-lg">
                        <div class="text-3xl mb-3">${stat.icon}</div>
                        <p class="text-2xl font-bold text-gray-900 mb-1">${stat.value}</p>
                        <p class="text-sm text-gray-600">${stat.title}</p>
                    </div>
                `;
                container.insertAdjacentHTML('beforeend', card);
            });
        }

        // Generic chart renderer
        function renderChart(canvasId, data, defaultType) {
            const ctx = document.getElementById(canvasId).getContext('2d');
            
            // Destroy existing chart if exists
            if (charts[canvasId]) {
                charts[canvasId].destroy();
            }

            const chartType = data.chartType || defaultType;
            
            const config = {
                type: chartType,
                data: {
                    labels: data.labels,
                    datasets: data.series.map(series => ({
                        label: series.name,
                        data: series.data,
                        backgroundColor: series.color + (chartType === 'line' ? '20' : ''),
                        borderColor: series.color,
                        borderWidth: 2,
                        fill: series.fill || false,
                        tension: 0.4
                    }))
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: !!data.title,
                            text: data.title
                        },
                        legend: {
                            display: data.options?.showLegend !== false
                        }
                    },
                    scales: chartType !== 'doughnut' && chartType !== 'pie' && chartType !== 'radar' ? {
                        x: {
                            display: true,
                            title: {
                                display: !!data.options?.xAxisLabel,
                                text: data.options?.xAxisLabel
                            }
                        },
                        y: {
                            display: true,
                            title: {
                                display: !!data.options?.yAxisLabel,
                                text: data.options?.yAxisLabel
                            }
                        }
                    } : {}
                }
            };

            charts[canvasId] = new Chart(ctx, config);
        }

        // Utility functions
        function generateDateLabels(days) {
            const labels = [];
            const today = new Date();
            for (let i = days - 1; i >= 0; i--) {
                const date = new Date(today);
                date.setDate(date.getDate() - i);
                labels.push(date.toLocaleDateString('vi-VN', { month: 'short', day: 'numeric' }));
            }
            return labels;
        }

        function generateRandomData(count, min, max) {
            const data = [];
            for (let i = 0; i < count; i++) {
                data.push(Math.floor(Math.random() * (max - min + 1)) + min);
            }
            return data;
        }

        function showLoading(show) {
            const overlay = document.getElementById('loadingOverlay');
            if (show) {
                overlay.classList.remove('hidden');
            } else {
                overlay.classList.add('hidden');
            }
        }

        function showNotification(type, message) {
            const color = type === 'error' ? 'bg-red-500' : 'bg-green-500';
            const notification = document.createElement('div');
            notification.className = `fixed top-4 right-4 ${color} text-white px-6 py-3 rounded-md shadow-lg z-50`;
            notification.textContent = message;
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.remove();
            }, 5000);
        }

        function setDateRange(days) {
            const endDate = new Date();
            const startDate = new Date();
            startDate.setDate(startDate.getDate() - days);

            document.getElementById('startDate').value = startDate.toISOString().split('T')[0];
            document.getElementById('endDate').value = endDate.toISOString().split('T')[0];
        }

        function updateCharts() {
            loadAllCharts();
        }

        function refreshData() {
            loadKpiMetrics();
            loadAllCharts();
            loadClassStatistics();
        }

        function toggleExportMenu() {
            const menu = document.getElementById('exportMenu');
            menu.classList.toggle('hidden');
        }

        // Close export menu when clicking outside
        document.addEventListener('click', function(event) {
            const menu = document.getElementById('exportMenu');
            const button = event.target.closest('[onclick="toggleExportMenu()"]');
            
            if (!button && !menu.contains(event.target)) {
                menu.classList.add('hidden');
            }
        });

        async function exportReport(reportType, format) {
            try {
                showLoading(true);
                
                const startDate = document.getElementById('startDate').value;
                const endDate = document.getElementById('endDate').value;
                
                const response = await fetch('@Url.Action("ExportTrainerReport")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({
                        reportType: reportType,
                        format: format,
                        parameters: {
                            startDate: startDate,
                            endDate: endDate
                        }
                    })
                });

                if (response.ok) {
                    const blob = await response.blob();
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `trainer_${reportType}_${new Date().toISOString().split('T')[0]}.${format === 'pdf' ? 'pdf' : 'xlsx'}`;
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                    document.body.removeChild(a);
                    
                    showNotification('success', 'Xu·∫•t b√°o c√°o th√†nh c√¥ng!');
                } else {
                    const error = await response.json();
                    showNotification('error', error.message || 'C√≥ l·ªói x·∫£y ra khi xu·∫•t b√°o c√°o.');
                }
            } catch (error) {
                console.error('Error exporting report:', error);
                showNotification('error', 'C√≥ l·ªói x·∫£y ra khi xu·∫•t b√°o c√°o.');
            } finally {
                showLoading(false);
                document.getElementById('exportMenu').classList.add('hidden');
            }
        }
    </script>
} 