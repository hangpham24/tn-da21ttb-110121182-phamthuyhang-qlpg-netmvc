@{
    ViewData["Title"] = "B√°o C√°o ƒêi·ªÉm Danh - Admin";
    Layout = "_Layout";
}

<div class="min-h-screen bg-gradient-to-br from-gray-50 via-purple-50 to-violet-50">
    <div class="container mx-auto px-4 py-8">
        <!-- Breadcrumb -->
        <nav class="flex mb-6" aria-label="Breadcrumb">
            <ol class="inline-flex items-center space-x-1 md:space-x-3">
                <li class="inline-flex items-center">
                    <a href="@Url.Action("Index", "BaoCao")" class="inline-flex items-center text-sm font-medium text-gray-700 hover:text-purple-600">
                        <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"></path>
                        </svg>
                        Dashboard
                    </a>
                </li>
                <li>
                    <div class="flex items-center">
                        <svg class="w-6 h-6 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                        </svg>
                        <span class="ml-1 text-sm font-medium text-gray-500 md:ml-2">B√°o c√°o ƒëi·ªÉm danh</span>
                    </div>
                </li>
            </ol>
        </nav>

        <!-- Header Section -->
        <div class="mb-8">
            <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between">
                <div class="mb-4 lg:mb-0">
                    <h1 class="text-4xl font-bold bg-gradient-to-r from-purple-600 to-violet-600 bg-clip-text text-transparent mb-2">
                        ‚úÖ B√°o C√°o ƒêi·ªÉm Danh
                    </h1>
                    <p class="text-gray-600 text-lg">Xu h∆∞·ªõng ƒëi·ªÉm danh v√† engagement c·ªßa th√†nh vi√™n</p>
                </div>
                
                <!-- Date Range Filter -->
                <div class="flex space-x-3">
                    <input type="date" id="startDate" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                    <input type="date" id="endDate" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                    <button id="applyFilter" class="bg-purple-600 hover:bg-purple-700 text-white px-6 py-2 rounded-lg font-medium transition-all duration-300 transform hover:scale-105">
                        √Åp d·ª•ng
                    </button>
                </div>
            </div>
        </div>

        <!-- Summary Cards -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <!-- Today's Attendance -->
            <div class="bg-white rounded-2xl shadow-lg p-6 border border-gray-100 hover:shadow-xl transition-all duration-300">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-gray-600 mb-1">ƒêi·ªÉm danh h√¥m nay</p>
                        <p id="todayAttendance" class="text-3xl font-bold text-purple-600">0</p>
                        <p class="text-xs text-gray-500 mt-1">
                            <span id="todayChange" class="text-purple-500">+0%</span> so v·ªõi h√¥m qua
                        </p>
                    </div>
                    <div class="w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center">
                        <svg class="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                    </div>
                </div>
            </div>

            <!-- Average Daily -->
            <div class="bg-white rounded-2xl shadow-lg p-6 border border-gray-100 hover:shadow-xl transition-all duration-300">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-gray-600 mb-1">Trung b√¨nh/ng√†y</p>
                        <p id="avgDaily" class="text-3xl font-bold text-blue-600">0</p>
                        <p class="text-xs text-gray-500 mt-1">Trong kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn</p>
                    </div>
                    <div class="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center">
                        <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                        </svg>
                    </div>
                </div>
            </div>

            <!-- Peak Hour -->
            <div class="bg-white rounded-2xl shadow-lg p-6 border border-gray-100 hover:shadow-xl transition-all duration-300">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-gray-600 mb-1">Gi·ªù cao ƒëi·ªÉm</p>
                        <p id="peakHour" class="text-3xl font-bold text-orange-600">18:00</p>
                        <p id="peakCount" class="text-xs text-gray-500 mt-1">0 l∆∞·ª£t ƒëi·ªÉm danh</p>
                    </div>
                    <div class="w-12 h-12 bg-orange-100 rounded-full flex items-center justify-center">
                        <svg class="w-6 h-6 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                    </div>
                </div>
            </div>

            <!-- Attendance Rate -->
            <div class="bg-white rounded-2xl shadow-lg p-6 border border-gray-100 hover:shadow-xl transition-all duration-300">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-gray-600 mb-1">T·ª∑ l·ªá tham gia</p>
                        <p id="attendanceRate" class="text-3xl font-bold text-green-600">0%</p>
                        <p class="text-xs text-gray-500 mt-1">C·ªßa t·ªïng th√†nh vi√™n</p>
                    </div>
                    <div class="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center">
                        <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
                        </svg>
                    </div>
                </div>
            </div>
        </div>

        <!-- Charts Section -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
            <!-- Attendance Trend Chart -->
            <div class="bg-white rounded-2xl shadow-lg p-6 border border-gray-100">
                <div class="flex items-center justify-between mb-6">
                    <h3 class="text-xl font-bold text-gray-900">üìà Xu h∆∞·ªõng ƒëi·ªÉm danh</h3>
                    <div class="flex space-x-2">
                        <button class="trend-btn px-3 py-1 text-xs bg-purple-600 text-white rounded-full" data-period="7">7 ng√†y</button>
                        <button class="trend-btn px-3 py-1 text-xs bg-purple-100 text-purple-600 rounded-full hover:bg-purple-200 transition-colors" data-period="30">30 ng√†y</button>
                    </div>
                </div>
                <div class="h-80">
                    <canvas id="attendanceTrendChart"></canvas>
                </div>
            </div>

            <!-- Time Slot Distribution -->
            <div class="bg-white rounded-2xl shadow-lg p-6 border border-gray-100">
                <div class="flex items-center justify-between mb-6">
                    <h3 class="text-xl font-bold text-gray-900">üïê Ph√¢n b·ªë theo gi·ªù</h3>
                    <div class="text-sm text-gray-500">H√¥m nay</div>
                </div>
                <div class="h-80">
                    <canvas id="timeSlotChart"></canvas>
                </div>
            </div>
        </div>

        <!-- Class Popularity and Member Engagement -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
            <!-- Popular Classes -->
            <div class="bg-white rounded-2xl shadow-lg p-6 border border-gray-100">
                <h3 class="text-xl font-bold text-gray-900 mb-6 flex items-center">
                    <svg class="w-5 h-5 mr-2 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"></path>
                    </svg>
                    L·ªõp h·ªçc ph·ªï bi·∫øn
                </h3>
                
                <div id="popularClasses" class="space-y-4">
                    <!-- Popular classes will be loaded here -->
                </div>
            </div>

            <!-- Member Engagement -->
            <div class="bg-white rounded-2xl shadow-lg p-6 border border-gray-100">
                <h3 class="text-xl font-bold text-gray-900 mb-6 flex items-center">
                    <svg class="w-5 h-5 mr-2 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                    </svg>
                    M·ª©c ƒë·ªô tham gia
                </h3>
                
                <div class="space-y-4">
                    <div class="flex items-center justify-between p-4 bg-green-50 rounded-lg">
                        <div class="flex items-center">
                            <div class="w-3 h-3 bg-green-500 rounded-full mr-3"></div>
                            <span class="text-sm font-medium text-gray-700">Tham gia th∆∞·ªùng xuy√™n (>15 l·∫ßn/th√°ng)</span>
                        </div>
                        <span id="highEngagement" class="text-sm font-bold text-green-600">0</span>
                    </div>
                    <div class="flex items-center justify-between p-4 bg-yellow-50 rounded-lg">
                        <div class="flex items-center">
                            <div class="w-3 h-3 bg-yellow-500 rounded-full mr-3"></div>
                            <span class="text-sm font-medium text-gray-700">Tham gia v·ª´a ph·∫£i (5-15 l·∫ßn/th√°ng)</span>
                        </div>
                        <span id="mediumEngagement" class="text-sm font-bold text-yellow-600">0</span>
                    </div>
                    <div class="flex items-center justify-between p-4 bg-red-50 rounded-lg">
                        <div class="flex items-center">
                            <div class="w-3 h-3 bg-red-500 rounded-full mr-3"></div>
                            <span class="text-sm font-medium text-gray-700">Tham gia √≠t (<5 l·∫ßn/th√°ng)</span>
                        </div>
                        <span id="lowEngagement" class="text-sm font-bold text-red-600">0</span>
                    </div>
                    <div class="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                        <div class="flex items-center">
                            <div class="w-3 h-3 bg-gray-500 rounded-full mr-3"></div>
                            <span class="text-sm font-medium text-gray-700">Ch∆∞a tham gia</span>
                        </div>
                        <span id="noEngagement" class="text-sm font-bold text-gray-600">0</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Detailed Attendance Table -->
        <div class="bg-white rounded-2xl shadow-lg border border-gray-100">
            <div class="p-6 border-b border-gray-200">
                <h3 class="text-xl font-bold text-gray-900 flex items-center">
                    <svg class="w-5 h-5 mr-2 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2m0 10a2 2 0 002 2h2a2 2 0 002-2M9 7a2 2 0 012-2h2a2 2 0 012 2m0 10V7m0 10a2 2 0 002 2h2a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2h2a2 2 0 002-2z"></path>
                    </svg>
                    Chi ti·∫øt ƒëi·ªÉm danh theo ng√†y
                </h3>
            </div>
            
            <div class="overflow-x-auto">
                <table class="w-full">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Ng√†y</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">T·ªïng ƒëi·ªÉm danh</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Gi·ªù cao ƒëi·ªÉm</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">L·ªõp ph·ªï bi·∫øn nh·∫•t</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">T·ª∑ l·ªá tham gia</th>
                        </tr>
                    </thead>
                    <tbody id="attendanceTableBody" class="bg-white divide-y divide-gray-200">
                        <!-- Table rows will be populated by JavaScript -->
                        <tr>
                            <td colspan="5" class="px-6 py-8 text-center text-gray-500">
                                <div class="flex items-center justify-center">
                                    <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-purple-600 mr-2"></div>
                                    ƒêang t·∫£i d·ªØ li·ªáu...
                                </div>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>
        // Global variables
        let attendanceTrendChart, timeSlotChart;
        let currentStartDate, currentEndDate;

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            initializeDateFilters();
            initializeCharts();
            loadAttendanceData();

            // Event listeners
            document.getElementById('applyFilter').addEventListener('click', loadAttendanceData);

            // Trend period buttons
            document.querySelectorAll('.trend-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    changeTrendPeriod(this.dataset.period);
                });
            });
        });

        // Initialize date filters
        function initializeDateFilters() {
            const today = new Date();
            const sevenDaysAgo = new Date(today);
            sevenDaysAgo.setDate(today.getDate() - 7);

            currentStartDate = sevenDaysAgo.toISOString().split('T')[0];
            currentEndDate = today.toISOString().split('T')[0];

            document.getElementById('startDate').value = currentStartDate;
            document.getElementById('endDate').value = currentEndDate;
        }

        // Load attendance data
        function loadAttendanceData() {
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;

            if (!startDate || !endDate) {
                showNotification('Vui l√≤ng ch·ªçn kho·∫£ng th·ªùi gian', 'error');
                return;
            }

            if (new Date(startDate) > new Date(endDate)) {
                showNotification('Ng√†y b·∫Øt ƒë·∫ßu kh√¥ng th·ªÉ l·ªõn h∆°n ng√†y k·∫øt th√∫c', 'error');
                return;
            }

            currentStartDate = startDate;
            currentEndDate = endDate;

            showLoading(true);

            fetch(`@Url.Action("GetAttendanceData", "BaoCao")?startDate=${startDate}&endDate=${endDate}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        updateSummaryCards(data);
                        updateAttendanceTrendChart(data.attendanceTrend);
                        updateTimeSlotChart(data.todayByTimeSlot);
                        updatePopularClasses();
                        updateMemberEngagement();
                        updateAttendanceTable(data.attendanceTrend);
                    } else {
                        showNotification('C√≥ l·ªói khi t·∫£i d·ªØ li·ªáu ƒëi·ªÉm danh', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error loading attendance data:', error);
                    showNotification('C√≥ l·ªói khi t·∫£i d·ªØ li·ªáu ƒëi·ªÉm danh', 'error');
                })
                .finally(() => {
                    showLoading(false);
                });
        }

        // Update summary cards
        function updateSummaryCards(data) {
            // Today's attendance
            const todayAttendance = Math.floor(Math.random() * 150) + 50; // Mock data
            document.getElementById('todayAttendance').textContent = todayAttendance.toLocaleString('vi-VN');

            // Calculate average daily attendance
            const attendanceValues = Object.values(data.attendanceTrend || {});
            const avgDaily = attendanceValues.length > 0 ?
                Math.round(attendanceValues.reduce((sum, val) => sum + val, 0) / attendanceValues.length) : 0;
            document.getElementById('avgDaily').textContent = avgDaily.toLocaleString('vi-VN');

            // Peak hour and count
            const peakHour = '18:00';
            const peakCount = Math.floor(Math.random() * 30) + 20;
            document.getElementById('peakHour').textContent = peakHour;
            document.getElementById('peakCount').textContent = peakCount + ' l∆∞·ª£t ƒëi·ªÉm danh';

            // Attendance rate
            const attendanceRate = (Math.random() * 20 + 65).toFixed(1); // 65-85%
            document.getElementById('attendanceRate').textContent = attendanceRate + '%';

            // Today's change
            const todayChange = Math.floor(Math.random() * 20) - 5; // -5% to +15%
            const changeElement = document.getElementById('todayChange');
            changeElement.textContent = (todayChange >= 0 ? '+' : '') + todayChange + '%';
            changeElement.className = todayChange >= 0 ? 'text-green-500' : 'text-red-500';
        }

        // Initialize charts
        function initializeCharts() {
            initializeAttendanceTrendChart();
            initializeTimeSlotChart();
        }

        function initializeAttendanceTrendChart() {
            const ctx = document.getElementById('attendanceTrendChart').getContext('2d');

            attendanceTrendChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'S·ªë l∆∞·ª£t ƒëi·ªÉm danh',
                        data: [],
                        borderColor: 'rgb(147, 51, 234)',
                        backgroundColor: 'rgba(147, 51, 234, 0.1)',
                        borderWidth: 3,
                        fill: true,
                        tension: 0.4,
                        pointBackgroundColor: 'rgb(147, 51, 234)',
                        pointBorderColor: '#fff',
                        pointBorderWidth: 2,
                        pointRadius: 5,
                        pointHoverRadius: 7
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            titleColor: 'white',
                            bodyColor: 'white',
                            borderColor: 'rgb(147, 51, 234)',
                            borderWidth: 1
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            grid: {
                                color: 'rgba(0, 0, 0, 0.05)'
                            }
                        },
                        x: {
                            grid: {
                                display: false
                            }
                        }
                    },
                    interaction: {
                        intersect: false,
                        mode: 'index'
                    }
                }
            });
        }

        function initializeTimeSlotChart() {
            const ctx = document.getElementById('timeSlotChart').getContext('2d');

            // Generate time slots for a day
            const timeSlots = [];
            const attendanceData = [];

            for (let hour = 6; hour <= 22; hour++) {
                timeSlots.push(hour + ':00');
                // Generate realistic attendance pattern (higher in evening)
                let baseAttendance = 5;
                if (hour >= 17 && hour <= 20) baseAttendance = 25; // Peak hours
                else if (hour >= 8 && hour <= 11) baseAttendance = 15; // Morning
                else if (hour >= 14 && hour <= 16) baseAttendance = 12; // Afternoon

                attendanceData.push(Math.floor(Math.random() * 10) + baseAttendance);
            }

            timeSlotChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: timeSlots,
                    datasets: [{
                        label: 'S·ªë l∆∞·ª£t ƒëi·ªÉm danh',
                        data: attendanceData,
                        backgroundColor: 'rgba(147, 51, 234, 0.8)',
                        borderColor: 'rgb(147, 51, 234)',
                        borderWidth: 1,
                        borderRadius: 8,
                        borderSkipped: false
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            titleColor: 'white',
                            bodyColor: 'white'
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            grid: {
                                color: 'rgba(0, 0, 0, 0.05)'
                            }
                        },
                        x: {
                            grid: {
                                display: false
                            }
                        }
                    }
                }
            });
        }

        // Update charts with new data
        function updateAttendanceTrendChart(data) {
            // Generate mock data based on date range
            const labels = [];
            const values = [];
            const startDate = new Date(currentStartDate);
            const endDate = new Date(currentEndDate);

            for (let d = new Date(startDate); d <= endDate; d.setDate(d.getDate() + 1)) {
                labels.push(d.toLocaleDateString('vi-VN', { month: 'short', day: 'numeric' }));
                values.push(Math.floor(Math.random() * 100) + 50); // 50-150 attendances per day
            }

            attendanceTrendChart.data.labels = labels;
            attendanceTrendChart.data.datasets[0].data = values;
            attendanceTrendChart.update('active');
        }

        function updateTimeSlotChart(data) {
            // Chart is already initialized with realistic data
            // In a real application, you would update with actual data
        }

        // Update popular classes
        function updatePopularClasses() {
            const classes = [
                { name: 'Yoga Bu·ªïi S√°ng', attendance: 45, capacity: 50, trainer: 'HLV Mai' },
                { name: 'Cardio Bu·ªïi T·ªëi', attendance: 38, capacity: 40, trainer: 'HLV Nam' },
                { name: 'Pilates N√¢ng Cao', attendance: 28, capacity: 30, trainer: 'HLV Linh' },
                { name: 'Zumba Dance', attendance: 35, capacity: 40, trainer: 'HLV H∆∞∆°ng' },
                { name: 'CrossFit', attendance: 22, capacity: 25, trainer: 'HLV Minh' }
            ];

            const container = document.getElementById('popularClasses');
            container.innerHTML = classes.map((cls, index) => {
                const percentage = Math.round((cls.attendance / cls.capacity) * 100);
                const colorClass = percentage >= 90 ? 'bg-red-500' :
                                 percentage >= 70 ? 'bg-orange-500' :
                                 percentage >= 50 ? 'bg-yellow-500' : 'bg-green-500';

                return `
                    <div class="flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors duration-200">
                        <div class="flex items-center">
                            <div class="w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center mr-3">
                                <span class="text-purple-600 font-bold text-sm">${index + 1}</span>
                            </div>
                            <div>
                                <h4 class="text-sm font-medium text-gray-900">${cls.name}</h4>
                                <p class="text-xs text-gray-600">HLV: ${cls.trainer}</p>
                            </div>
                        </div>
                        <div class="text-right">
                            <div class="text-sm font-bold text-gray-900">${cls.attendance}/${cls.capacity}</div>
                            <div class="w-16 bg-gray-200 rounded-full h-2 mt-1">
                                <div class="${colorClass} h-2 rounded-full transition-all duration-300" style="width: ${percentage}%"></div>
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
        }

        // Update member engagement
        function updateMemberEngagement() {
            // Generate mock engagement data
            const totalMembers = 500; // Mock total members
            const high = Math.floor(totalMembers * 0.25); // 25% high engagement
            const medium = Math.floor(totalMembers * 0.35); // 35% medium engagement
            const low = Math.floor(totalMembers * 0.30); // 30% low engagement
            const none = totalMembers - high - medium - low; // Remaining

            document.getElementById('highEngagement').textContent = high.toLocaleString('vi-VN');
            document.getElementById('mediumEngagement').textContent = medium.toLocaleString('vi-VN');
            document.getElementById('lowEngagement').textContent = low.toLocaleString('vi-VN');
            document.getElementById('noEngagement').textContent = none.toLocaleString('vi-VN');
        }

        // Update attendance table
        function updateAttendanceTable(data) {
            const tbody = document.getElementById('attendanceTableBody');

            // Generate mock table data
            const tableData = [];
            const startDate = new Date(currentStartDate);
            const endDate = new Date(currentEndDate);

            for (let d = new Date(endDate); d >= startDate; d.setDate(d.getDate() - 1)) {
                const totalAttendance = Math.floor(Math.random() * 100) + 50;
                const peakHour = ['17:00', '18:00', '19:00', '20:00'][Math.floor(Math.random() * 4)];
                const popularClass = ['Yoga Bu·ªïi S√°ng', 'Cardio Bu·ªïi T·ªëi', 'Pilates', 'Zumba'][Math.floor(Math.random() * 4)];
                const participationRate = (Math.random() * 20 + 60).toFixed(1); // 60-80%

                tableData.push({
                    date: new Date(d),
                    totalAttendance,
                    peakHour,
                    popularClass,
                    participationRate
                });
            }

            if (tableData.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="5" class="px-6 py-8 text-center text-gray-500">
                            Kh√¥ng c√≥ d·ªØ li·ªáu trong kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn
                        </td>
                    </tr>
                `;
                return;
            }

            tbody.innerHTML = tableData.map(row => `
                <tr class="hover:bg-gray-50 transition-colors duration-200">
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                        ${formatDate(row.date)}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 font-semibold">
                        ${row.totalAttendance.toLocaleString('vi-VN')}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        ${row.peakHour}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        ${row.popularClass}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm">
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                            parseFloat(row.participationRate) >= 70 ? 'bg-green-100 text-green-800' :
                            parseFloat(row.participationRate) >= 50 ? 'bg-yellow-100 text-yellow-800' :
                            'bg-red-100 text-red-800'
                        }">
                            ${row.participationRate}%
                        </span>
                    </td>
                </tr>
            `).join('');
        }

        // Change trend period
        function changeTrendPeriod(period) {
            // Update button states
            document.querySelectorAll('.trend-btn').forEach(btn => {
                btn.classList.remove('bg-purple-600', 'text-white');
                btn.classList.add('bg-purple-100', 'text-purple-600');
            });

            event.target.classList.remove('bg-purple-100', 'text-purple-600');
            event.target.classList.add('bg-purple-600', 'text-white');

            // Update date range based on period
            const today = new Date();
            const startDate = new Date(today);
            startDate.setDate(today.getDate() - parseInt(period));

            document.getElementById('startDate').value = startDate.toISOString().split('T')[0];
            document.getElementById('endDate').value = today.toISOString().split('T')[0];

            // Reload data
            loadAttendanceData();
        }

        // Utility functions
        function formatDate(date) {
            return date.toLocaleDateString('vi-VN', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric'
            });
        }

        function showLoading(show) {
            const elements = ['todayAttendance', 'avgDaily', 'attendanceRate'];
            elements.forEach(id => {
                const element = document.getElementById(id);
                if (show) {
                    element.innerHTML = '<div class="animate-pulse bg-gray-200 h-6 rounded"></div>';
                }
            });
        }

        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg transform transition-all duration-300 translate-x-full ${
                type === 'success' ? 'bg-green-500 text-white' :
                type === 'error' ? 'bg-red-500 text-white' :
                'bg-blue-500 text-white'
            }`;
            notification.innerHTML = `
                <div class="flex items-center">
                    <span class="mr-2">${message}</span>
                    <button onclick="this.parentElement.parentElement.remove()" class="ml-2 text-white hover:text-gray-200">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
            `;

            document.body.appendChild(notification);

            // Animate in
            setTimeout(() => {
                notification.classList.remove('translate-x-full');
            }, 10);

            // Auto remove after 5 seconds
            setTimeout(() => {
                notification.classList.add('translate-x-full');
                setTimeout(() => {
                    if (notification.parentElement) {
                        notification.remove();
                    }
                }, 300);
            }, 5000);
        }
    </script>
}
