@model GymManagement.Web.Data.Models.Booking
@{
    ViewData["Title"] = "ƒê·∫∑t l·ªãch m·ªõi";
    Layout = User.IsInRole("Admin") ? "_Layout" : "_MemberLayout";
}

<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- Header -->
    <div class="mb-8">
        <div class="flex items-center gap-4 mb-4">
            <a href="@(User.IsInRole("Admin") ? Url.Action("Index") : Url.Action("MyBookings"))" class="text-gray-600 hover:text-gray-800">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
            </a>
            <h1 class="text-3xl font-bold text-gray-900">üìÖ ƒê·∫∑t l·ªãch m·ªõi</h1>
        </div>
        <p class="text-gray-600">ƒê·∫∑t l·ªãch tham gia l·ªõp h·ªçc</p>
    </div>

    <div class="max-w-4xl mx-auto">
        <form asp-action="Create" method="post" class="bg-white rounded-lg shadow-md p-6">
            <div asp-validation-summary="ModelOnly" class="text-red-600 mb-4"></div>

            <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                <!-- Left Column -->
                <div class="space-y-6">
                    <!-- Member Selection (Admin only) -->
                    @if (User.IsInRole("Admin") && ViewBag.Members != null)
                    {
                        <div>
                            <label asp-for="ThanhVienId" class="block text-sm font-medium text-gray-700 mb-2">
                                Th√†nh vi√™n
                            </label>
                            <div class="relative">
                                <div class="relative">
                                    <input type="text" id="memberSearch" placeholder="üîç T√¨m ki·∫øm th√†nh vi√™n..."
                                           class="w-full pl-10 pr-4 py-3 border-2 border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 bg-white shadow-sm"
                                           autocomplete="off">
                                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                        <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                                        </svg>
                                    </div>
                                    <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                                        <svg class="h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                                        </svg>
                                    </div>
                                </div>
                                <div id="memberDropdown" class="absolute z-20 w-full mt-1 bg-white border border-gray-200 rounded-lg shadow-xl max-h-64 overflow-y-auto hidden">
                                    <div class="sticky top-0 px-4 py-3 bg-gradient-to-r from-blue-50 to-indigo-50 border-b border-gray-200">
                                        <div class="flex items-center">
                                            <svg class="h-4 w-4 text-blue-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                                            </svg>
                                            <span class="text-sm font-medium text-gray-700">Ch·ªçn th√†nh vi√™n ho·∫∑c kh√°ch v√£ng lai</span>
                                        </div>
                                    </div>
                                    <div class="py-1">
                                        @foreach (var member in ViewBag.Members as SelectList)
                                        {
                                            <div class="member-option group px-4 py-3 hover:bg-gradient-to-r hover:from-blue-50 hover:to-indigo-50 cursor-pointer transition-all duration-150 border-b border-gray-50 last:border-b-0"
                                                 data-value="@member.Value" data-text="@member.Text">
                                                <div class="flex items-center">
                                                    <div class="flex-shrink-0 w-8 h-8 bg-gradient-to-br from-blue-400 to-indigo-500 rounded-full flex items-center justify-center text-white text-sm font-semibold mr-3">
                                                        @{
                                                            var nameParts = member.Text.Split(' ');
                                                            var initials = nameParts.Length >= 2 ? nameParts[0].Substring(0, 1) + nameParts[nameParts.Length - 1].Substring(0, 1) : member.Text.Substring(0, Math.Min(2, member.Text.Length));
                                                        }
                                                        @initials.ToUpper()
                                                    </div>
                                                    <div class="flex-1 min-w-0">
                                                        <p class="text-sm font-medium text-gray-900 group-hover:text-blue-700 transition-colors">
                                                            @member.Text
                                                        </p>
                                                    </div>
                                                    <div class="flex-shrink-0">
                                                        <svg class="h-4 w-4 text-gray-400 group-hover:text-blue-500 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                                                        </svg>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                                <input type="hidden" asp-for="ThanhVienId" id="selectedMemberId">
                            </div>
                            <span asp-validation-for="ThanhVienId" class="text-red-500 text-sm"></span>
                            <p class="text-xs text-gray-500 mt-1">ƒê·ªÉ tr·ªëng ƒë·ªÉ ƒë·∫∑t l·ªãch cho ch√≠nh b·∫°n</p>
                        </div>
                    }

                    <!-- Class Selection -->
                    <div>
                        <label asp-for="LopHocId" class="block text-sm font-medium text-gray-700 mb-2">
                            L·ªõp h·ªçc <span class="text-red-500">*</span>
                        </label>
                        <div class="relative">
                            <div class="relative">
                                <input type="text" id="classSearch" placeholder="üîç T√¨m ki·∫øm l·ªõp h·ªçc..."
                                       class="w-full pl-10 pr-4 py-3 border-2 border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 bg-white shadow-sm"
                                       autocomplete="off" required>
                                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                    <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                                    </svg>
                                </div>
                                <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                                    <svg class="h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                                    </svg>
                                </div>
                            </div>
                            <div id="classDropdown" class="absolute z-20 w-full mt-1 bg-white border border-gray-200 rounded-lg shadow-xl max-h-64 overflow-y-auto hidden">
                                <div class="sticky top-0 px-4 py-3 bg-gradient-to-r from-green-50 to-emerald-50 border-b border-gray-200">
                                    <div class="flex items-center">
                                        <svg class="h-4 w-4 text-green-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                                        </svg>
                                        <span class="text-sm font-medium text-gray-700">Ch·ªçn l·ªõp h·ªçc ƒë·ªÉ ƒë·∫∑t l·ªãch</span>
                                    </div>
                                </div>
                                <div class="py-1">
                                    @foreach (var lopHoc in ViewBag.Classes as SelectList)
                                    {
                                        <div class="class-option group px-4 py-3 hover:bg-gradient-to-r hover:from-green-50 hover:to-emerald-50 cursor-pointer transition-all duration-150 border-b border-gray-50 last:border-b-0"
                                             data-value="@lopHoc.Value" data-text="@lopHoc.Text">
                                            <div class="flex items-center">
                                                <div class="flex-shrink-0 w-8 h-8 bg-gradient-to-br from-green-400 to-emerald-500 rounded-full flex items-center justify-center text-white text-sm font-semibold mr-3">
                                                    üèÉ
                                                </div>
                                                <div class="flex-1 min-w-0">
                                                    <p class="text-sm font-medium text-gray-900 group-hover:text-green-700 transition-colors">
                                                        @lopHoc.Text
                                                    </p>
                                                </div>
                                                <div class="flex-shrink-0">
                                                    <svg class="h-4 w-4 text-gray-400 group-hover:text-green-500 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                                                    </svg>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                            <input type="hidden" asp-for="LopHocId" id="selectedClassId">
                        </div>
                        <span asp-validation-for="LopHocId" class="text-red-500 text-sm"></span>
                    </div>

                    <!-- Date Selection -->
                    <div>
                        <label asp-for="Ngay" class="block text-sm font-medium text-gray-700 mb-2">
                            <div class="flex items-center">
                                <span>Ng√†y tham gia <span class="text-red-500">*</span></span>
                                <div class="relative ml-2 group">
                                    <svg class="w-4 h-4 text-gray-400 cursor-help" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                    </svg>
                                    <div class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 bg-gray-800 text-white text-xs rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none whitespace-nowrap z-30">
                                        <div class="text-center">
                                            <p class="font-semibold">Ng√†y c·ª• th·ªÉ b·∫°n mu·ªën tham gia l·ªõp h·ªçc</p>
                                            <p class="mt-1">Kh√¥ng ph·∫£i ng√†y ƒëƒÉng k√Ω hay ng√†y hi·ªán t·∫°i</p>
                                        </div>
                                        <div class="absolute top-full left-1/2 transform -translate-x-1/2 border-4 border-transparent border-t-gray-800"></div>
                                    </div>
                                </div>
                            </div>
                        </label>
                        <input asp-for="Ngay" type="date"
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                               min="@DateTime.Today.ToString("yyyy-MM-dd")"
                               onchange="checkAvailability()">
                        <span asp-validation-for="Ngay" class="text-red-500 text-sm"></span>
                        <p class="text-xs text-gray-500 mt-1">
                            <svg class="w-3 h-3 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                            </svg>
                            Ch·ªçn ng√†y c·ª• th·ªÉ b·∫°n mu·ªën tham gia l·ªõp h·ªçc n√†y
                        </p>
                    </div>

                    <!-- Notes -->
                    <div>
                        <label asp-for="GhiChu" class="block text-sm font-medium text-gray-700 mb-2">
                            Ghi ch√∫
                        </label>
                        <textarea asp-for="GhiChu" rows="3"
                                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                  placeholder="Nh·∫≠p ghi ch√∫ n·∫øu c√≥..."></textarea>
                        <span asp-validation-for="GhiChu" class="text-red-500 text-sm"></span>
                        <p class="text-xs text-gray-500 mt-1">T·ªëi ƒëa 500 k√Ω t·ª±</p>
                    </div>
                </div>

                <!-- Right Column -->
                <div class="space-y-6">
                    <!-- Class Information -->
                    <div id="classInfo" class="bg-gray-50 rounded-lg p-6">
                        <h3 class="text-lg font-semibold text-gray-900 mb-4">‚ÑπÔ∏è Th√¥ng tin l·ªõp h·ªçc</h3>
                        <div id="classInfoContent" class="text-gray-600">
                            <p>Vui l√≤ng ch·ªçn l·ªõp h·ªçc ƒë·ªÉ xem th√¥ng tin chi ti·∫øt</p>
                        </div>
                    </div>

                    <!-- Availability Check -->
                    <div id="availabilityCheck" class="bg-blue-50 rounded-lg p-6 hidden">
                        <h3 class="text-lg font-semibold text-gray-900 mb-4">üìä Ki·ªÉm tra t√¨nh tr·∫°ng</h3>
                        <div id="availabilityContent">
                            <!-- Availability info will be loaded here -->
                        </div>
                    </div>

                    <!-- Booking Rules -->
                    <div class="bg-yellow-50 border-l-4 border-yellow-400 p-4">
                        <div class="flex">
                            <svg class="w-5 h-5 text-yellow-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
                            </svg>
                            <div>
                                <h4 class="font-medium text-yellow-800">Quy ƒë·ªãnh ƒë·∫∑t l·ªãch</h4>
                                <ul class="text-sm text-yellow-700 mt-2 space-y-1">
                                    <li>‚Ä¢ Ch·ªâ c√≥ th·ªÉ ƒë·∫∑t l·ªãch cho c√°c ng√†y trong t∆∞∆°ng lai</li>
                                    <li>‚Ä¢ M·ªói th√†nh vi√™n ch·ªâ ƒë∆∞·ª£c ƒë·∫∑t 1 l·ªãch cho 1 l·ªõp trong 1 ng√†y</li>
                                    <li>‚Ä¢ C√≥ th·ªÉ h·ªßy ƒë·∫∑t l·ªãch tr∆∞·ªõc 2 gi·ªù so v·ªõi gi·ªù h·ªçc</li>
                                    <li>‚Ä¢ V·∫Øng m·∫∑t kh√¥ng b√°o tr∆∞·ªõc s·∫Ω b·ªã tr·ª´ ƒëi·ªÉm uy t√≠n</li>
                                </ul>
                            </div>
                        </div>
                    </div>

                    <!-- Quick Actions -->
                    <div class="bg-white border border-gray-200 rounded-lg p-4">
                        <h4 class="font-medium text-gray-900 mb-3">üîó H√†nh ƒë·ªông nhanh</h4>
                        <div class="space-y-2">
                            <a href="@Url.Action("Calendar")" class="block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-md transition-colors">
                                üìÖ Xem l·ªãch t·ªïng quan
                            </a>
                            <a href="@Url.Action("MyBookings")" class="block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-md transition-colors">
                                üìã ƒê·∫∑t l·ªãch c·ªßa t√¥i
                            </a>
                            <a href="@Url.Action("PublicClasses", "LopHoc")" class="block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-md transition-colors">
                                üéì Xem t·∫•t c·∫£ l·ªõp h·ªçc
                            </a>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="flex gap-4 mt-8 pt-6 border-t border-gray-200">
                <button type="submit" id="submitBtn" class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-md font-medium transition-colors" disabled>
                    ‚úÖ X√°c nh·∫≠n ƒë·∫∑t l·ªãch
                </button>
                <a href="@(User.IsInRole("Admin") ? Url.Action("Index") : Url.Action("MyBookings"))" class="bg-gray-300 hover:bg-gray-400 text-gray-700 px-6 py-2 rounded-md font-medium transition-colors">
                    ‚ùå H·ªßy b·ªè
                </a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        let selectedClass = null;
        let selectedDate = null;

        document.addEventListener('DOMContentLoaded', function() {
            // Set minimum date to today
            const dateInput = document.getElementById('Ngay');
            const today = new Date().toISOString().split('T')[0];
            dateInput.setAttribute('min', today);
            
            // Enable submit button only when class and date are selected
            updateSubmitButton();
        });

        async function loadClassInfo(classId) {
            selectedClass = classId;
            const classInfoContent = document.getElementById('classInfoContent');

            if (!classId) {
                classInfoContent.innerHTML = '<p class="text-gray-500 text-center py-4">Vui l√≤ng ch·ªçn l·ªõp h·ªçc ƒë·ªÉ xem th√¥ng tin chi ti·∫øt</p>';
                updateSubmitButton();
                return;
            }

            // Show loading state
            classInfoContent.innerHTML = `
                <div class="flex items-center justify-center py-4">
                    <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-500 mr-3"></div>
                    <span class="text-gray-600">ƒêang t·∫£i th√¥ng tin l·ªõp h·ªçc...</span>
                </div>
            `;

            try {
                // Call real API to get class info
                const response = await fetch('/LopHoc/GetActiveClasses');
                const classes = await response.json();

                // Find the selected class
                const classInfo = classes.find(c => c.id == classId);

                if (classInfo) {
                    classInfoContent.innerHTML = `
                        <div class="space-y-4">
                            <div class="grid grid-cols-2 gap-4">
                                <div class="bg-white p-3 rounded-lg border border-gray-200">
                                    <div class="flex items-center">
                                        <div class="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center mr-3">
                                            <svg class="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 20l4-16m2 16l4-16M6 9h14M4 15h14"></path>
                                            </svg>
                                        </div>
                                        <div>
                                            <p class="text-xs text-gray-500">ID l·ªõp</p>
                                            <p class="font-semibold text-gray-900">#${classInfo.id}</p>
                                        </div>
                                    </div>
                                </div>

                                <div class="bg-white p-3 rounded-lg border border-gray-200">
                                    <div class="flex items-center">
                                        <div class="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center mr-3">
                                            <svg class="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                            </svg>
                                        </div>
                                        <div>
                                            <p class="text-xs text-gray-500">Th·ªùi gian</p>
                                            <p class="font-semibold text-gray-900">${classInfo.text.split(' - ')[1] || 'Ch∆∞a x√°c ƒë·ªãnh'}</p>
                                        </div>
                                    </div>
                                </div>

                                <div class="bg-white p-3 rounded-lg border border-gray-200">
                                    <div class="flex items-center">
                                        <div class="w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center mr-3">
                                            <svg class="w-4 h-4 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                                            </svg>
                                        </div>
                                        <div>
                                            <p class="text-xs text-gray-500">Hu·∫•n luy·ªán vi√™n</p>
                                            <p class="font-semibold text-gray-900">${classInfo.trainer}</p>
                                        </div>
                                    </div>
                                </div>

                                <div class="bg-white p-3 rounded-lg border border-gray-200">
                                    <div class="flex items-center">
                                        <div class="w-8 h-8 bg-orange-100 rounded-full flex items-center justify-center mr-3">
                                            <svg class="w-4 h-4 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                                            </svg>
                                        </div>
                                        <div>
                                            <p class="text-xs text-gray-500">S·ª©c ch·ª©a</p>
                                            <p class="font-semibold text-gray-900">${classInfo.registered}/${classInfo.capacity}</p>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="mt-4 p-4 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg border border-blue-200">
                                <div class="flex items-start">
                                    <svg class="w-5 h-5 text-blue-500 mr-2 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                    </svg>
                                    <div>
                                        <p class="text-sm font-medium text-blue-800">Th√¥ng tin b·ªï sung</p>
                                        <p class="text-sm text-blue-700 mt-1">
                                            C√≤n <strong>${classInfo.available}</strong> ch·ªó tr·ªëng.
                                            ${classInfo.price ? `Gi√°: <strong>${classInfo.price.toLocaleString()} VNƒê</strong>` : ''}
                                        </p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
                } else {
                    classInfoContent.innerHTML = `
                        <div class="text-center py-4">
                            <svg class="w-12 h-12 text-gray-400 mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
                            </svg>
                            <p class="text-gray-500">Kh√¥ng t√¨m th·∫•y th√¥ng tin l·ªõp h·ªçc</p>
                        </div>
                    `;
                }
            } catch (error) {
                console.error('Error loading class info:', error);
                classInfoContent.innerHTML = `
                    <div class="text-center py-4">
                        <svg class="w-12 h-12 text-red-400 mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        <p class="text-red-500">C√≥ l·ªói khi t·∫£i th√¥ng tin l·ªõp h·ªçc</p>
                    </div>
                `;
            }

            updateSubmitButton();
            checkAvailability();
        }

        function checkAvailability() {
            const classId = document.getElementById('LopHocId').value;
            const date = document.getElementById('Ngay').value;
            
            selectedDate = date;
            
            if (!classId || !date) {
                document.getElementById('availabilityCheck').classList.add('hidden');
                updateSubmitButton();
                return;
            }
            
            const availabilityCheck = document.getElementById('availabilityCheck');
            const availabilityContent = document.getElementById('availabilityContent');
            
            availabilityCheck.classList.remove('hidden');
            availabilityContent.innerHTML = '<p>ƒêang ki·ªÉm tra t√¨nh tr·∫°ng...</p>';
            
            // Simulate API call to check availability
            setTimeout(() => {
                const isAvailable = Math.random() > 0.3; // 70% chance available
                const bookedSlots = Math.floor(Math.random() * 15) + 5;
                const totalSlots = 20;
                const availableSlots = totalSlots - bookedSlots;
                
                if (isAvailable && availableSlots > 0) {
                    availabilityContent.innerHTML = `
                        <div class="space-y-3">
                            <div class="flex items-center text-green-600">
                                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                                <span class="font-medium">C√≥ th·ªÉ ƒë·∫∑t l·ªãch</span>
                            </div>
                            <div class="text-sm text-gray-600">
                                <p>C√≤n <strong>${availableSlots}</strong> ch·ªó tr·ªëng (${bookedSlots}/${totalSlots} ƒë√£ ƒë·∫∑t)</p>
                                <p>Ng√†y: <strong>${new Date(date).toLocaleDateString('vi-VN')}</strong></p>
                            </div>
                            <div class="w-full bg-gray-200 rounded-full h-2">
                                <div class="bg-green-500 h-2 rounded-full" style="width: ${(availableSlots/totalSlots)*100}%"></div>
                            </div>
                        </div>
                    `;
                } else {
                    availabilityContent.innerHTML = `
                        <div class="space-y-3">
                            <div class="flex items-center text-red-600">
                                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                </svg>
                                <span class="font-medium">Kh√¥ng th·ªÉ ƒë·∫∑t l·ªãch</span>
                            </div>
                            <div class="text-sm text-gray-600">
                                <p>L·ªõp h·ªçc ƒë√£ ƒë·∫ßy (${totalSlots}/${totalSlots} ƒë√£ ƒë·∫∑t)</p>
                                <p>Ng√†y: <strong>${new Date(date).toLocaleDateString('vi-VN')}</strong></p>
                            </div>
                            <div class="w-full bg-gray-200 rounded-full h-2">
                                <div class="bg-red-500 h-2 rounded-full" style="width: 100%"></div>
                            </div>
                        </div>
                    `;
                }
                
                updateSubmitButton();
            }, 1000);
        }

        function updateSubmitButton() {
            const submitBtn = document.getElementById('submitBtn');
            const classId = document.getElementById('selectedClassId').value;
            const date = document.getElementById('Ngay').value;

            if (classId && date) {
                submitBtn.disabled = false;
                submitBtn.classList.remove('opacity-50', 'cursor-not-allowed');
            } else {
                submitBtn.disabled = true;
                submitBtn.classList.add('opacity-50', 'cursor-not-allowed');
            }
        }

        // Searchable dropdown functionality
        function initSearchableDropdowns() {
            // Member search dropdown
            const memberSearch = document.getElementById('memberSearch');
            const memberDropdown = document.getElementById('memberDropdown');
            const memberOptions = document.querySelectorAll('.member-option');
            const selectedMemberId = document.getElementById('selectedMemberId');

            if (memberSearch) {
                memberSearch.addEventListener('focus', () => {
                    memberDropdown.classList.remove('hidden');
                });

                memberSearch.addEventListener('input', (e) => {
                    const searchTerm = e.target.value.toLowerCase();
                    memberOptions.forEach(option => {
                        const text = (option.dataset.text || option.textContent).toLowerCase();
                        if (text.includes(searchTerm)) {
                            option.style.display = 'block';
                        } else {
                            option.style.display = 'none';
                        }
                    });
                });

                memberOptions.forEach(option => {
                    option.addEventListener('click', () => {
                        console.log('Member clicked:', option.dataset.text, option.dataset.value);
                        memberSearch.value = option.dataset.text;
                        selectedMemberId.value = option.dataset.value;
                        memberDropdown.classList.add('hidden');
                    });
                });
            }

            // Class search dropdown
            const classSearch = document.getElementById('classSearch');
            const classDropdown = document.getElementById('classDropdown');
            const classOptions = document.querySelectorAll('.class-option');
            const selectedClassId = document.getElementById('selectedClassId');

            classSearch.addEventListener('focus', () => {
                classDropdown.classList.remove('hidden');
            });

            classSearch.addEventListener('input', (e) => {
                const searchTerm = e.target.value.toLowerCase();
                classOptions.forEach(option => {
                    const text = (option.dataset.text || option.textContent).toLowerCase();
                    if (text.includes(searchTerm)) {
                        option.style.display = 'block';
                    } else {
                        option.style.display = 'none';
                    }
                });
            });

            classOptions.forEach(option => {
                option.addEventListener('click', () => {
                    console.log('Class clicked:', option.dataset.text, option.dataset.value);
                    classSearch.value = option.dataset.text;
                    selectedClassId.value = option.dataset.value;
                    classDropdown.classList.add('hidden');

                    // Load class info when class is selected
                    loadClassInfo(option.dataset.value);
                    updateSubmitButton();
                });
            });

            // Close dropdowns when clicking outside
            document.addEventListener('click', (e) => {
                // Check if click is outside member dropdown
                if (memberSearch && memberDropdown) {
                    const memberContainer = memberSearch.closest('.relative');
                    if (memberContainer && !memberContainer.contains(e.target)) {
                        memberDropdown.classList.add('hidden');
                    }
                }

                // Check if click is outside class dropdown
                const classContainer = classSearch.closest('.relative');
                if (classContainer && !classContainer.contains(e.target)) {
                    classDropdown.classList.add('hidden');
                }
            });
        }

        // Add event listeners
        document.addEventListener('DOMContentLoaded', function() {
            initSearchableDropdowns();
            updateSubmitButton();

            // Fallback: Add direct onclick handlers if event listeners fail
            setTimeout(() => {
                const memberOptions = document.querySelectorAll('.member-option');
                const classOptions = document.querySelectorAll('.class-option');

                memberOptions.forEach(option => {
                    if (!option.onclick) {
                        option.onclick = function(e) {
                            e.preventDefault();
                            e.stopPropagation();
                            console.log('Fallback member click:', this.dataset.text);
                            document.getElementById('memberSearch').value = this.dataset.text || this.textContent.trim();
                            document.getElementById('selectedMemberId').value = this.dataset.value;
                            document.getElementById('memberDropdown').classList.add('hidden');
                        };
                    }
                });

                classOptions.forEach(option => {
                    if (!option.onclick) {
                        option.onclick = function(e) {
                            e.preventDefault();
                            e.stopPropagation();
                            console.log('Fallback class click:', this.dataset.text);
                            document.getElementById('classSearch').value = this.dataset.text || this.textContent.trim();
                            document.getElementById('selectedClassId').value = this.dataset.value;
                            document.getElementById('classDropdown').classList.add('hidden');
                            loadClassInfo(this.dataset.value);
                            updateSubmitButton();
                        };
                    }
                });
            }, 100);
        });

        document.getElementById('Ngay').addEventListener('change', function() {
            checkAvailability();
        });
    </script>
}
