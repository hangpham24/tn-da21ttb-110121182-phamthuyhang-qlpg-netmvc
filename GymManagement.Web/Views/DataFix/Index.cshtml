@model dynamic
@{
    ViewData["Title"] = "Data Fix - S·ª≠a D·ªØ Li·ªáu";
}

<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header pb-0">
                    <div class="d-lg-flex">
                        <div>
                            <h5 class="mb-0">üîß Data Fix - S·ª≠a D·ªØ Li·ªáu H·ªá Th·ªëng</h5>
                            <p class="text-sm mb-0">
                                C√¥ng c·ª• ƒë·ªÉ s·ª≠a ch·ªØa v√† t·∫°o d·ªØ li·ªáu thi·∫øu trong h·ªá th·ªëng
                            </p>
                        </div>
                    </div>
                </div>
                <div class="card-body px-0 pb-0">
                    
                    <!-- Current Status -->
                    <div class="row px-4 mb-4">
                        <div class="col-md-6">
                            <div class="card bg-gradient-primary">
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-8">
                                            <div class="numbers">
                                                <p class="text-white text-sm mb-0 text-capitalize font-weight-bold">ƒêƒÉng K√Ω</p>
                                                <h5 class="text-white font-weight-bolder mb-0">
                                                    @Model.DangKy.Total t·ªïng
                                                </h5>
                                                <p class="text-white text-sm mb-0">
                                                    @Model.DangKy.WithFee c√≥ ph√≠ (@(((decimal)Model.DangKy.TotalFeeAmount).ToString("N0")) VND)
                                                </p>
                                                <p class="text-white text-sm mb-0">
                                                    <strong>@Model.DangKy.WithoutPayment ch∆∞a c√≥ thanh to√°n</strong>
                                                </p>
                                            </div>
                                        </div>
                                        <div class="col-4 text-end">
                                            <div class="icon icon-shape bg-white shadow text-center border-radius-md">
                                                <i class="ni ni-money-coins text-lg opacity-10" aria-hidden="true"></i>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-md-6">
                            <div class="card bg-gradient-success">
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-8">
                                            <div class="numbers">
                                                <p class="text-white text-sm mb-0 text-capitalize font-weight-bold">Thanh To√°n</p>
                                                <h5 class="text-white font-weight-bolder mb-0">
                                                    @Model.ThanhToan.Total t·ªïng
                                                </h5>
                                                <p class="text-white text-sm mb-0">
                                                    @Model.ThanhToan.Success th√†nh c√¥ng (@(((decimal)Model.ThanhToan.SuccessAmount).ToString("N0")) VND)
                                                </p>
                                                <p class="text-white text-sm mb-0">
                                                    T·ªïng: @(((decimal)Model.ThanhToan.TotalAmount).ToString("N0")) VND
                                                </p>
                                            </div>
                                        </div>
                                        <div class="col-4 text-end">
                                            <div class="icon icon-shape bg-white shadow text-center border-radius-md">
                                                <i class="ni ni-world text-lg opacity-10" aria-hidden="true"></i>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Actions -->
                    <div class="row px-4 mb-4">
                        <div class="col-12">
                            <div class="card">
                                <div class="card-header">
                                    <h6>üõ†Ô∏è H√†nh ƒê·ªông S·ª≠a Ch·ªØa</h6>
                                </div>
                                <div class="card-body">
                                    @if (Model.DangKy.WithoutPayment > 0)
                                    {
                                        <div class="alert alert-warning">
                                            <strong>‚ö†Ô∏è Ph√°t hi·ªán v·∫•n ƒë·ªÅ:</strong> 
                                            C√≥ @Model.DangKy.WithoutPayment ƒëƒÉng k√Ω c√≥ ph√≠ nh∆∞ng ch∆∞a c√≥ b·∫£n ghi thanh to√°n.
                                            ƒêi·ªÅu n√†y khi·∫øn b√°o c√°o doanh thu hi·ªÉn th·ªã kh√¥ng ch√≠nh x√°c.
                                        </div>
                                        
                                        <button id="createMissingPaymentsBtn" class="btn btn-primary">
                                            üí∞ T·∫°o B·∫£n Ghi Thanh To√°n Thi·∫øu
                                        </button>
                                    }
                                    else
                                    {
                                        <div class="alert alert-success">
                                            <strong>‚úÖ D·ªØ li·ªáu ·ªïn ƒë·ªãnh:</strong> 
                                            T·∫•t c·∫£ ƒëƒÉng k√Ω c√≥ ph√≠ ƒë·ªÅu ƒë√£ c√≥ b·∫£n ghi thanh to√°n t∆∞∆°ng ·ª©ng.
                                        </div>
                                    }
                                    
                                    <button id="refreshStatusBtn" class="btn btn-secondary ms-2">
                                        üîÑ L√†m M·ªõi Tr·∫°ng Th√°i
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Log Area -->
                    <div class="row px-4">
                        <div class="col-12">
                            <div class="card">
                                <div class="card-header">
                                    <h6>üìã Nh·∫≠t K√Ω Ho·∫°t ƒê·ªông</h6>
                                </div>
                                <div class="card-body">
                                    <div id="logArea" class="bg-dark text-white p-3 rounded" style="height: 200px; overflow-y: auto; font-family: monospace;">
                                        <div class="text-success">üü¢ H·ªá th·ªëng s·∫µn s√†ng...</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function addLog(message, type = 'info') {
            const logArea = document.getElementById('logArea');
            const timestamp = new Date().toLocaleTimeString();
            const colorClass = type === 'success' ? 'text-success' : 
                              type === 'error' ? 'text-danger' : 
                              type === 'warning' ? 'text-warning' : 'text-info';
            
            logArea.innerHTML += `<div class="${colorClass}">[${timestamp}] ${message}</div>`;
            logArea.scrollTop = logArea.scrollHeight;
        }

        document.getElementById('createMissingPaymentsBtn')?.addEventListener('click', async function() {
            const btn = this;
            btn.disabled = true;
            btn.innerHTML = '‚è≥ ƒêang x·ª≠ l√Ω...';
            
            addLog('üîß B·∫Øt ƒë·∫ßu t·∫°o b·∫£n ghi thanh to√°n thi·∫øu...', 'info');
            
            try {
                const response = await fetch('/DataFix/CreateMissingPayments', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                    }
                });
                
                const result = await response.json();
                
                if (result.success) {
                    addLog(result.message, 'success');
                    setTimeout(() => location.reload(), 2000);
                } else {
                    addLog(result.message, 'error');
                }
            } catch (error) {
                addLog(`‚ùå L·ªói k·∫øt n·ªëi: ${error.message}`, 'error');
            } finally {
                btn.disabled = false;
                btn.innerHTML = 'üí∞ T·∫°o B·∫£n Ghi Thanh To√°n Thi·∫øu';
            }
        });

        document.getElementById('refreshStatusBtn').addEventListener('click', function() {
            addLog('üîÑ L√†m m·ªõi trang...', 'info');
            location.reload();
        });
    </script>
}
