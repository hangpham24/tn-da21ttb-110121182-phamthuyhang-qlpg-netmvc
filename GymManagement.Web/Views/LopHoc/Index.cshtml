@model IEnumerable<GymManagement.Web.Data.Models.LopHoc>
@{
    ViewData["Title"] = "Quản lý lớp học";
    Layout = "_Layout";
}

<div class="min-h-screen bg-gray-50">
    <!-- Header Section -->
    <div class="bg-white border-b border-gray-200 shadow-sm">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between py-6 space-y-4 sm:space-y-0">
                <div class="flex items-center space-x-4">
                    <div class="flex-shrink-0">
                        <div class="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                            <svg class="w-7 h-7 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                            </svg>
                        </div>
                    </div>
                    <div>
                        <h1 class="text-2xl font-bold text-gray-900">Quản lý lớp học</h1>
                        <p class="text-sm text-gray-600">Quản lý và theo dõi tất cả lớp học trong hệ thống</p>
                    </div>
                </div>
                @if (User.IsInRole("Admin"))
                {
                    <div class="flex items-center space-x-3">
                        <a href="@Url.Action("Create", "LopHoc")" class="inline-flex items-center px-4 py-2 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                            </svg>
                            Thêm lớp học mới
                        </a>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Content Section -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        @Html.AntiForgeryToken()

        <!-- Success/Error Messages -->
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="bg-green-50 border border-green-200 rounded-md p-4 mb-6">
                <div class="flex">
                    <div class="flex-shrink-0">
                        <svg class="h-5 w-5 text-green-400" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                        </svg>
                    </div>
                    <div class="ml-3">
                        <p class="text-sm font-medium text-green-800">@TempData["SuccessMessage"]</p>
                    </div>
                </div>
            </div>
        }

        @if (TempData["ErrorMessage"] != null)
        {
            <div class="bg-red-50 border border-red-200 rounded-md p-4 mb-6">
                <div class="flex">
                    <div class="flex-shrink-0">
                        <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                        </svg>
                    </div>
                    <div class="ml-3">
                        <p class="text-sm font-medium text-red-800">@TempData["ErrorMessage"]</p>
                    </div>
                </div>
            </div>
        }

        <!-- Filters - Following GoiTap Pattern -->
        <div class="bg-white rounded-lg shadow-md p-6 mb-6">
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                <div>
                    <label for="searchInput" class="block text-sm font-medium text-gray-700 mb-2">Tìm kiếm</label>
                    <input type="text" id="searchInput" placeholder="Nhập tên lớp học..."
                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                </div>
                <div>
                    <label for="statusFilter" class="block text-sm font-medium text-gray-700 mb-2">Trạng thái</label>
                    <select id="statusFilter" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        <option value="">Tất cả</option>
                        <option value="OPEN">Hoạt động</option>
                        <option value="CLOSED">Tạm dừng</option>
                        <option value="CANCELLED">Đã hủy</option>
                        <option value="FULL">Đã đầy</option>
                    </select>
                </div>
                <div>
                    <label for="trainerFilter" class="block text-sm font-medium text-gray-700 mb-2">Huấn luyện viên</label>
                    <select id="trainerFilter" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        <option value="">Tất cả HLV</option>
                        @if (Model != null)
                        {
                            @foreach (var trainer in Model.Where(c => c.Hlv != null).Select(c => c.Hlv).Distinct())
                            {
                                <option value="@trainer.Ho @trainer.Ten">@trainer.Ho @trainer.Ten</option>
                            }
                        }
                    </select>
                </div>
                <div>
                    <label for="dayFilter" class="block text-sm font-medium text-gray-700 mb-2">Ngày học</label>
                    <select id="dayFilter" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        <option value="">Tất cả ngày</option>
                        <option value="Thứ 2">Thứ 2</option>
                        <option value="Thứ 3">Thứ 3</option>
                        <option value="Thứ 4">Thứ 4</option>
                        <option value="Thứ 5">Thứ 5</option>
                        <option value="Thứ 6">Thứ 6</option>
                        <option value="Thứ 7">Thứ 7</option>
                        <option value="Chủ nhật">Chủ nhật</option>
                    </select>
                </div>
            </div>
        </div>

    @if (Model != null && Model.Any())
    {
        <!-- Classes Table -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
            <!-- Table Header -->
            <div class="bg-gray-50 px-6 py-4 border-b border-gray-200">
                <div class="flex items-center justify-between">
                    <h3 class="text-lg font-medium text-gray-900">
                        Danh sách lớp học
                        <span class="ml-2 text-sm font-normal text-gray-500">(@ViewBag.TotalItems lớp học)</span>
                    </h3>
                    <div class="flex items-center space-x-2">
                    </div>
                </div>
            </div>

            <!-- Table Content -->
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200" id="classesTable">
                    <thead class="bg-gray-50">
                        <tr>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Lớp học
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Thời gian
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Huấn luyện viên
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Sức chứa
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Trạng thái
                            </th>
                            <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Thao tác
                            </th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        @foreach (var lopHoc in Model)
                        {
                            <tr class="hover:bg-gray-50 transition-colors duration-200 class-row"
                                data-name="@lopHoc.TenLop.ToLower()"
                                data-status="@lopHoc.TrangThai"
                                data-trainer="@(lopHoc.Hlv != null ? lopHoc.Hlv.Ho + " " + lopHoc.Hlv.Ten : "")"
                                data-day="@lopHoc.ThuTrongTuan">

                                <!-- Class Info -->
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="flex items-center">
                                        <div class="flex-shrink-0 h-10 w-10">
                                            <div class="h-10 w-10 rounded-lg bg-blue-100 flex items-center justify-center">
                                                <svg class="h-6 w-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                                                </svg>
                                            </div>
                                        </div>
                                        <div class="ml-4">
                                            <div class="text-sm font-medium text-gray-900">@lopHoc.TenLop</div>
                                            <div class="text-sm text-gray-500">@lopHoc.ThuTrongTuan</div>
                                            @if (!string.IsNullOrEmpty(lopHoc.MoTa))
                                            {
                                                <div class="text-xs text-gray-400 mt-1 max-w-xs truncate">@lopHoc.MoTa</div>
                                            }
                                        </div>
                                    </div>
                                </td>

                                <!-- Time -->
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-sm text-gray-900">@lopHoc.GioBatDau.ToString("HH:mm") - @lopHoc.GioKetThuc.ToString("HH:mm")</div>
                                    @if (lopHoc.ThoiLuong.HasValue)
                                    {
                                        <div class="text-sm text-gray-500">@lopHoc.ThoiLuong phút</div>
                                    }
                                </td>

                                <!-- Trainer -->
                                <td class="px-6 py-4 whitespace-nowrap">
                                    @if (lopHoc.Hlv != null)
                                    {
                                        <div class="flex items-center">
                                            <div class="flex-shrink-0 h-8 w-8">
                                                <div class="h-8 w-8 rounded-full bg-gray-200 flex items-center justify-center">
                                                    <svg class="h-4 w-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                                                    </svg>
                                                </div>
                                            </div>
                                            <div class="ml-3">
                                                <div class="text-sm font-medium text-gray-900">@lopHoc.Hlv.Ho @lopHoc.Hlv.Ten</div>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-orange-100 text-orange-800">
                                            Chưa phân công
                                        </span>
                                    }
                                </td>

                                <!-- Capacity -->
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="flex items-center">
                                        <div class="text-sm text-gray-900">
                                            @{
                                                var bookingCounts = ViewBag.BookingCounts as Dictionary<int, int>;
                                                var bookingCount = bookingCounts?.ContainsKey(lopHoc.LopHocId) == true ? bookingCounts[lopHoc.LopHocId] : 0;
                                                var capacityPercentage = lopHoc.SucChua > 0 ? (bookingCount * 100 / lopHoc.SucChua) : 0;
                                                var capacityColor = capacityPercentage >= 90 ? "bg-red-500" : capacityPercentage >= 70 ? "bg-yellow-500" : "bg-green-500";
                                            }
                                            <span class="font-medium">@bookingCount/@lopHoc.SucChua</span>
                                        </div>
                                        <div class="ml-2 w-16 bg-gray-200 rounded-full h-2">
                                            <div class="@capacityColor h-2 rounded-full" style="width: @(capacityPercentage)%"></div>
                                        </div>
                                    </div>
                                    @if (lopHoc.GiaTuyChinh.HasValue)
                                    {
                                        <div class="text-xs text-green-600 font-medium">@lopHoc.GiaTuyChinh.Value.ToString("N0") VNĐ</div>
                                    }
                                </td>

                                <!-- Status -->
                                <td class="px-6 py-4 whitespace-nowrap">
                                    @{
                                        var (statusClass, statusText) = lopHoc.TrangThai switch
                                        {
                                            "OPEN" => ("bg-green-100 text-green-800", "Hoạt động"),
                                            "CLOSED" => ("bg-yellow-100 text-yellow-800", "Tạm dừng"),
                                            "CANCELLED" => ("bg-red-100 text-red-800", "Đã hủy"),
                                            "FULL" => ("bg-blue-100 text-blue-800", "Đã đầy"),
                                            _ => ("bg-gray-100 text-gray-800", lopHoc.TrangThai)
                                        };
                                    }
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @statusClass">
                                        @statusText
                                    </span>
                                </td>

                                <!-- Actions -->
                                <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                    <div class="flex items-center justify-end space-x-2">
                                        <a href="@Url.Action("Details", new { id = lopHoc.LopHocId })"
                                           class="text-blue-600 hover:text-blue-900 transition-colors duration-200"
                                           title="Xem chi tiết">
                                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                                            </svg>
                                        </a>
                                        @if (User.IsInRole("Admin"))
                                        {
                                            <a href="@Url.Action("Edit", new { id = lopHoc.LopHocId })"
                                               class="text-indigo-600 hover:text-indigo-900 transition-colors duration-200"
                                               title="Chỉnh sửa">
                                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                                </svg>
                                            </a>
                                            <button onclick="deleteClass(@lopHoc.LopHocId, '@lopHoc.TenLop')"
                                                    class="text-red-600 hover:text-red-900 transition-colors duration-200"
                                                    title="Xóa lớp học">
                                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                                </svg>
                                            </button>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            @if (ViewBag.TotalPages > 1)
            {
                <div class="bg-white px-4 py-3 border-t border-gray-200 sm:px-6">
                    <div class="flex items-center justify-between">
                        <div class="flex-1 flex justify-between sm:hidden">
                            @if (ViewBag.HasPreviousPage)
                            {
                                <a href="@Url.Action("Index", new { page = ViewBag.CurrentPage - 1 })"
                                   class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                                    Trước
                                </a>
                            }
                            else
                            {
                                <span class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-400 bg-gray-100 cursor-not-allowed">
                                    Trước
                                </span>
                            }
                            @if (ViewBag.HasNextPage)
                            {
                                <a href="@Url.Action("Index", new { page = ViewBag.CurrentPage + 1 })"
                                   class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                                    Sau
                                </a>
                            }
                            else
                            {
                                <span class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-400 bg-gray-100 cursor-not-allowed">
                                    Sau
                                </span>
                            }
                        </div>
                        <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                            <div>
                                <p class="text-sm text-gray-700">
                                    Hiển thị
                                    <span class="font-medium">@((ViewBag.CurrentPage - 1) * ViewBag.PageSize + 1)</span>
                                    đến
                                    <span class="font-medium">@Math.Min(ViewBag.CurrentPage * ViewBag.PageSize, ViewBag.TotalItems)</span>
                                    trong tổng số
                                    <span class="font-medium">@ViewBag.TotalItems</span>
                                    kết quả
                                </p>
                            </div>
                            <div>
                                <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                                    @if (ViewBag.HasPreviousPage)
                                    {
                                        <a href="@Url.Action("Index", "LopHoc", new { page = ViewBag.CurrentPage - 1 })"
                                           class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                                            <span class="sr-only">Trang trước</span>
                                            <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                                                <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                                            </svg>
                                        </a>
                                    }
                                    else
                                    {
                                        <span class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-gray-100 text-sm font-medium text-gray-400 cursor-not-allowed">
                                            <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                                                <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                                            </svg>
                                        </span>
                                    }

                                    @for (int i = Math.Max(1, ViewBag.CurrentPage - 2); i <= Math.Min(ViewBag.TotalPages, ViewBag.CurrentPage + 2); i++)
                                    {
                                        if (i == ViewBag.CurrentPage)
                                        {
                                            <span class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-blue-50 text-sm font-medium text-blue-600">
                                                @i
                                            </span>
                                        }
                                        else
                                        {
                                            <a href="@Url.Action("Index", "LopHoc", new { page = i })"
                                               class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50">
                                                @i
                                            </a>
                                        }
                                    }

                                    @if (ViewBag.HasNextPage)
                                    {
                                        <a href="@Url.Action("Index", "LopHoc", new { page = ViewBag.CurrentPage + 1 })"
                                           class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                                            <span class="sr-only">Trang sau</span>
                                            <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                                                <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                                            </svg>
                                        </a>
                                    }
                                    else
                                    {
                                        <span class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-gray-100 text-sm font-medium text-gray-400 cursor-not-allowed">
                                            <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                                                <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                                            </svg>
                                        </span>
                                    }
                                </nav>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>


    }
    else
    {
        <!-- Empty State -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-12 text-center">
            <div class="max-w-md mx-auto">
                <svg class="w-20 h-20 mx-auto mb-6 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                </svg>
                <h3 class="text-xl font-semibold text-gray-900 mb-3">Chưa có lớp học nào</h3>
                <p class="text-gray-600 mb-6">Hệ thống chưa có lớp học nào. Hãy tạo lớp học đầu tiên để bắt đầu quản lý các hoạt động tập luyện.</p>
                @if (User.IsInRole("Admin"))
                {
                    <a href="@Url.Action("Create", "LopHoc")" class="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-lg text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200">
                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                        </svg>
                        Tạo lớp học đầu tiên
                    </a>
                }
            </div>
        </div>
    }

    <!-- No Results State (Hidden by default) -->
    <div id="noResultsState" class="bg-white rounded-lg shadow-sm border border-gray-200 p-12 text-center hidden">
        <div class="max-w-md mx-auto">
            <svg class="w-16 h-16 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
            <h3 class="text-lg font-semibold text-gray-900 mb-2">Không tìm thấy kết quả</h3>
            <p class="text-gray-600 mb-4">Không có lớp học nào phù hợp với tiêu chí tìm kiếm của bạn.</p>
            <button id="clearFiltersFromNoResults" class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
                Xóa bộ lọc
            </button>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Search and filter functionality
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize filter listeners
            document.getElementById('searchInput').addEventListener('input', filterClasses);
            document.getElementById('statusFilter').addEventListener('change', filterClasses);
            document.getElementById('trainerFilter').addEventListener('change', filterClasses);
            document.getElementById('dayFilter').addEventListener('change', filterClasses);

            // Clear filters button
            const clearFiltersBtn = document.getElementById('clearFiltersFromNoResults');
            if (clearFiltersBtn) {
                clearFiltersBtn.addEventListener('click', clearFilters);
            }
        });

        function filterClasses() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const status = document.getElementById('statusFilter').value;
            const trainer = document.getElementById('trainerFilter').value;
            const day = document.getElementById('dayFilter').value;

            const classRows = document.querySelectorAll('.class-row');
            let visibleCount = 0;

            classRows.forEach(row => {
                const name = row.getAttribute('data-name') || '';
                const rowStatus = row.getAttribute('data-status') || '';
                const rowTrainer = row.getAttribute('data-trainer') || '';
                const rowDay = row.getAttribute('data-day') || '';

                let show = true;

                // Search filter
                if (searchTerm && !name.includes(searchTerm)) {
                    show = false;
                }

                // Status filter
                if (status && rowStatus !== status) {
                    show = false;
                }

                // Trainer filter
                if (trainer && rowTrainer !== trainer) {
                    show = false;
                }

                // Day filter
                if (day && !rowDay.includes(day)) {
                    show = false;
                }

                row.style.display = show ? '' : 'none';
                if (show) visibleCount++;
            });

            // Show/hide no results message
            const table = document.getElementById('classesTable');
            const noResultsState = document.getElementById('noResultsState');
            
            if (table && noResultsState) {
                if (visibleCount === 0 && classRows.length > 0) {
                    table.closest('.bg-white').style.display = 'none';
                    noResultsState.classList.remove('hidden');
                } else {
                    table.closest('.bg-white').style.display = '';
                    noResultsState.classList.add('hidden');
                }
            }
        }

        function clearFilters() {
            document.getElementById('searchInput').value = '';
            document.getElementById('statusFilter').value = '';
            document.getElementById('trainerFilter').value = '';
            document.getElementById('dayFilter').value = '';
            filterClasses();
        }

        // Delete class function
        function deleteClass(classId, className) {
            // Show confirmation dialog
            if (!confirm(`Bạn có chắc chắn muốn xóa lớp học "${className}"?\n\nThao tác này không thể hoàn tác.`)) {
                return;
            }

            // Get anti-forgery token
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            // Show loading state
            const deleteBtn = event.target.closest('button');
            const originalContent = deleteBtn.innerHTML;
            deleteBtn.disabled = true;
            deleteBtn.innerHTML = '<svg class="animate-spin h-4 w-4 text-red-600" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>';

            // Send delete request
            fetch(`/LopHoc/DeleteConfirmed`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': token
                },
                body: `id=${classId}`
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    // Show success message
                    showNotification('success', data.message);
                    
                    // Remove the row with animation
                    const row = deleteBtn.closest('tr');
                    row.style.transition = 'opacity 0.3s ease-out';
                    row.style.opacity = '0';
                    
                    setTimeout(() => {
                        row.remove();
                        // Check if table is empty
                        const remainingRows = document.querySelectorAll('.class-row');
                        if (remainingRows.length === 0) {
                            location.reload();
                        }
                    }, 300);
                } else {
                    showNotification('error', data.message || 'Không thể xóa lớp học.');
                    // Restore button
                    deleteBtn.disabled = false;
                    deleteBtn.innerHTML = originalContent;
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showNotification('error', 'Có lỗi xảy ra khi xóa lớp học. Vui lòng thử lại sau.');
                // Restore button
                deleteBtn.disabled = false;
                deleteBtn.innerHTML = originalContent;
            });
        }

        // Show notification function
        function showNotification(type, message) {
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `fixed top-4 right-4 p-4 rounded-lg shadow-lg transform transition-all duration-300 translate-x-full z-50`;
            
            if (type === 'success') {
                notification.classList.add('bg-green-50', 'border', 'border-green-200');
                notification.innerHTML = `
                    <div class="flex items-center">
                        <svg class="h-5 w-5 text-green-400 mr-3" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                        </svg>
                        <p class="text-sm font-medium text-green-800">${message}</p>
                    </div>
                `;
            } else {
                notification.classList.add('bg-red-50', 'border', 'border-red-200');
                notification.innerHTML = `
                    <div class="flex items-center">
                        <svg class="h-5 w-5 text-red-400 mr-3" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                        </svg>
                        <p class="text-sm font-medium text-red-800">${message}</p>
                    </div>
                `;
            }

            // Add to page
            document.body.appendChild(notification);

            // Animate in
            setTimeout(() => {
                notification.classList.remove('translate-x-full');
                notification.classList.add('translate-x-0');
            }, 100);

            // Remove after 5 seconds
            setTimeout(() => {
                notification.classList.add('translate-x-full');
                notification.classList.remove('translate-x-0');
                setTimeout(() => {
                    notification.remove();
                }, 300);
            }, 5000);
        }
    </script>
}
