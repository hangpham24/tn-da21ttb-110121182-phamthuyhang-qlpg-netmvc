@{
    ViewData["Title"] = "L·ªãch s·ª≠ kh√°ch v√£ng lai";
    Layout = "_Layout";
}

<div class="space-y-6">
    <!-- Header -->
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <div class="flex items-center justify-between">
            <div>
                <h1 class="text-2xl font-bold text-gray-900">üìã L·ªãch s·ª≠ kh√°ch v√£ng lai</h1>
                <p class="text-gray-600 mt-1">Xem l·∫°i c√°c giao d·ªãch v√† phi√™n t·∫≠p c·ªßa kh√°ch v√£ng lai</p>
            </div>
            <div class="flex space-x-3">
                <a asp-controller="WalkIn" asp-action="Dashboard" 
                   class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors">
                    üìä Dashboard
                </a>
                <a asp-controller="Reception" asp-action="Station" 
                   class="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition-colors">
                    üëÅÔ∏è Reception Station
                </a>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <h3 class="text-lg font-semibold text-gray-900 mb-4">üîç B·ªô l·ªçc</h3>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">T·ª´ ng√†y</label>
                <input type="date" id="startDate" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">ƒê·∫øn ng√†y</label>
                <input type="date" id="endDate" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
            </div>
            <div class="flex items-end">
                <button onclick="applyFilters()" 
                        class="w-full bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors">
                    √Åp d·ª•ng
                </button>
            </div>
        </div>
    </div>

    <!-- Summary Stats -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-6" id="summaryStats">
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <div class="text-center">
                <p class="text-2xl font-bold text-blue-600" id="totalSessions">-</p>
                <p class="text-sm text-gray-600">T·ªïng phi√™n t·∫≠p</p>
            </div>
        </div>
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <div class="text-center">
                <p class="text-2xl font-bold text-green-600" id="totalRevenue">-</p>
                <p class="text-sm text-gray-600">T·ªïng doanh thu</p>
            </div>
        </div>
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <div class="text-center">
                <p class="text-2xl font-bold text-purple-600" id="uniqueGuests">-</p>
                <p class="text-sm text-gray-600">Kh√°ch duy nh·∫•t</p>
            </div>
        </div>
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <div class="text-center">
                <p class="text-2xl font-bold text-orange-600" id="averageValue">-</p>
                <p class="text-sm text-gray-600">Gi√° tr·ªã trung b√¨nh</p>
            </div>
        </div>
    </div>

    <!-- Transaction History Table -->
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <div class="flex items-center justify-between mb-4">
            <h3 class="text-lg font-semibold text-gray-900">üìù L·ªãch s·ª≠ giao d·ªãch</h3>
            <button onclick="exportToExcel()" 
                    class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors">
                üìä Xu·∫•t Excel
            </button>
        </div>
        
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Kh√°ch h√†ng
                        </th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            G√≥i v√©
                        </th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Check-in
                        </th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Check-out
                        </th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Th·ªùi gian t·∫≠p
                        </th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Tr·∫°ng th√°i
                        </th>
                    </tr>
                </thead>
                <tbody id="historyTableBody" class="bg-white divide-y divide-gray-200">
                    <tr>
                        <td colspan="6" class="px-6 py-12 text-center text-gray-500">
                            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
                            <p class="mt-2">ƒêang t·∫£i d·ªØ li·ªáu...</p>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>

        <!-- Pagination -->
        <div class="flex items-center justify-between mt-6">
            <div class="text-sm text-gray-700">
                Hi·ªÉn th·ªã <span id="showingFrom">0</span> ƒë·∫øn <span id="showingTo">0</span> trong t·ªïng s·ªë <span id="totalRecords">0</span> b·∫£n ghi
            </div>
            <div class="flex space-x-2" id="paginationControls">
                <!-- Pagination buttons will be inserted here -->
            </div>
        </div>
    </div>
</div>

<script>
let currentPage = 1;
let totalPages = 1;
let currentFilters = {};

document.addEventListener('DOMContentLoaded', function() {
    // Set default dates (last 30 days)
    const today = new Date();
    const thirtyDaysAgo = new Date(today.getTime() - (30 * 24 * 60 * 60 * 1000));
    
    document.getElementById('endDate').value = today.toISOString().split('T')[0];
    document.getElementById('startDate').value = thirtyDaysAgo.toISOString().split('T')[0];
    
    loadHistoryData();
});

async function loadHistoryData(page = 1) {
    try {
        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;
        
        const params = new URLSearchParams({
            page: page,
            pageSize: 20
        });
        
        if (startDate) params.append('startDate', startDate);
        if (endDate) params.append('endDate', endDate);
        
        const response = await fetch(`/WalkIn/GetTransactionHistory?${params}`);
        const result = await response.json();
        
        if (result.success) {
            renderHistoryTable(result.data);
            updatePagination(result.pagination);
            await loadSummaryStats();
        }
    } catch (error) {
        console.error('Error loading history data:', error);
        showError('C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu');
    }
}

async function loadSummaryStats() {
    try {
        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;
        
        const params = new URLSearchParams();
        if (startDate) params.append('startDate', startDate);
        if (endDate) params.append('endDate', endDate);
        
        const response = await fetch(`/BaoCao/GetWalkInStats?${params}`);
        const result = await response.json();
        
        if (result.success) {
            const stats = result.data;
            document.getElementById('totalSessions').textContent = stats.totalSessions;
            document.getElementById('totalRevenue').textContent = formatCurrency(stats.totalRevenue);
            document.getElementById('uniqueGuests').textContent = stats.uniqueGuests;
            document.getElementById('averageValue').textContent = formatCurrency(stats.averageSessionValue);
        }
    } catch (error) {
        console.error('Error loading summary stats:', error);
    }
}

function renderHistoryTable(data) {
    const tbody = document.getElementById('historyTableBody');
    
    if (data.length === 0) {
        tbody.innerHTML = `
            <tr>
                <td colspan="6" class="px-6 py-12 text-center text-gray-500">
                    <svg class="w-12 h-12 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                    </svg>
                    <p>Kh√¥ng c√≥ d·ªØ li·ªáu trong kho·∫£ng th·ªùi gian n√†y</p>
                </td>
            </tr>
        `;
        return;
    }
    
    const html = data.map(session => `
        <tr class="hover:bg-gray-50">
            <td class="px-6 py-4 whitespace-nowrap">
                <div>
                    <div class="text-sm font-medium text-gray-900">${session.guestName}</div>
                    <div class="text-sm text-gray-500">${session.phoneNumber || 'Kh√¥ng c√≥ SƒêT'}</div>
                </div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                    ${session.packageName}
                </span>
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                ${session.checkInTime}
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                ${session.checkOutTime || '-'}
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                ${session.duration || '-'}
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                    session.status === 'Completed' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'
                }">
                    ${session.status === 'Completed' ? '‚úÖ Ho√†n th√†nh' : 'üü° ƒêang t·∫≠p'}
                </span>
            </td>
        </tr>
    `).join('');
    
    tbody.innerHTML = html;
}

function updatePagination(pagination) {
    currentPage = pagination.currentPage;
    totalPages = pagination.totalPages;
    
    // Update showing info
    const showingFrom = (pagination.currentPage - 1) * pagination.pageSize + 1;
    const showingTo = Math.min(pagination.currentPage * pagination.pageSize, pagination.totalCount);
    
    document.getElementById('showingFrom').textContent = showingFrom;
    document.getElementById('showingTo').textContent = showingTo;
    document.getElementById('totalRecords').textContent = pagination.totalCount;
    
    // Update pagination controls
    const controls = document.getElementById('paginationControls');
    let html = '';
    
    // Previous button
    if (pagination.currentPage > 1) {
        html += `<button onclick="loadHistoryData(${pagination.currentPage - 1})" class="px-3 py-2 text-sm bg-white border border-gray-300 rounded-lg hover:bg-gray-50">Tr∆∞·ªõc</button>`;
    }
    
    // Page numbers
    for (let i = Math.max(1, pagination.currentPage - 2); i <= Math.min(pagination.totalPages, pagination.currentPage + 2); i++) {
        const isActive = i === pagination.currentPage;
        html += `<button onclick="loadHistoryData(${i})" class="px-3 py-2 text-sm ${isActive ? 'bg-blue-600 text-white' : 'bg-white text-gray-700 hover:bg-gray-50'} border border-gray-300 rounded-lg">${i}</button>`;
    }
    
    // Next button
    if (pagination.currentPage < pagination.totalPages) {
        html += `<button onclick="loadHistoryData(${pagination.currentPage + 1})" class="px-3 py-2 text-sm bg-white border border-gray-300 rounded-lg hover:bg-gray-50">Sau</button>`;
    }
    
    controls.innerHTML = html;
}

function applyFilters() {
    currentPage = 1;
    loadHistoryData();
}

function exportToExcel() {
    // This would typically call a server endpoint to generate Excel file
    alert('T√≠nh nƒÉng xu·∫•t Excel s·∫Ω ƒë∆∞·ª£c tri·ªÉn khai trong phi√™n b·∫£n ti·∫øp theo');
}

function formatCurrency(amount) {
    return new Intl.NumberFormat('vi-VN', {
        style: 'currency',
        currency: 'VND'
    }).format(amount);
}

function showError(message) {
    // Simple error display - could be enhanced with a proper toast system
    alert(message);
}
</script>
