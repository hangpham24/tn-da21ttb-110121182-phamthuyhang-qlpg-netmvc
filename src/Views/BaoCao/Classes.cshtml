@{
    ViewData["Title"] = "B√°o C√°o L·ªõp H·ªçc - Admin";
    Layout = "_Layout";
}

<div class="min-h-screen bg-gradient-to-br from-gray-50 via-orange-50 to-red-50">
    <div class="container mx-auto px-4 py-8">
        <!-- Breadcrumb -->
        <nav class="flex mb-6" aria-label="Breadcrumb">
            <ol class="inline-flex items-center space-x-1 md:space-x-3">
                <li class="inline-flex items-center">
                    <a href="@Url.Action("Index", "BaoCao")" class="inline-flex items-center text-sm font-medium text-gray-700 hover:text-orange-600">
                        <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"></path>
                        </svg>
                        Dashboard
                    </a>
                </li>
                <li>
                    <div class="flex items-center">
                        <svg class="w-6 h-6 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                        </svg>
                        <span class="ml-1 text-sm font-medium text-gray-500 md:ml-2">B√°o c√°o l·ªõp h·ªçc</span>
                    </div>
                </li>
            </ol>
        </nav>

        <!-- Header Section -->
        <div class="mb-8">
            <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between">
                <div class="mb-4 lg:mb-0">
                    <h1 class="text-4xl font-bold bg-gradient-to-r from-orange-600 to-red-600 bg-clip-text text-transparent mb-2">
                        üèãÔ∏è B√°o C√°o L·ªõp H·ªçc
                    </h1>
                    <p class="text-gray-600 text-lg">T·ª∑ l·ªá l·∫•p ƒë·∫ßy v√† hi·ªáu qu·∫£ c·ªßa c√°c l·ªõp h·ªçc</p>
                </div>
                
                <!-- Filter Controls -->
                <div class="flex space-x-3">
                    <select id="trainerFilter" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent">
                        <option value="">T·∫•t c·∫£ HLV</option>
                        <option value="hlv-mai">HLV Mai</option>
                        <option value="hlv-nam">HLV Nam</option>
                        <option value="hlv-linh">HLV Linh</option>
                    </select>
                    <button id="refreshBtn" class="bg-orange-600 hover:bg-orange-700 text-white px-6 py-2 rounded-lg font-medium transition-all duration-300 transform hover:scale-105">
                        <svg class="w-5 h-5 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                        </svg>
                        L√†m m·ªõi
                    </button>
                </div>
            </div>
        </div>

        <!-- Summary Cards -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <!-- Total Classes -->
            <div class="bg-white rounded-2xl shadow-lg p-6 border border-gray-100 hover:shadow-xl transition-all duration-300">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-gray-600 mb-1">T·ªïng s·ªë l·ªõp h·ªçc</p>
                        <p id="totalClasses" class="text-3xl font-bold text-orange-600">0</p>
                        <p class="text-xs text-gray-500 mt-1">ƒêang ho·∫°t ƒë·ªông</p>
                    </div>
                    <div class="w-12 h-12 bg-orange-100 rounded-full flex items-center justify-center">
                        <svg class="w-6 h-6 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                        </svg>
                    </div>
                </div>
            </div>

            <!-- Average Occupancy -->
            <div class="bg-white rounded-2xl shadow-lg p-6 border border-gray-100 hover:shadow-xl transition-all duration-300">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-gray-600 mb-1">T·ª∑ l·ªá l·∫•p ƒë·∫ßy TB</p>
                        <p id="avgOccupancy" class="text-3xl font-bold text-blue-600">0%</p>
                        <p class="text-xs text-gray-500 mt-1">
                            <span id="occupancyChange" class="text-blue-500">+0%</span> so v·ªõi tu·∫ßn tr∆∞·ªõc
                        </p>
                    </div>
                    <div class="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center">
                        <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2-2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                        </svg>
                    </div>
                </div>
            </div>

            <!-- Most Popular Class -->
            <div class="bg-white rounded-2xl shadow-lg p-6 border border-gray-100 hover:shadow-xl transition-all duration-300">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-gray-600 mb-1">L·ªõp ph·ªï bi·∫øn nh·∫•t</p>
                        <p id="popularClassName" class="text-3xl font-bold text-purple-600">Yoga</p>
                        <p id="popularClassRate" class="text-xs text-gray-500 mt-1">95% l·∫•p ƒë·∫ßy</p>
                    </div>
                    <div class="w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center">
                        <svg class="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"></path>
                        </svg>
                    </div>
                </div>
            </div>

            <!-- Total Capacity -->
            <div class="bg-white rounded-2xl shadow-lg p-6 border border-gray-100 hover:shadow-xl transition-all duration-300">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-gray-600 mb-1">T·ªïng s·ª©c ch·ª©a</p>
                        <p id="totalCapacity" class="text-3xl font-bold text-green-600">0</p>
                        <p class="text-xs text-gray-500 mt-1">Ng∆∞·ªùi/tu·∫ßn</p>
                    </div>
                    <div class="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center">
                        <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                        </svg>
                    </div>
                </div>
            </div>
        </div>

        <!-- Charts Section -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
            <!-- Occupancy Rate Chart -->
            <div class="bg-white rounded-2xl shadow-lg p-6 border border-gray-100">
                <div class="flex items-center justify-between mb-6">
                    <h3 class="text-xl font-bold text-gray-900">üìä T·ª∑ l·ªá l·∫•p ƒë·∫ßy theo l·ªõp</h3>
                    <div class="flex space-x-2">
                        <button class="view-btn px-3 py-1 text-xs bg-orange-600 text-white rounded-full" data-view="bar">C·ªôt</button>
                        <button class="view-btn px-3 py-1 text-xs bg-orange-100 text-orange-600 rounded-full hover:bg-orange-200 transition-colors" data-view="doughnut">Tr√≤n</button>
                    </div>
                </div>
                <div class="h-80">
                    <canvas id="occupancyChart"></canvas>
                </div>
            </div>

            <!-- Weekly Schedule Heatmap -->
            <div class="bg-white rounded-2xl shadow-lg p-6 border border-gray-100">
                <div class="flex items-center justify-between mb-6">
                    <h3 class="text-xl font-bold text-gray-900">üóìÔ∏è L·ªãch h·ªçc trong tu·∫ßn</h3>
                    <div class="text-sm text-gray-500">M·ª©c ƒë·ªô l·∫•p ƒë·∫ßy</div>
                </div>
                <div class="h-80">
                    <canvas id="scheduleHeatmap"></canvas>
                </div>
            </div>
        </div>

        <!-- Class Performance Table -->
        <div class="bg-white rounded-2xl shadow-lg border border-gray-100 mb-8">
            <div class="p-6 border-b border-gray-200">
                <h3 class="text-xl font-bold text-gray-900 flex items-center">
                    <svg class="w-5 h-5 mr-2 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2m0 10a2 2 0 002 2h2a2 2 0 002-2M9 7a2 2 0 012-2h2a2 2 0 012 2m0 10V7m0 10a2 2 0 002 2h2a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2h2a2 2 0 002-2z"></path>
                    </svg>
                    Hi·ªáu qu·∫£ c√°c l·ªõp h·ªçc
                </h3>
            </div>
            
            <div class="overflow-x-auto">
                <table class="w-full">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">L·ªõp h·ªçc</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">HLV</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">S·ª©c ch·ª©a</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ƒê√£ ƒëƒÉng k√Ω</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">T·ª∑ l·ªá l·∫•p ƒë·∫ßy</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ƒêi·ªÉm ƒë√°nh gi√°</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tr·∫°ng th√°i</th>
                        </tr>
                    </thead>
                    <tbody id="classTableBody" class="bg-white divide-y divide-gray-200">
                        <!-- Table rows will be populated by JavaScript -->
                        <tr>
                            <td colspan="7" class="px-6 py-8 text-center text-gray-500">
                                <div class="flex items-center justify-center">
                                    <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-orange-600 mr-2"></div>
                                    ƒêang t·∫£i d·ªØ li·ªáu...
                                </div>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Trainer Performance -->
        <div class="bg-white rounded-2xl shadow-lg border border-gray-100">
            <div class="p-6 border-b border-gray-200">
                <h3 class="text-xl font-bold text-gray-900 flex items-center">
                    <svg class="w-5 h-5 mr-2 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                    </svg>
                    Hi·ªáu qu·∫£ HLV
                </h3>
            </div>
            
            <div class="p-6">
                <div id="trainerPerformance" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    <!-- Trainer cards will be populated by JavaScript -->
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>
        // Global variables
        let occupancyChart, scheduleHeatmap;
        let currentChartType = 'bar';

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            initializeCharts();
            loadClassData();

            // Event listeners
            document.getElementById('refreshBtn').addEventListener('click', loadClassData);
            document.getElementById('trainerFilter').addEventListener('change', loadClassData);

            // Chart view buttons
            document.querySelectorAll('.view-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    changeChartView(this.dataset.view);
                });
            });
        });

        // Load class data
        function loadClassData() {
            const trainerFilter = document.getElementById('trainerFilter').value;

            showLoading(true);

            fetch(`@Url.Action("GetClassData", "BaoCao")?trainer=${trainerFilter}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        updateSummaryCards(data);
                        updateOccupancyChart(data.classByOccupancy);
                        updateScheduleHeatmap();
                        updateClassTable(data.classDetails);
                        updateTrainerPerformance();
                    } else {
                        showNotification('C√≥ l·ªói khi t·∫£i d·ªØ li·ªáu l·ªõp h·ªçc', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error loading class data:', error);
                    showNotification('C√≥ l·ªói khi t·∫£i d·ªØ li·ªáu l·ªõp h·ªçc', 'error');
                })
                .finally(() => {
                    showLoading(false);
                });
        }

        // Update summary cards
        function updateSummaryCards(data) {
            // Generate mock summary data
            const totalClasses = 25;
            const avgOccupancy = (Math.random() * 20 + 70).toFixed(1); // 70-90%
            const occupancyChange = Math.floor(Math.random() * 10) - 2; // -2% to +8%
            const totalCapacity = totalClasses * 30; // Assuming 30 people per class average

            document.getElementById('totalClasses').textContent = totalClasses.toLocaleString('vi-VN');
            document.getElementById('avgOccupancy').textContent = avgOccupancy + '%';
            document.getElementById('totalCapacity').textContent = totalCapacity.toLocaleString('vi-VN');

            // Update occupancy change
            const changeElement = document.getElementById('occupancyChange');
            changeElement.textContent = (occupancyChange >= 0 ? '+' : '') + occupancyChange + '%';
            changeElement.className = occupancyChange >= 0 ? 'text-green-500' : 'text-red-500';

            // Update popular class
            const popularClasses = ['Yoga Bu·ªïi S√°ng', 'Cardio Bu·ªïi T·ªëi', 'Pilates N√¢ng Cao', 'Zumba Dance'];
            const popularClass = popularClasses[Math.floor(Math.random() * popularClasses.length)];
            const popularRate = (Math.random() * 10 + 85).toFixed(0); // 85-95%

            document.getElementById('popularClassName').textContent = popularClass;
            document.getElementById('popularClassRate').textContent = popularRate + '% l·∫•p ƒë·∫ßy';
        }

        // Initialize charts
        function initializeCharts() {
            initializeOccupancyChart();
            initializeScheduleHeatmap();
        }

        function initializeOccupancyChart() {
            const ctx = document.getElementById('occupancyChart').getContext('2d');

            // Generate mock class data
            const classNames = ['Yoga S√°ng', 'Cardio T·ªëi', 'Pilates', 'Zumba', 'CrossFit', 'Boxing', 'Aerobic'];
            const occupancyRates = classNames.map(() => Math.floor(Math.random() * 30) + 60); // 60-90%

            occupancyChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: classNames,
                    datasets: [{
                        label: 'T·ª∑ l·ªá l·∫•p ƒë·∫ßy (%)',
                        data: occupancyRates,
                        backgroundColor: occupancyRates.map(rate =>
                            rate >= 85 ? 'rgba(34, 197, 94, 0.8)' :
                            rate >= 70 ? 'rgba(249, 115, 22, 0.8)' :
                            'rgba(239, 68, 68, 0.8)'
                        ),
                        borderColor: occupancyRates.map(rate =>
                            rate >= 85 ? 'rgb(34, 197, 94)' :
                            rate >= 70 ? 'rgb(249, 115, 22)' :
                            'rgb(239, 68, 68)'
                        ),
                        borderWidth: 1,
                        borderRadius: 8,
                        borderSkipped: false
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            titleColor: 'white',
                            bodyColor: 'white',
                            callbacks: {
                                label: function(context) {
                                    return 'T·ª∑ l·ªá l·∫•p ƒë·∫ßy: ' + context.parsed.y + '%';
                                }
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 100,
                            ticks: {
                                callback: function(value) {
                                    return value + '%';
                                }
                            },
                            grid: {
                                color: 'rgba(0, 0, 0, 0.05)'
                            }
                        },
                        x: {
                            grid: {
                                display: false
                            }
                        }
                    }
                }
            });
        }

        function initializeScheduleHeatmap() {
            const ctx = document.getElementById('scheduleHeatmap').getContext('2d');

            // Generate mock schedule data (7 days x 16 hours)
            const days = ['Th·ª© 2', 'Th·ª© 3', 'Th·ª© 4', 'Th·ª© 5', 'Th·ª© 6', 'Th·ª© 7', 'CN'];
            const hours = [];
            const heatmapData = [];

            // Generate hours from 6 AM to 10 PM
            for (let h = 6; h <= 22; h++) {
                hours.push(h + ':00');
            }

            // Generate mock data for each day-hour combination
            days.forEach((day, dayIndex) => {
                hours.forEach((hour, hourIndex) => {
                    let occupancy = 0;

                    // Higher occupancy during peak hours (17-21) and weekdays
                    if (hourIndex >= 11 && hourIndex <= 15 && dayIndex < 5) { // 17:00-21:00 weekdays
                        occupancy = Math.floor(Math.random() * 40) + 60; // 60-100%
                    } else if (hourIndex >= 2 && hourIndex <= 5) { // 8:00-11:00
                        occupancy = Math.floor(Math.random() * 30) + 40; // 40-70%
                    } else if (dayIndex >= 5) { // Weekends
                        occupancy = Math.floor(Math.random() * 50) + 30; // 30-80%
                    } else {
                        occupancy = Math.floor(Math.random() * 30) + 10; // 10-40%
                    }

                    heatmapData.push({
                        x: hourIndex,
                        y: dayIndex,
                        v: occupancy
                    });
                });
            });

            scheduleHeatmap = new Chart(ctx, {
                type: 'scatter',
                data: {
                    datasets: [{
                        label: 'T·ª∑ l·ªá l·∫•p ƒë·∫ßy',
                        data: heatmapData,
                        backgroundColor: function(context) {
                            const value = context.parsed.v;
                            if (value >= 80) return 'rgba(239, 68, 68, 0.8)'; // Red - Very high
                            if (value >= 60) return 'rgba(249, 115, 22, 0.8)'; // Orange - High
                            if (value >= 40) return 'rgba(234, 179, 8, 0.8)'; // Yellow - Medium
                            return 'rgba(34, 197, 94, 0.8)'; // Green - Low
                        },
                        pointRadius: function(context) {
                            return Math.max(5, context.parsed.v / 5); // Size based on occupancy
                        }
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            titleColor: 'white',
                            bodyColor: 'white',
                            callbacks: {
                                title: function(context) {
                                    const point = context[0];
                                    return days[point.parsed.y] + ' - ' + hours[point.parsed.x];
                                },
                                label: function(context) {
                                    return 'T·ª∑ l·ªá l·∫•p ƒë·∫ßy: ' + context.parsed.v + '%';
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            type: 'linear',
                            position: 'bottom',
                            min: 0,
                            max: hours.length - 1,
                            ticks: {
                                stepSize: 1,
                                callback: function(value) {
                                    return hours[value] || '';
                                }
                            },
                            title: {
                                display: true,
                                text: 'Gi·ªù trong ng√†y'
                            }
                        },
                        y: {
                            type: 'linear',
                            min: 0,
                            max: days.length - 1,
                            ticks: {
                                stepSize: 1,
                                callback: function(value) {
                                    return days[value] || '';
                                }
                            },
                            title: {
                                display: true,
                                text: 'Ng√†y trong tu·∫ßn'
                            }
                        }
                    }
                }
            });
        }

        // Update charts with new data
        function updateOccupancyChart(data) {
            // Chart is already initialized with mock data
            // In a real application, you would update with actual data from the server
        }

        function updateScheduleHeatmap() {
            // Chart is already initialized with mock data
            // In a real application, you would update with actual schedule data
        }

        // Update class table
        function updateClassTable(data) {
            const tbody = document.getElementById('classTableBody');

            // Generate mock class data
            const classes = [
                {
                    name: 'Yoga Bu·ªïi S√°ng',
                    trainer: 'HLV Mai',
                    capacity: 50,
                    registered: 47,
                    rating: 4.8,
                    status: 'Ho·∫°t ƒë·ªông'
                },
                {
                    name: 'Cardio Bu·ªïi T·ªëi',
                    trainer: 'HLV Nam',
                    capacity: 40,
                    registered: 38,
                    rating: 4.6,
                    status: 'Ho·∫°t ƒë·ªông'
                },
                {
                    name: 'Pilates N√¢ng Cao',
                    trainer: 'HLV Linh',
                    capacity: 30,
                    registered: 28,
                    rating: 4.9,
                    status: 'Ho·∫°t ƒë·ªông'
                },
                {
                    name: 'Zumba Dance',
                    trainer: 'HLV H∆∞∆°ng',
                    capacity: 40,
                    registered: 35,
                    rating: 4.7,
                    status: 'Ho·∫°t ƒë·ªông'
                },
                {
                    name: 'CrossFit',
                    trainer: 'HLV Minh',
                    capacity: 25,
                    registered: 22,
                    rating: 4.5,
                    status: 'Ho·∫°t ƒë·ªông'
                },
                {
                    name: 'Boxing C∆° B·∫£n',
                    trainer: 'HLV ƒê·ª©c',
                    capacity: 20,
                    registered: 15,
                    rating: 4.3,
                    status: 'T·∫°m ng∆∞ng'
                }
            ];

            tbody.innerHTML = classes.map(cls => {
                const occupancyRate = Math.round((cls.registered / cls.capacity) * 100);
                const occupancyColor = occupancyRate >= 90 ? 'text-red-600' :
                                     occupancyRate >= 70 ? 'text-orange-600' :
                                     occupancyRate >= 50 ? 'text-yellow-600' : 'text-green-600';

                const statusColor = cls.status === 'Ho·∫°t ƒë·ªông' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800';

                return `
                    <tr class="hover:bg-gray-50 transition-colors duration-200">
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="flex items-center">
                                <div class="w-10 h-10 bg-orange-100 rounded-full flex items-center justify-center mr-3">
                                    <span class="text-orange-600 font-medium">${cls.name.charAt(0)}</span>
                                </div>
                                <div>
                                    <div class="text-sm font-medium text-gray-900">${cls.name}</div>
                                    <div class="text-sm text-gray-500">L·ªõp th∆∞·ªùng xuy√™n</div>
                                </div>
                            </div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${cls.trainer}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${cls.capacity}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 font-semibold">${cls.registered}</td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="flex items-center">
                                <div class="w-16 bg-gray-200 rounded-full h-2 mr-2">
                                    <div class="bg-orange-500 h-2 rounded-full transition-all duration-300" style="width: ${occupancyRate}%"></div>
                                </div>
                                <span class="text-sm font-medium ${occupancyColor}">${occupancyRate}%</span>
                            </div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="flex items-center">
                                <div class="flex text-yellow-400">
                                    ${Array.from({length: 5}, (_, i) =>
                                        `<svg class="w-4 h-4 ${i < Math.floor(cls.rating) ? 'fill-current' : 'text-gray-300'}" viewBox="0 0 20 20">
                                            <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"/>
                                        </svg>`
                                    ).join('')}
                                </div>
                                <span class="ml-2 text-sm text-gray-600">${cls.rating}</span>
                            </div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${statusColor}">
                                ${cls.status}
                            </span>
                        </td>
                    </tr>
                `;
            }).join('');
        }

        // Update trainer performance
        function updateTrainerPerformance() {
            const trainers = [
                {
                    name: 'HLV Mai',
                    avatar: 'M',
                    classes: 5,
                    avgOccupancy: 92,
                    rating: 4.8,
                    totalStudents: 180
                },
                {
                    name: 'HLV Nam',
                    avatar: 'N',
                    classes: 4,
                    avgOccupancy: 85,
                    rating: 4.6,
                    totalStudents: 140
                },
                {
                    name: 'HLV Linh',
                    avatar: 'L',
                    classes: 3,
                    avgOccupancy: 88,
                    rating: 4.9,
                    totalStudents: 95
                },
                {
                    name: 'HLV H∆∞∆°ng',
                    avatar: 'H',
                    classes: 3,
                    avgOccupancy: 82,
                    rating: 4.7,
                    totalStudents: 110
                },
                {
                    name: 'HLV Minh',
                    avatar: 'M',
                    classes: 2,
                    avgOccupancy: 78,
                    rating: 4.5,
                    totalStudents: 65
                },
                {
                    name: 'HLV ƒê·ª©c',
                    avatar: 'D',
                    classes: 2,
                    avgOccupancy: 65,
                    rating: 4.3,
                    totalStudents: 45
                }
            ];

            const container = document.getElementById('trainerPerformance');
            container.innerHTML = trainers.map(trainer => {
                const occupancyColor = trainer.avgOccupancy >= 85 ? 'text-green-600' :
                                      trainer.avgOccupancy >= 70 ? 'text-orange-600' : 'text-red-600';

                return `
                    <div class="bg-gray-50 rounded-xl p-6 hover:bg-gray-100 transition-colors duration-200">
                        <div class="flex items-center mb-4">
                            <div class="w-12 h-12 bg-indigo-100 rounded-full flex items-center justify-center mr-4">
                                <span class="text-indigo-600 font-bold text-lg">${trainer.avatar}</span>
                            </div>
                            <div>
                                <h4 class="text-lg font-bold text-gray-900">${trainer.name}</h4>
                                <p class="text-sm text-gray-600">${trainer.classes} l·ªõp h·ªçc</p>
                            </div>
                        </div>

                        <div class="space-y-3">
                            <div class="flex justify-between items-center">
                                <span class="text-sm text-gray-600">T·ª∑ l·ªá l·∫•p ƒë·∫ßy TB:</span>
                                <span class="text-sm font-bold ${occupancyColor}">${trainer.avgOccupancy}%</span>
                            </div>

                            <div class="flex justify-between items-center">
                                <span class="text-sm text-gray-600">ƒê√°nh gi√°:</span>
                                <div class="flex items-center">
                                    <div class="flex text-yellow-400 mr-1">
                                        ${Array.from({length: 5}, (_, i) =>
                                            `<svg class="w-3 h-3 ${i < Math.floor(trainer.rating) ? 'fill-current' : 'text-gray-300'}" viewBox="0 0 20 20">
                                                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"/>
                                            </svg>`
                                        ).join('')}
                                    </div>
                                    <span class="text-sm font-bold text-gray-900">${trainer.rating}</span>
                                </div>
                            </div>

                            <div class="flex justify-between items-center">
                                <span class="text-sm text-gray-600">T·ªïng h·ªçc vi√™n:</span>
                                <span class="text-sm font-bold text-gray-900">${trainer.totalStudents}</span>
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
        }

        // Change chart view
        function changeChartView(viewType) {
            // Update button states
            document.querySelectorAll('.view-btn').forEach(btn => {
                btn.classList.remove('bg-orange-600', 'text-white');
                btn.classList.add('bg-orange-100', 'text-orange-600');
            });

            event.target.classList.remove('bg-orange-100', 'text-orange-600');
            event.target.classList.add('bg-orange-600', 'text-white');

            // Update chart type
            currentChartType = viewType;
            occupancyChart.config.type = viewType;

            if (viewType === 'doughnut') {
                occupancyChart.data.datasets[0].backgroundColor = [
                    'rgba(34, 197, 94, 0.8)',
                    'rgba(249, 115, 22, 0.8)',
                    'rgba(239, 68, 68, 0.8)',
                    'rgba(59, 130, 246, 0.8)',
                    'rgba(147, 51, 234, 0.8)',
                    'rgba(236, 72, 153, 0.8)',
                    'rgba(14, 165, 233, 0.8)'
                ];
            } else {
                // Reset to bar chart colors based on occupancy rates
                const data = occupancyChart.data.datasets[0].data;
                occupancyChart.data.datasets[0].backgroundColor = data.map(rate =>
                    rate >= 85 ? 'rgba(34, 197, 94, 0.8)' :
                    rate >= 70 ? 'rgba(249, 115, 22, 0.8)' :
                    'rgba(239, 68, 68, 0.8)'
                );
            }

            occupancyChart.update('active');
        }

        // Utility functions
        function showLoading(show) {
            const elements = ['totalClasses', 'avgOccupancy', 'totalCapacity'];
            elements.forEach(id => {
                const element = document.getElementById(id);
                if (show) {
                    element.innerHTML = '<div class="animate-pulse bg-gray-200 h-6 rounded"></div>';
                }
            });
        }

        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg transform transition-all duration-300 translate-x-full ${
                type === 'success' ? 'bg-green-500 text-white' :
                type === 'error' ? 'bg-red-500 text-white' :
                'bg-blue-500 text-white'
            }`;
            notification.innerHTML = `
                <div class="flex items-center">
                    <span class="mr-2">${message}</span>
                    <button onclick="this.parentElement.parentElement.remove()" class="ml-2 text-white hover:text-gray-200">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
            `;

            document.body.appendChild(notification);

            // Animate in
            setTimeout(() => {
                notification.classList.remove('translate-x-full');
            }, 10);

            // Auto remove after 5 seconds
            setTimeout(() => {
                notification.classList.add('translate-x-full');
                setTimeout(() => {
                    if (notification.parentElement) {
                        notification.remove();
                    }
                }, 300);
            }, 5000);
        }
    </script>
}
