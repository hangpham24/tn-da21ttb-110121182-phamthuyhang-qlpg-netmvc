@model IEnumerable<GymManagement.Web.Data.Models.DiemDanh>
@{
    ViewData["Title"] = "B√°o c√°o ƒëi·ªÉm danh";
    Layout = "_Layout";
    var startDate = ViewBag.StartDate as DateTime? ?? DateTime.Today.AddDays(-7);
    var endDate = ViewBag.EndDate as DateTime? ?? DateTime.Today;
    var totalRecords = ViewBag.TotalRecords as int? ?? 0;
}

<div class="p-6">
    <!-- Header -->
    <div class="mb-8">
        <div class="flex items-center gap-4 mb-4">
            <a href="@Url.Action("Index")" class="text-gray-600 hover:text-gray-800">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
            </a>
            <h1 class="text-3xl font-bold text-gray-900">üìä B√°o c√°o ƒëi·ªÉm danh</h1>
        </div>
        <p class="text-gray-600">Ph√¢n t√≠ch v√† b√°o c√°o chi ti·∫øt v·ªÅ ƒëi·ªÉm danh</p>
    </div>

    <!-- Report Filters -->
    <div class="bg-white rounded-lg shadow-md p-6 mb-8">
        <form method="get" class="grid grid-cols-1 md:grid-cols-4 gap-4 items-end">
            <div>
                <label for="startDate" class="block text-sm font-medium text-gray-700 mb-2">T·ª´ ng√†y</label>
                <input type="date" id="startDate" name="startDate" value="@startDate.ToString("yyyy-MM-dd")"
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
            </div>
            <div>
                <label for="endDate" class="block text-sm font-medium text-gray-700 mb-2">ƒê·∫øn ng√†y</label>
                <input type="date" id="endDate" name="endDate" value="@endDate.ToString("yyyy-MM-dd")"
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
            </div>
            <div>
                <button type="submit" class="w-full bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md font-medium transition-colors">
                    üîç T·∫°o b√°o c√°o
                </button>
            </div>
            <div>
                <button type="button" onclick="exportReport()" class="w-full bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-md font-medium transition-colors">
                    üìä Xu·∫•t Excel
                </button>
            </div>
        </form>
    </div>

    <!-- Report Summary -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        <div class="bg-white rounded-lg shadow-md p-6">
            <div class="flex items-center">
                <div class="p-3 rounded-full bg-blue-100 text-blue-600">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v4a2 2 0 01-2 2h-2a2 2 0 00-2-2z"></path>
                    </svg>
                </div>
                <div class="ml-4">
                    <p class="text-sm font-medium text-gray-600">T·ªïng l∆∞·ª£t ƒëi·ªÉm danh</p>
                    <p class="text-2xl font-bold text-gray-900">@totalRecords</p>
                </div>
            </div>
        </div>

        <div class="bg-white rounded-lg shadow-md p-6">
            <div class="flex items-center">
                <div class="p-3 rounded-full bg-green-100 text-green-600">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                    </svg>
                </div>
                <div class="ml-4">
                    <p class="text-sm font-medium text-gray-600">Th√†nh vi√™n tham gia</p>
                    <p class="text-2xl font-bold text-gray-900">@(Model?.Select(d => d.ThanhVienId).Distinct().Count() ?? 0)</p>
                </div>
            </div>
        </div>

        <div class="bg-white rounded-lg shadow-md p-6">
            <div class="flex items-center">
                <div class="p-3 rounded-full bg-purple-100 text-purple-600">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                    </svg>
                </div>
                <div class="ml-4">
                    <p class="text-sm font-medium text-gray-600">Nh·∫≠n di·ªán th√†nh c√¥ng</p>
                    <p class="text-2xl font-bold text-gray-900">@(Model?.Count(d => d.KetQuaNhanDang == true) ?? 0)</p>
                </div>
            </div>
        </div>

        <div class="bg-white rounded-lg shadow-md p-6">
            <div class="flex items-center">
                <div class="p-3 rounded-full bg-yellow-100 text-yellow-600">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
                    </svg>
                </div>
                <div class="ml-4">
                    <p class="text-sm font-medium text-gray-600">Trung b√¨nh/ng√†y</p>
                    <p class="text-2xl font-bold text-gray-900">@(totalRecords > 0 && (endDate - startDate).Days > 0 ? Math.Round((double)totalRecords / (endDate - startDate).Days, 1) : 0)</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Charts Section -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
        <!-- Daily Attendance Chart -->
        <div class="bg-white rounded-lg shadow-md p-6">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">üìà ƒêi·ªÉm danh theo ng√†y</h3>
            <div class="h-64">
                <canvas id="dailyAttendanceChart"></canvas>
            </div>
        </div>

        <!-- Hourly Distribution Chart -->
        <div class="bg-white rounded-lg shadow-md p-6">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">üïê Ph√¢n b·ªë theo gi·ªù</h3>
            <div class="h-64">
                <canvas id="hourlyDistributionChart"></canvas>
            </div>
        </div>
    </div>

    <!-- Top Members -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
        <!-- Most Active Members -->
        <div class="bg-white rounded-lg shadow-md p-6">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">üèÜ Th√†nh vi√™n t√≠ch c·ª±c nh·∫•t</h3>
            <div class="space-y-3">
                @if (Model != null && Model.Any())
                {
                    @foreach (var member in Model.GroupBy(d => new { d.ThanhVienId, d.ThanhVien?.Ho, d.ThanhVien?.Ten })
                                                  .OrderByDescending(g => g.Count())
                                                  .Take(5))
                    {
                        <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                            <div class="flex items-center">
                                <div class="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center mr-3">
                                    <span class="text-sm font-semibold text-blue-600">
                                        @(member.Key.Ho?.FirstOrDefault() ?? 'U')
                                    </span>
                                </div>
                                <div>
                                    <p class="font-medium text-gray-900">@member.Key.Ho @member.Key.Ten</p>
                                    <p class="text-sm text-gray-500">@member.Count() l·∫ßn ƒëi·ªÉm danh</p>
                                </div>
                            </div>
                            <div class="text-right">
                                <div class="text-lg font-bold text-blue-600">@member.Count()</div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="text-center py-4 text-gray-500">
                        <p>Kh√¥ng c√≥ d·ªØ li·ªáu</p>
                    </div>
                }
            </div>
        </div>

        <!-- Recognition Success Rate -->
        <div class="bg-white rounded-lg shadow-md p-6">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">üéØ T·ª∑ l·ªá nh·∫≠n di·ªán th√†nh c√¥ng</h3>
            <div class="space-y-4">
                @{
                    var totalWithRecognition = Model?.Count(d => d.KetQuaNhanDang.HasValue) ?? 0;
                    var successfulRecognition = Model?.Count(d => d.KetQuaNhanDang == true) ?? 0;
                    var successRate = totalWithRecognition > 0 ? (double)successfulRecognition / totalWithRecognition * 100 : 0;
                }
                
                <div class="text-center">
                    <div class="text-4xl font-bold text-green-600 mb-2">@successRate.ToString("F1")%</div>
                    <p class="text-gray-600">T·ª∑ l·ªá nh·∫≠n di·ªán th√†nh c√¥ng</p>
                </div>
                
                <div class="space-y-2">
                    <div class="flex justify-between text-sm">
                        <span>Th√†nh c√¥ng</span>
                        <span>@successfulRecognition/@totalWithRecognition</span>
                    </div>
                    <div class="w-full bg-gray-200 rounded-full h-2">
                        <div class="bg-green-500 h-2 rounded-full" style="width: @successRate%"></div>
                    </div>
                </div>
                
                <div class="grid grid-cols-2 gap-4 text-sm">
                    <div class="text-center p-3 bg-green-50 rounded-lg">
                        <div class="font-bold text-green-600">@successfulRecognition</div>
                        <div class="text-gray-600">Th√†nh c√¥ng</div>
                    </div>
                    <div class="text-center p-3 bg-red-50 rounded-lg">
                        <div class="font-bold text-red-600">@(totalWithRecognition - successfulRecognition)</div>
                        <div class="text-gray-600">Th·∫•t b·∫°i</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Detailed Table -->
    @if (Model != null && Model.Any())
    {
        <div class="bg-white rounded-lg shadow-md overflow-hidden">
            <div class="px-6 py-4 border-b border-gray-200">
                <h3 class="text-lg font-semibold text-gray-900">üìã Chi ti·∫øt ƒëi·ªÉm danh</h3>
                <p class="text-sm text-gray-600">T·ª´ @startDate.ToString("dd/MM/yyyy") ƒë·∫øn @endDate.ToString("dd/MM/yyyy")</p>
            </div>
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Th√†nh vi√™n</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Ng√†y</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Gi·ªù</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">L·ªõp h·ªçc</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tr·∫°ng th√°i</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nh·∫≠n di·ªán</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        @foreach (var diemDanh in Model.OrderByDescending(d => d.ThoiGian))
                        {
                            <tr class="hover:bg-gray-50">
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="flex items-center">
                                        <div class="flex-shrink-0 h-8 w-8">
                                            <div class="h-8 w-8 rounded-full bg-blue-100 flex items-center justify-center">
                                                <span class="text-xs font-medium text-blue-600">
                                                    @(diemDanh.ThanhVien?.Ho?.FirstOrDefault() ?? 'U')
                                                </span>
                                            </div>
                                        </div>
                                        <div class="ml-3">
                                            <div class="text-sm font-medium text-gray-900">
                                                @diemDanh.ThanhVien?.Ho @diemDanh.ThanhVien?.Ten
                                            </div>
                                        </div>
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                    @diemDanh.ThoiGian.ToString("dd/MM/yyyy")
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                    @diemDanh.ThoiGian.ToString("HH:mm:ss")
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                    @if (diemDanh.LopHoc != null)
                                    {
                                        <span>@diemDanh.LopHoc.TenLop</span>
                                    }
                                    else
                                    {
                                        <span class="text-gray-400">T·ª± do</span>
                                    }
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                                        @switch (diemDanh.TrangThai)
                                        {
                                            case "Present": <text>bg-green-100 text-green-800</text>; break;
                                            case "Absent": <text>bg-red-100 text-red-800</text>; break;
                                            case "Late": <text>bg-yellow-100 text-yellow-800</text>; break;
                                            default: <text>bg-gray-100 text-gray-800</text>; break;
                                        }">
                                        @switch (diemDanh.TrangThai)
                                        {
                                            case "Present": <text>C√≥ m·∫∑t</text>; break;
                                            case "Absent": <text>V·∫Øng m·∫∑t</text>; break;
                                            case "Late": <text>ƒêi mu·ªôn</text>; break;
                                            default: <text>@diemDanh.TrangThai</text>; break;
                                        }
                                    </span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    @if (diemDanh.KetQuaNhanDang.HasValue)
                                    {
                                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full @(diemDanh.KetQuaNhanDang.Value ? "bg-blue-100 text-blue-800" : "bg-red-100 text-red-800")">
                                            @(diemDanh.KetQuaNhanDang.Value ? "‚úÖ Th√†nh c√¥ng" : "‚ùå Th·∫•t b·∫°i")
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="text-gray-400">Th·ªß c√¥ng</span>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
    else
    {
        <div class="bg-white rounded-lg shadow-md p-12 text-center">
            <svg class="w-16 h-16 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v4a2 2 0 01-2 2h-2a2 2 0 00-2-2z"></path>
            </svg>
            <h3 class="text-lg font-semibold text-gray-900 mb-2">Kh√¥ng c√≥ d·ªØ li·ªáu</h3>
            <p class="text-gray-600 mb-4">Kh√¥ng c√≥ d·ªØ li·ªáu ƒëi·ªÉm danh trong kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn.</p>
            <a href="@Url.Action("Index")" class="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
                ‚Üê Quay l·∫°i danh s√°ch
            </a>
        </div>
    }
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            createDailyAttendanceChart();
            createHourlyDistributionChart();
        });

        function createDailyAttendanceChart() {
            const ctx = document.getElementById('dailyAttendanceChart').getContext('2d');
            
            // Process data for daily attendance
            const attendanceData = @Html.Raw(Json.Serialize((Model?.GroupBy(d => d.ThoiGian.Date)
                .Select(g => new { Date = g.Key.ToString("yyyy-MM-dd"), Count = g.Count() })
                .OrderBy(x => x.Date) ?? Enumerable.Empty<object>()).ToArray()));
            
            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: attendanceData.map(d => new Date(d.Date).toLocaleDateString('vi-VN')),
                    datasets: [{
                        label: 'S·ªë l∆∞·ª£t ƒëi·ªÉm danh',
                        data: attendanceData.map(d => d.Count),
                        borderColor: 'rgb(59, 130, 246)',
                        backgroundColor: 'rgba(59, 130, 246, 0.1)',
                        tension: 0.1,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                stepSize: 1
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            display: false
                        }
                    }
                }
            });
        }

        function createHourlyDistributionChart() {
            const ctx = document.getElementById('hourlyDistributionChart').getContext('2d');
            
            // Process data for hourly distribution
            const hourlyData = @Html.Raw(Json.Serialize((Model?.GroupBy(d => d.ThoiGian.Hour)
                .Select(g => new { Hour = g.Key, Count = g.Count() })
                .OrderBy(x => x.Hour) ?? Enumerable.Empty<object>()).ToArray()));
            
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: hourlyData.map(d => d.Hour + ':00'),
                    datasets: [{
                        label: 'S·ªë l∆∞·ª£t ƒëi·ªÉm danh',
                        data: hourlyData.map(d => d.Count),
                        backgroundColor: 'rgba(34, 197, 94, 0.8)',
                        borderColor: 'rgb(34, 197, 94)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                stepSize: 1
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            display: false
                        }
                    }
                }
            });
        }

        function exportReport() {
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;
            
            window.location.href = `@Url.Action("ExportAttendance")?startDate=${startDate}&endDate=${endDate}&format=csv`;
        }
    </script>
}
