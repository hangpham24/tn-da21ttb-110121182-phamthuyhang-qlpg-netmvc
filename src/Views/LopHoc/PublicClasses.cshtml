@model IEnumerable<GymManagement.Web.Data.Models.LopHoc>
@{
    ViewData["Title"] = "L·ªõp h·ªçc c√¥ng khai";
    Layout = "_Layout";
}

<div class="p-6">
    <!-- Header -->
    <div class="mb-8">
        <h1 class="text-3xl font-bold text-gray-900 mb-2">üéì L·ªõp h·ªçc c√¥ng khai</h1>
        <p class="text-gray-600">Kh√°m ph√° v√† ƒëƒÉng k√Ω c√°c l·ªõp h·ªçc ph√π h·ª£p v·ªõi b·∫°n</p>
    </div>

    <!-- Filters -->
    <div class="bg-white rounded-lg shadow-md p-6 mb-6">
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div>
                <label for="searchInput" class="block text-sm font-medium text-gray-700 mb-2">T√¨m ki·∫øm</label>
                <input type="text" id="searchInput" placeholder="Nh·∫≠p t√™n l·ªõp h·ªçc..." 
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
            </div>
            <div>
                <label for="timeFilter" class="block text-sm font-medium text-gray-700 mb-2">Khung gi·ªù</label>
                <select id="timeFilter" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    <option value="">T·∫•t c·∫£</option>
                    <option value="morning">S√°ng (6:00 - 12:00)</option>
                    <option value="afternoon">Chi·ªÅu (12:00 - 18:00)</option>
                    <option value="evening">T·ªëi (18:00 - 22:00)</option>
                </select>
            </div>
            <div>
                <label for="dayFilter" class="block text-sm font-medium text-gray-700 mb-2">Ng√†y trong tu·∫ßn</label>
                <select id="dayFilter" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    <option value="">T·∫•t c·∫£</option>
                    <option value="Th·ª© 2">Th·ª© 2</option>
                    <option value="Th·ª© 3">Th·ª© 3</option>
                    <option value="Th·ª© 4">Th·ª© 4</option>
                    <option value="Th·ª© 5">Th·ª© 5</option>
                    <option value="Th·ª© 6">Th·ª© 6</option>
                    <option value="Th·ª© 7">Th·ª© 7</option>
                    <option value="Ch·ªß nh·∫≠t">Ch·ªß nh·∫≠t</option>
                </select>
            </div>
            <div>
                <label for="availabilityFilter" class="block text-sm font-medium text-gray-700 mb-2">T√¨nh tr·∫°ng</label>
                <select id="availabilityFilter" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    <option value="">T·∫•t c·∫£</option>
                    <option value="available">C√≤n ch·ªó</option>
                    <option value="almost-full">S·∫Øp ƒë·∫ßy (>80%)</option>
                    <option value="full">ƒê√£ ƒë·∫ßy</option>
                </select>
            </div>
        </div>
    </div>

    @if (Model != null && Model.Any())
    {
        <!-- Classes Grid -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="classesGrid">
            @foreach (var lopHoc in Model.Where(c => c.TrangThai == "OPEN"))
            {
                // Note: We'll use JavaScript to load booking count dynamically
                // For now, show placeholder values that will be updated by JS
                var registeredCount = 0; // Will be updated by JavaScript
                var availableSlots = lopHoc.SucChua; // Will be updated by JavaScript
                var fillRate = 0.0; // Will be updated by JavaScript
                var startHour = lopHoc.GioBatDau.Hour;
                var timeCategory = startHour < 12 ? "morning" : startHour < 18 ? "afternoon" : "evening";
                var availabilityCategory = fillRate >= 100 ? "full" : fillRate > 80 ? "almost-full" : "available";
                
                <div class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow class-card"
                     data-class-id="@lopHoc.LopHocId"
                     data-name="@lopHoc.TenLop.ToLower()"
                     data-time="@timeCategory"
                     data-day="@lopHoc.ThuTrongTuan"
                     data-availability="@availabilityCategory">
                    
                    <!-- Class Header -->
                    <div class="bg-gradient-to-r from-purple-500 to-pink-500 p-6 text-white">
                        <div class="flex justify-between items-start mb-4">
                            <h3 class="text-xl font-bold">@lopHoc.TenLop</h3>
                            @if (availableSlots > 0)
                            {
                                <span class="px-2 py-1 text-xs rounded-full bg-green-500">
                                    C√≤n @availableSlots ch·ªó
                                </span>
                            }
                            else
                            {
                                <span class="px-2 py-1 text-xs rounded-full bg-red-500">
                                    ƒê√£ ƒë·∫ßy
                                </span>
                            }
                        </div>
                        <div class="text-center">
                            <div class="text-2xl font-bold mb-1">@lopHoc.GioBatDau.ToString("HH:mm") - @lopHoc.GioKetThuc.ToString("HH:mm")</div>
                            <div class="text-sm opacity-90">@lopHoc.ThuTrongTuan</div>
                        </div>
                    </div>

                    <!-- Class Details -->
                    <div class="p-6">
                        <div class="space-y-3 mb-6">
                            <!-- Trainer -->
                            <div class="flex items-center text-gray-600">
                                <svg class="w-4 h-4 mr-3 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                                </svg>
                                <span>
                                    @if (lopHoc.Hlv != null)
                                    {
                                        <span>HLV: @lopHoc.Hlv.Ho @lopHoc.Hlv.Ten</span>
                                    }
                                    else
                                    {
                                        <span class="text-orange-600">ƒêang c·∫≠p nh·∫≠t HLV</span>
                                    }
                                </span>
                            </div>

                            <!-- Duration -->
                            @if (lopHoc.ThoiLuong.HasValue)
                            {
                                <div class="flex items-center text-gray-600">
                                    <svg class="w-4 h-4 mr-3 text-purple-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                    </svg>
                                    <span>Th·ªùi l∆∞·ª£ng: @lopHoc.ThoiLuong ph√∫t</span>
                                </div>
                            }

                            <!-- Price -->
                            @if (lopHoc.GiaTuyChinh.HasValue)
                            {
                                <div class="flex items-center text-green-600 font-semibold">
                                    <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                                    </svg>
                                    <span>@lopHoc.GiaTuyChinh.Value.ToString("N0") VNƒê/th√°ng</span>
                                </div>
                            }
                            else
                            {
                                <div class="flex items-center text-blue-600">
                                    <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
                                    </svg>
                                    <span>Theo g√≥i t·∫≠p ƒë√£ ƒëƒÉng k√Ω</span>
                                </div>
                            }

                            <!-- Description -->
                            @if (!string.IsNullOrEmpty(lopHoc.MoTa))
                            {
                                <div class="text-sm text-gray-600 bg-gray-50 p-3 rounded-md">
                                    <p>@lopHoc.MoTa</p>
                                </div>
                            }

                            <!-- Capacity Progress -->
                            <div class="bg-gray-100 rounded-lg p-3">
                                <div class="flex justify-between text-sm mb-2">
                                    <span class="text-gray-600">ƒê√£ booking</span>
                                    <span class="font-medium registered-count">0/@lopHoc.SucChua</span>
                                </div>
                                <div class="w-full bg-gray-200 rounded-full h-2">
                                    <div class="capacity-progress h-2 rounded-full bg-green-500"
                                         style="width: 0%"></div>
                                </div>
                                <div class="text-xs text-gray-500 mt-1">
                                    @if (fillRate >= 100)
                                    {
                                        <span class="text-red-600">L·ªõp ƒë√£ ƒë·∫ßy</span>
                                    }
                                    else if (fillRate > 80)
                                    {
                                        <span class="text-yellow-600">S·∫Øp ƒë·∫ßy (@fillRate.ToString("F0")%)</span>
                                    }
                                    else
                                    {
                                        <span class="text-green-600">C√≤n @availableSlots ch·ªó tr·ªëng</span>
                                    }
                                </div>
                            </div>
                        </div>

                        <!-- Action Buttons -->
                        <div class="flex gap-2">
                            <a href="@Url.Action("Details", new { id = lopHoc.LopHocId })" 
                               class="flex-1 bg-gray-100 hover:bg-gray-200 text-gray-800 px-3 py-2 rounded-md text-sm font-medium text-center transition-colors">
                                üëÅÔ∏è Chi ti·∫øt
                            </a>
                            @if (User.Identity.IsAuthenticated)
                            {
                                @if (availableSlots > 0)
                                {
                                    <button onclick="registerClass(@lopHoc.LopHocId, '@lopHoc.TenLop')" 
                                            class="flex-1 bg-green-600 hover:bg-green-700 text-white px-3 py-2 rounded-md text-sm font-medium transition-colors">
                                        ‚úÖ ƒêƒÉng k√Ω
                                    </button>
                                }
                                else
                                {
                                    <button disabled 
                                            class="flex-1 bg-gray-400 text-white px-3 py-2 rounded-md text-sm font-medium cursor-not-allowed">
                                        ‚ùå ƒê√£ ƒë·∫ßy
                                    </button>
                                }
                            }
                            else
                            {
                                <a href="@Url.Action("Login", "Auth")" 
                                   class="flex-1 bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 rounded-md text-sm font-medium text-center transition-colors">
                                    üîê ƒêƒÉng nh·∫≠p
                                </a>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Load More Button -->
        <div class="text-center mt-8">
            <button id="loadMoreBtn" class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-medium transition-colors">
                Xem th√™m l·ªõp h·ªçc
            </button>
        </div>
    }
    else
    {
        <!-- Empty State -->
        <div class="bg-white rounded-lg shadow-md p-12 text-center">
            <svg class="w-16 h-16 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
            </svg>
            <h3 class="text-lg font-semibold text-gray-900 mb-2">Ch∆∞a c√≥ l·ªõp h·ªçc n√†o</h3>
            <p class="text-gray-600 mb-4">Hi·ªán t·∫°i ch∆∞a c√≥ l·ªõp h·ªçc n√†o ƒëang m·ªü. Vui l√≤ng quay l·∫°i sau.</p>
            <a href="@Url.Action("Index", "Home")" class="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
                ‚Üê Quay v·ªÅ trang ch·ªß
            </a>
        </div>
    }
</div>

<!-- Registration Modal -->
<div id="registrationModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-lg shadow-xl max-w-md w-full">
            <div class="p-6">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-900">ƒêƒÉng k√Ω l·ªõp h·ªçc</h3>
                    <button onclick="closeRegistrationModal()" class="text-gray-400 hover:text-gray-600">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
                <div id="registrationContent">
                    <!-- Registration content will be loaded here -->
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Search and filter functionality
        document.getElementById('searchInput').addEventListener('input', filterClasses);
        document.getElementById('timeFilter').addEventListener('change', filterClasses);
        document.getElementById('dayFilter').addEventListener('change', filterClasses);
        document.getElementById('availabilityFilter').addEventListener('change', filterClasses);

        function filterClasses() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const timeFilter = document.getElementById('timeFilter').value;
            const dayFilter = document.getElementById('dayFilter').value;
            const availabilityFilter = document.getElementById('availabilityFilter').value;
            
            const classCards = document.querySelectorAll('.class-card');

            classCards.forEach(card => {
                const name = card.getAttribute('data-name');
                const time = card.getAttribute('data-time');
                const day = card.getAttribute('data-day');
                const availability = card.getAttribute('data-availability');
                
                let show = true;
                
                // Search filter
                if (searchTerm && !name.includes(searchTerm)) {
                    show = false;
                }
                
                // Time filter
                if (timeFilter && show && time !== timeFilter) {
                    show = false;
                }
                
                // Day filter
                if (dayFilter && show && !day.includes(dayFilter)) {
                    show = false;
                }
                
                // Availability filter
                if (availabilityFilter && show && availability !== availabilityFilter) {
                    show = false;
                }
                
                card.style.display = show ? 'block' : 'none';
            });
        }

        function registerClass(classId, className) {
            document.getElementById('registrationContent').innerHTML = `
                <div class="text-center">
                    <div class="text-4xl mb-4">üéì</div>
                    <h4 class="text-lg font-semibold text-gray-900 mb-2">X√°c nh·∫≠n ƒëƒÉng k√Ω</h4>
                    <p class="text-gray-600 mb-6">B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng k√Ω l·ªõp h·ªçc <strong>${className}</strong> kh√¥ng?</p>
                    <div class="flex gap-3">
                        <button onclick="confirmRegistration(${classId})" 
                                class="flex-1 bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-md font-medium transition-colors">
                            ‚úÖ X√°c nh·∫≠n
                        </button>
                        <button onclick="closeRegistrationModal()" 
                                class="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-700 px-4 py-2 rounded-md font-medium transition-colors">
                            ‚ùå H·ªßy b·ªè
                        </button>
                    </div>
                </div>
            `;
            document.getElementById('registrationModal').classList.remove('hidden');
        }

        function confirmRegistration(classId) {
            // Redirect to registration page
            window.location.href = '@Url.Action("Create", "DangKy")?classId=' + classId;
        }

        function closeRegistrationModal() {
            document.getElementById('registrationModal').classList.add('hidden');
        }

        // Close modal when clicking outside
        document.getElementById('registrationModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeRegistrationModal();
            }
        });

        // Load booking counts for all classes
        async function loadBookingCounts() {
            try {
                const classIds = @Html.Raw(Json.Serialize(Model.Where(c => c.TrangThai == "OPEN").Select(c => c.LopHocId).ToList()));

                const response = await fetch('/LopHoc/GetCapacityData', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ classIds: classIds })
                });

                if (response.ok) {
                    const result = await response.json();
                    if (result.success) {
                        result.data.forEach(classData => {
                            updateClassCapacity(classData);
                        });
                    }
                }
            } catch (error) {
                console.error('Error loading booking counts:', error);
            }
        }

        function updateClassCapacity(classData) {
            const classCard = document.querySelector(`[data-class-id="${classData.classId}"]`);
            if (classCard) {
                // Update registered count display
                const registeredSpan = classCard.querySelector('.registered-count');
                if (registeredSpan) {
                    registeredSpan.textContent = `${classData.registeredCount}/${classData.capacity}`;
                }

                // Update progress bar
                const progressBar = classCard.querySelector('.capacity-progress');
                if (progressBar) {
                    const fillRate = classData.percentFull;
                    progressBar.style.width = `${Math.min(fillRate, 100)}%`;

                    // Update color based on fill rate
                    progressBar.className = progressBar.className.replace(/bg-(red|yellow|green)-500/, '');
                    if (fillRate >= 100) {
                        progressBar.classList.add('bg-red-500');
                    } else if (fillRate > 80) {
                        progressBar.classList.add('bg-yellow-500');
                    } else {
                        progressBar.classList.add('bg-green-500');
                    }
                }
            }
        }

        // Load booking counts when page loads
        document.addEventListener('DOMContentLoaded', loadBookingCounts);

        // Load more functionality (placeholder)
        document.getElementById('loadMoreBtn').addEventListener('click', function() {
            this.textContent = 'ƒêang t·∫£i...';
            setTimeout(() => {
                this.textContent = 'Xem th√™m l·ªõp h·ªçc';
                // In a real implementation, this would load more classes via AJAX
            }, 1000);
        });
    </script>
}
