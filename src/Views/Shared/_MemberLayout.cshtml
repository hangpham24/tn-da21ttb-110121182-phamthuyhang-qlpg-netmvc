<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - GymFitness </title>
    <!-- Tailwind CSS - Load first to avoid conflicts -->
    <script src="https://cdn.tailwindcss.com"></script>

    <!-- <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" /> -->
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/GymManagement.Web.styles.css" asp-append-version="true" />
    
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" crossorigin="anonymous" referrerpolicy="no-referrer" />
    
    <!-- Flowbite -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/flowbite/2.2.0/flowbite.min.css" rel="stylesheet" />

    <!-- QRCode.js Library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/qrcode/1.5.3/qrcode.min.js"></script>

    @await RenderSectionAsync("Styles", required: false)
</head>
<body class="bg-gray-50">
    <!-- Navigation Header -->
    <nav class="bg-white shadow-lg border-b border-gray-200">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between h-16">
                <!-- Logo and Brand -->
                <div class="flex items-center">
                    <a asp-controller="Home" asp-action="Index" class="flex items-center">
                        <span class="text-2xl">üèãÔ∏è</span>
                        <span class="ml-2 text-xl font-bold text-blue-600">GymFitness </span>
                    </a>
                </div>

                <!-- Navigation Links -->
                <div class="hidden md:flex items-center space-x-8">
                    <a asp-controller="Home" asp-action="Index"
                       class="@(ViewContext.RouteData.Values["Controller"]?.ToString() == "Home" ? "text-blue-600 bg-blue-50" : "text-gray-700 hover:text-blue-600") px-3 py-2 rounded-md text-sm font-medium transition-colors">
                        üè† Trang ch·ªß
                    </a>
                    @if (User.Identity?.IsAuthenticated == true)
                    {
                        <a asp-controller="Home" asp-action="MemberDashboard"
                           class="@(ViewContext.RouteData.Values["Controller"]?.ToString() == "Home" && ViewContext.RouteData.Values["Action"]?.ToString() == "MemberDashboard" ? "text-blue-600 bg-blue-50" : "text-gray-700 hover:text-blue-600") px-3 py-2 rounded-md text-sm font-medium transition-colors">
                            üìä Dashboard
                        </a>

                        <!-- G√≥i t·∫≠p & L·ªõp h·ªçc Dropdown -->
                        <div class="relative">
                            <button type="button" class="flex items-center text-sm rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 @(ViewContext.RouteData.Values["Controller"]?.ToString() == "Member" ? "text-blue-600 bg-blue-50" : "text-gray-700 hover:text-blue-600") px-3 py-2 font-medium transition-colors"
                                    id="services-menu-button" onclick="toggleServicesMenu()">
                                üìö D·ªãch v·ª•
                                <svg class="w-4 h-4 ml-1 transition-transform duration-200" id="services-arrow" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                                </svg>
                            </button>
                            
                            <!-- Dropdown menu -->
                            <div id="services-menu" class="hidden absolute left-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1 z-[9999] border border-gray-200">
                                <a asp-controller="Member" asp-action="Packages"
                                   class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900">
                                    üí≥ G√≥i t·∫≠p
                                </a>
                                <a asp-controller="Member" asp-action="Classes"
                                   class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900">
                                    üéì L·ªõp h·ªçc
                                </a>
                            </div>
                        </div>

                        <!-- Ho·∫°t ƒë·ªông Dropdown -->
                        <div class="relative">
                            <button type="button" class="flex items-center text-sm rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 @(ViewContext.RouteData.Values["Controller"]?.ToString() == "Booking" || ViewContext.RouteData.Values["Controller"]?.ToString() == "DiemDanh" ? "text-blue-600 bg-blue-50" : "text-gray-700 hover:text-blue-600") px-3 py-2 font-medium transition-colors"
                                    id="activities-menu-button" onclick="toggleActivitiesMenu()">
                                ‚ö° Ho·∫°t ƒë·ªông
                                <svg class="w-4 h-4 ml-1 transition-transform duration-200" id="activities-arrow" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                                </svg>
                            </button>
                            
                            <!-- Dropdown menu -->
                            <div id="activities-menu" class="hidden absolute left-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1 z-[9999] border border-gray-200">
                                @* <a asp-controller="DiemDanh" asp-action="CheckIn"
                                   class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900">
                                    ‚úÖ Check-in
                                </a>
                                <a asp-controller="FaceManagement" asp-action="Index"
                                   class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900">
                                    üëÅÔ∏è Qu·∫£n l√Ω khu√¥n m·∫∑t
                                </a> *@
                                <a asp-controller="Booking" asp-action="Calendar"
                                   class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900">
                                    üìÖ ƒê·∫∑t l·ªãch
                                </a>
                                <a asp-controller="Member" asp-action="MyRegistrations"
                                   class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900">
                                    üìã ƒêƒÉng k√Ω c·ªßa t√¥i
                                </a>
                            </div>
                        </div>
                    }
                    else
                    {
                        <a asp-controller="Member" asp-action="Packages"
                           class="@(ViewContext.RouteData.Values["Controller"]?.ToString() == "Member" && ViewContext.RouteData.Values["Action"]?.ToString() == "Packages" ? "text-blue-600 bg-blue-50" : "text-gray-700 hover:text-blue-600") px-3 py-2 rounded-md text-sm font-medium transition-colors">
                            üí≥ G√≥i t·∫≠p
                        </a>
                        <a asp-controller="Member" asp-action="Classes"
                           class="@(ViewContext.RouteData.Values["Controller"]?.ToString() == "Member" && ViewContext.RouteData.Values["Action"]?.ToString() == "Classes" ? "text-blue-600 bg-blue-50" : "text-gray-700 hover:text-blue-600") px-3 py-2 rounded-md text-sm font-medium transition-colors">
                            üéì L·ªõp h·ªçc
                        </a>
                    }
                </div>

                <!-- User Menu -->
                <div class="flex items-center space-x-4">
                    @if (User.Identity?.IsAuthenticated == true)
                    {
                        <!-- Notification Bell -->
                        <div class="relative">
                            <button type="button" class="p-2 text-gray-400 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 rounded-full" 
                                    id="notifications-button" onclick="toggleNotifications()">
                                <span class="sr-only">View notifications</span>
                                <span class="text-xl">üîî</span>
                                <!-- Notification Badge -->
                                <span id="notification-badge" class="hidden absolute -top-1 -right-1 h-5 w-5 bg-red-500 text-white text-xs rounded-full flex items-center justify-center">0</span>
                            </button>
                            
                            <!-- Notifications Dropdown -->
                            <div id="notifications-dropdown" class="hidden absolute right-0 mt-2 w-80 bg-white rounded-md shadow-lg py-1 z-[9999] border border-gray-200">
                                <div class="px-4 py-3 border-b border-gray-200">
                                    <div class="flex items-center justify-between">
                                        <h3 class="text-sm font-medium text-gray-900">Th√¥ng b√°o</h3>
                                        <button onclick="markAllAsRead()" class="text-xs text-blue-600 hover:text-blue-800">ƒê√°nh d·∫•u t·∫•t c·∫£ ƒë√£ ƒë·ªçc</button>
                                    </div>
                                </div>
                                <div id="notifications-content" class="max-h-96 overflow-y-auto">
                                    <div class="flex items-center justify-center py-6">
                                        <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
                                        <span class="ml-2 text-sm text-gray-500">ƒêang t·∫£i...</span>
                                    </div>
                                </div>
                                <div class="px-4 py-3 border-t border-gray-200 text-center">
                                    <a href="#" class="text-sm text-blue-600 hover:text-blue-800">Xem t·∫•t c·∫£ th√¥ng b√°o</a>
                                </div>
                            </div>
                        </div>

                        <!-- User Profile Dropdown -->
                        <div class="relative">
                            <button type="button" class="flex items-center text-sm rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500" 
                                    id="user-menu-button" onclick="toggleUserMenu()">
                                <span class="sr-only">Open user menu</span>
                                @await Component.InvokeAsync("UserAvatar", new { cssClass = "h-8 w-8", showName = true })
                                <svg class="ml-1 h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                                </svg>
                            </button>
                            
                            <!-- Dropdown menu -->
                            <div id="user-menu" class="hidden absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1 z-[9999]">
                                <a asp-controller="Profile" asp-action="Index" 
                                   class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                                    üë§ H·ªì s∆° c√° nh√¢n
                                </a>
                                <a asp-controller="Member" asp-action="MyRegistrations"
                                   class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                                    üìã ƒêƒÉng k√Ω c·ªßa t√¥i
                                </a>
                                @* <a asp-controller="DiemDanh" asp-action="AttendanceReport"
                                   class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                                    üìä L·ªãch s·ª≠ Check-in
                                </a> *@
                                <a asp-controller="Booking" asp-action="MyBookings"
                                   class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                                    üìÖ L·ªãch ƒë√£ ƒë·∫∑t
                                </a>
                                <div class="border-t border-gray-100"></div>
                                <a asp-controller="Auth" asp-action="Logout" 
                                   class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                                    üö™ ƒêƒÉng xu·∫•t
                                </a>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="space-x-4">
                            <a asp-controller="Auth" asp-action="Login" 
                               class="text-gray-700 hover:text-blue-600 px-3 py-2 rounded-md text-sm font-medium">
                                ƒêƒÉng nh·∫≠p
                            </a>
                            <a asp-controller="Auth" asp-action="Register" 
                               class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors">
                                ƒêƒÉng k√Ω
                            </a>
                        </div>
                    }
                </div>

                <!-- Mobile menu button -->
                <div class="md:hidden flex items-center">
                    <button type="button" class="text-gray-700 hover:text-blue-600 focus:outline-none focus:text-blue-600" 
                            onclick="toggleMobileMenu()">
                        <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
                        </svg>
                    </button>
                </div>
            </div>
        </div>

        <!-- Mobile menu -->
        <div id="mobile-menu" class="hidden md:hidden">
            <div class="px-2 pt-2 pb-3 space-y-1 sm:px-3 bg-white border-t border-gray-200">
                <a asp-controller="Home" asp-action="Index" 
                   class="block px-3 py-2 text-gray-700 hover:text-blue-600 rounded-md text-base font-medium">
                    üè† Trang ch·ªß
                </a>
                @if (User.Identity?.IsAuthenticated == true)
                {
                    <a asp-controller="Home" asp-action="MemberDashboard"
                       class="block px-3 py-2 text-gray-700 hover:text-blue-600 rounded-md text-base font-medium">
                        üìä Dashboard
                    </a>
                    
                    <!-- D·ªãch v·ª• Section -->
                    <div class="border-t pt-2 mt-2">
                        <div class="text-xs font-semibold text-gray-500 uppercase tracking-wider px-3 py-2">üìö D·ªãch v·ª•</div>
                        <a asp-controller="Member" asp-action="Packages"
                           class="@(ViewContext.RouteData.Values["Controller"]?.ToString() == "Member" && ViewContext.RouteData.Values["Action"]?.ToString() == "Packages" ? "text-blue-600 bg-blue-50 border-blue-600" : "text-gray-700 hover:text-blue-600 hover:bg-gray-50 border-transparent") block pl-6 pr-4 py-2 text-base font-medium border-l-4 transition-colors">
                            üí≥ G√≥i t·∫≠p
                        </a>
                        <a asp-controller="Member" asp-action="Classes"
                           class="@(ViewContext.RouteData.Values["Controller"]?.ToString() == "Member" && ViewContext.RouteData.Values["Action"]?.ToString() == "Classes" ? "text-blue-600 bg-blue-50 border-blue-600" : "text-gray-700 hover:text-blue-600 hover:bg-gray-50 border-transparent") block pl-6 pr-4 py-2 text-base font-medium border-l-4 transition-colors">
                            üéì L·ªõp h·ªçc
                        </a>
                    </div>

                    <!-- Ho·∫°t ƒë·ªông Section -->
                    <div class="border-t pt-2 mt-2">
                        <div class="text-xs font-semibold text-gray-500 uppercase tracking-wider px-3 py-2">‚ö° Ho·∫°t ƒë·ªông</div>
                        <a asp-controller="DiemDanh" asp-action="CheckIn"
                           class="@(ViewContext.RouteData.Values["Controller"]?.ToString() == "DiemDanh" && ViewContext.RouteData.Values["Action"]?.ToString() == "CheckIn" ? "text-blue-600 bg-blue-50 border-blue-600" : "text-gray-700 hover:text-blue-600 hover:bg-gray-50 border-transparent") block pl-6 pr-4 py-2 text-base font-medium border-l-4 transition-colors">
                            ‚úÖ Check-in
                        </a>
                        <a asp-controller="Booking" asp-action="Calendar"
                           class="@(ViewContext.RouteData.Values["Controller"]?.ToString() == "Booking" && ViewContext.RouteData.Values["Action"]?.ToString() == "Calendar" ? "text-blue-600 bg-blue-50 border-blue-600" : "text-gray-700 hover:text-blue-600 hover:bg-gray-50 border-transparent") block pl-6 pr-4 py-2 text-base font-medium border-l-4 transition-colors">
                            üìÖ ƒê·∫∑t l·ªãch
                        </a>
                        <a asp-controller="Member" asp-action="MyRegistrations"
                           class="@(ViewContext.RouteData.Values["Controller"]?.ToString() == "Member" && ViewContext.RouteData.Values["Action"]?.ToString() == "MyRegistrations" ? "text-blue-600 bg-blue-50 border-blue-600" : "text-gray-700 hover:text-blue-600 hover:bg-gray-50 border-transparent") block pl-6 pr-4 py-2 text-base font-medium border-l-4 transition-colors">
                            üìã ƒêƒÉng k√Ω c·ªßa t√¥i
                        </a>
                    </div>
                }
                else
                {
                    <a asp-controller="Member" asp-action="Packages" 
                       class="block px-3 py-2 text-gray-700 hover:text-blue-600 rounded-md text-base font-medium">
                        üí≥ G√≥i t·∫≠p
                    </a>
                    <a asp-controller="Member" asp-action="Classes" 
                       class="block px-3 py-2 text-gray-700 hover:text-blue-600 rounded-md text-base font-medium">
                        üéì L·ªõp h·ªçc
                    </a>
                }
                @if (User.Identity?.IsAuthenticated == true)
                {
                    <div class="border-t border-gray-200 pt-2">
                        <a asp-controller="Profile" asp-action="Index" 
                           class="block px-3 py-2 text-gray-700 hover:text-blue-600 rounded-md text-base font-medium">
                            üë§ H·ªì s∆° c√° nh√¢n
                        </a>
                        <a asp-controller="DiemDanh" asp-action="AttendanceReport"
                           class="block px-3 py-2 text-gray-700 hover:text-blue-600 rounded-md text-base font-medium">
                            üìä L·ªãch s·ª≠ Check-in
                        </a>
                                                 <a asp-controller="Booking" asp-action="MyBookings"
                            class="block px-3 py-2 text-gray-700 hover:text-blue-600 rounded-md text-base font-medium">
                             üìÖ L·ªãch ƒë√£ ƒë·∫∑t
                         </a>
                        <a asp-controller="Auth" asp-action="Logout" 
                           class="block px-3 py-2 text-gray-700 hover:text-blue-600 rounded-md text-base font-medium">
                            üö™ ƒêƒÉng xu·∫•t
                        </a>
                    </div>
                }
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <main class="min-h-screen">
        @if (ViewData["Title"]?.ToString()?.Contains("ƒêƒÉng nh·∫≠p") == true ||
             ViewData["Title"]?.ToString()?.Contains("ƒêƒÉng k√Ω") == true ||
             ViewData["Title"]?.ToString()?.Contains("Qu√™n m·∫≠t kh·∫©u") == true ||
             ViewData["Title"]?.ToString()?.Contains("Truy c·∫≠p b·ªã t·ª´ ch·ªëi") == true)
        {
            <!-- Auth Pages Container -->
            <div class="min-h-screen flex flex-col justify-center py-12 px-4 sm:px-6 lg:px-8">
                <div class="mx-auto w-full max-w-md sm:max-w-lg md:max-w-xl lg:max-w-2xl">
                    @if (TempData["SuccessMessage"] != null)
                    {
                        <div class="mb-4 p-4 bg-green-100 border border-green-400 text-green-700 rounded-lg">
                            @TempData["SuccessMessage"]
                        </div>
                    }
                    @if (TempData["ErrorMessage"] != null)
                    {
                        <div class="mb-4 p-4 bg-red-100 border border-red-400 text-red-700 rounded-lg">
                            @TempData["ErrorMessage"]
                        </div>
                    }
                    @RenderBody()
                </div>
            </div>
        }
        else
        {
            <!-- Regular Pages -->
            @if (TempData["SuccessMessage"] != null)
            {
                <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mb-4">
                    <div class="p-4 bg-green-100 border border-green-400 text-green-700 rounded-lg">
                        @TempData["SuccessMessage"]
                    </div>
                </div>
            }
            @if (TempData["ErrorMessage"] != null)
            {
                <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mb-4">
                    <div class="p-4 bg-red-100 border border-red-400 text-red-700 rounded-lg">
                        @TempData["ErrorMessage"]
                    </div>
                </div>
            }
            @RenderBody()
        }
    </main>

    <!-- Footer -->
    <footer class="bg-white border-t border-gray-200 mt-12">
        <div class="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
            <div class="text-center text-gray-500 text-sm">
                ¬© 2024 GymFitness . T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.
            </div>
        </div>
    </footer>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/flowbite/2.2.0/flowbite.min.js"></script>
    
    <script>
        // Close dropdowns when clicking outside
        document.addEventListener('click', function(e) {
            const servicesMenu = document.getElementById('services-menu');
            const activitiesMenu = document.getElementById('activities-menu');
            const servicesButton = document.getElementById('services-menu-button');
            const activitiesButton = document.getElementById('activities-menu-button');
            const servicesArrow = document.getElementById('services-arrow');
            const activitiesArrow = document.getElementById('activities-arrow');
            
            // If click is not on dropdown buttons or menus, close all dropdowns
            if (!e.target.closest('#services-menu-button') && !e.target.closest('#services-menu') &&
                !e.target.closest('#activities-menu-button') && !e.target.closest('#activities-menu') &&
                !e.target.closest('#user-menu-button') && !e.target.closest('#user-menu')) {
                
                if (servicesMenu && !servicesMenu.classList.contains('hidden')) {
                    servicesMenu.classList.add('hidden');
                    if (servicesArrow) servicesArrow.style.transform = 'rotate(0deg)';
                }
                
                if (activitiesMenu && !activitiesMenu.classList.contains('hidden')) {
                    activitiesMenu.classList.add('hidden');
                    if (activitiesArrow) activitiesArrow.style.transform = 'rotate(0deg)';
                }
                
                const userMenu = document.getElementById('user-menu');
                if (userMenu && !userMenu.classList.contains('hidden')) {
                    userMenu.classList.add('hidden');
                }
            }
        });

        function toggleUserMenu() {
            const menu = document.getElementById('user-menu');
            menu.classList.toggle('hidden');
        }

        function toggleServicesMenu() {
            const menu = document.getElementById('services-menu');
            const arrow = document.getElementById('services-arrow');
            const activitiesMenu = document.getElementById('activities-menu');
            const activitiesArrow = document.getElementById('activities-arrow');
            
            // Close activities menu if open
            if (!activitiesMenu.classList.contains('hidden')) {
                activitiesMenu.classList.add('hidden');
                activitiesArrow.style.transform = 'rotate(0deg)';
            }
            
            // Toggle services menu
            menu.classList.toggle('hidden');
            if (menu.classList.contains('hidden')) {
                arrow.style.transform = 'rotate(0deg)';
            } else {
                arrow.style.transform = 'rotate(180deg)';
            }
        }

        function toggleActivitiesMenu() {
            const menu = document.getElementById('activities-menu');
            const arrow = document.getElementById('activities-arrow');
            const servicesMenu = document.getElementById('services-menu');
            const servicesArrow = document.getElementById('services-arrow');
            
            // Close services menu if open
            if (!servicesMenu.classList.contains('hidden')) {
                servicesMenu.classList.add('hidden');
                servicesArrow.style.transform = 'rotate(0deg)';
            }
            
            // Toggle activities menu
            menu.classList.toggle('hidden');
            if (menu.classList.contains('hidden')) {
                arrow.style.transform = 'rotate(0deg)';
            } else {
                arrow.style.transform = 'rotate(180deg)';
            }
        }

        function toggleMobileMenu() {
            const menu = document.getElementById('mobile-menu');
            menu.classList.toggle('hidden');
        }

        // Close user menu when clicking outside
        document.addEventListener('click', function(event) {
            const userMenuButton = document.getElementById('user-menu-button');
            const userMenu = document.getElementById('user-menu');
            const notificationsButton = document.getElementById('notifications-button');
            const notificationsDropdown = document.getElementById('notifications-dropdown');
            
            if (!userMenuButton.contains(event.target) && !userMenu.contains(event.target)) {
                userMenu.classList.add('hidden');
            }
            
            if (!notificationsButton.contains(event.target) && !notificationsDropdown.contains(event.target)) {
                notificationsDropdown.classList.add('hidden');
            }
        });

        // Notification System
        let notificationsVisible = false;
        let unreadCount = 0;

        function toggleNotifications() {
            const dropdown = document.getElementById('notifications-dropdown');
            notificationsVisible = !notificationsVisible;
            
            if (notificationsVisible) {
                dropdown.classList.remove('hidden');
                loadNotifications();
            } else {
                dropdown.classList.add('hidden');
            }
        }

        function loadNotifications() {
            const content = document.getElementById('notifications-content');
            
            fetch('/api/thongbao/unread')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        displayNotifications(data.notifications);
                    } else {
                        content.innerHTML = '<div class="px-4 py-3 text-sm text-gray-500 text-center">Kh√¥ng th·ªÉ t·∫£i th√¥ng b√°o</div>';
                    }
                })
                .catch(error => {
                    console.error('Error loading notifications:', error);
                    content.innerHTML = '<div class="px-4 py-3 text-sm text-red-500 text-center">L·ªói khi t·∫£i th√¥ng b√°o</div>';
                });
        }

        function displayNotifications(notifications) {
            const content = document.getElementById('notifications-content');
            
            if (notifications.length === 0) {
                content.innerHTML = '<div class="px-4 py-6 text-sm text-gray-500 text-center">Kh√¥ng c√≥ th√¥ng b√°o m·ªõi</div>';
                return;
            }
            
            let html = '';
            notifications.forEach(notification => {
                const timeAgo = getTimeAgo(new Date(notification.thoiGianTao));
                html += `
                    <div class="px-4 py-3 hover:bg-gray-50 cursor-pointer border-b border-gray-100 notification-item" onclick="markAsRead(${notification.id})">
                        <div class="flex items-start">
                            <span class="text-lg mr-3">${notification.icon}</span>
                            <div class="flex-1 min-w-0">
                                <p class="text-sm font-medium text-gray-900 truncate">${notification.tieuDe}</p>
                                <p class="text-sm text-gray-500 mt-1">${notification.noiDung}</p>
                                <p class="text-xs text-gray-400 mt-2">${timeAgo}</p>
                            </div>
                        </div>
                    </div>
                `;
            });
            
            content.innerHTML = html;
        }

        function markAsRead(notificationId) {
            fetch(`/api/thongbao/${notificationId}/mark-as-read`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    updateNotificationCount();
                    loadNotifications(); // Reload to remove from unread list
                }
            })
            .catch(error => console.error('Error marking notification as read:', error));
        }

        function markAllAsRead() {
            fetch('/api/thongbao/mark-all-as-read', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    updateNotificationCount();
                    loadNotifications();
                }
            })
            .catch(error => console.error('Error marking all notifications as read:', error));
        }

        function updateNotificationCount() {
            fetch('/api/thongbao/count')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const badge = document.getElementById('notification-badge');
                        unreadCount = data.unreadCount;
                        
                        if (unreadCount > 0) {
                            badge.textContent = unreadCount > 99 ? '99+' : unreadCount;
                            badge.classList.remove('hidden');
                        } else {
                            badge.classList.add('hidden');
                        }
                    }
                })
                .catch(error => console.error('Error updating notification count:', error));
        }

        function getTimeAgo(date) {
            const now = new Date();
            const diff = now - date;
            const minutes = Math.floor(diff / 60000);
            const hours = Math.floor(diff / 3600000);
            const days = Math.floor(diff / 86400000);
            
            if (minutes < 1) return 'V·ª´a xong';
            if (minutes < 60) return `${minutes} ph√∫t tr∆∞·ªõc`;
            if (hours < 24) return `${hours} gi·ªù tr∆∞·ªõc`;
            if (days < 7) return `${days} ng√†y tr∆∞·ªõc`;
            return date.toLocaleDateString('vi-VN');
        }

        // Initialize notifications on page load
        document.addEventListener('DOMContentLoaded', function() {
            updateNotificationCount();
            
            // Poll for new notifications every 30 seconds
            setInterval(updateNotificationCount, 30000);
        });
    </script>

    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
