@{
    ViewData["Title"] = "H·ªçc vi√™n - Hu·∫•n luy·ªán vi√™n";
    Layout = "_TrainerLayout";
    var myClasses = ViewBag.MyClasses as IEnumerable<GymManagement.Web.Data.Models.LopHoc>;
}

<div class="p-6">
    <!-- Header -->
    <div class="mb-8">
        <h1 class="text-3xl font-bold text-gray-900 mb-2">üë• H·ªçc vi√™n c·ªßa t√¥i</h1>
        <p class="text-gray-600">Qu·∫£n l√Ω h·ªçc vi√™n trong c√°c l·ªõp h·ªçc ƒë∆∞·ª£c ph√¢n c√¥ng</p>
    </div>

    <!-- Class Selection and Filters -->
    <div class="bg-white rounded-lg shadow-md p-6 mb-6">
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <!-- Class Selection -->
            <div>
                <label for="classSelect" class="block text-sm font-medium text-gray-700 mb-2">
                    <span class="flex items-center">
                        üéì Ch·ªçn l·ªõp h·ªçc
                    </span>
                </label>
                <select id="classSelect" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    <option value="">-- T·∫•t c·∫£ l·ªõp h·ªçc --</option>
                    @if (myClasses != null)
                    {
                        @foreach (var lopHoc in myClasses)
                        {
                            <option value="@lopHoc.LopHocId">@lopHoc.TenLop (@lopHoc.ThuTrongTuan, @lopHoc.GioBatDau.ToString("HH:mm")-@lopHoc.GioKetThuc.ToString("HH:mm"))</option>
                        }
                    }
                </select>
            </div>

            <!-- Search Input -->
            <div>
                <label for="searchStudent" class="block text-sm font-medium text-gray-700 mb-2">
                    <span class="flex items-center">
                        üîç T√¨m ki·∫øm h·ªçc vi√™n
                    </span>
                </label>
                <input type="text" id="searchStudent" placeholder="T√™n, email, s·ªë ƒëi·ªán tho·∫°i..." 
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
            </div>

            <!-- Status Filter -->
            <div>
                <label for="statusFilter" class="block text-sm font-medium text-gray-700 mb-2">
                    <span class="flex items-center">
                        üìä Tr·∫°ng th√°i
                    </span>
                </label>
                <select id="statusFilter" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    <option value="">T·∫•t c·∫£ tr·∫°ng th√°i</option>
                    <option value="ACTIVE">ƒêang ho·∫°t ƒë·ªông</option>
                    <option value="INACTIVE">Kh√¥ng ho·∫°t ƒë·ªông</option>
                    <option value="EXPIRED">H·∫øt h·∫°n</option>
                </select>
            </div>

            <!-- Registration Date Filter -->
            <div>
                <label for="dateFilter" class="block text-sm font-medium text-gray-700 mb-2">
                    <span class="flex items-center">
                        üìÖ Th·ªùi gian ƒëƒÉng k√Ω
                    </span>
                </label>
                <select id="dateFilter" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    <option value="">T·∫•t c·∫£ th·ªùi gian</option>
                    <option value="7">7 ng√†y g·∫ßn ƒë√¢y</option>
                    <option value="30">30 ng√†y g·∫ßn ƒë√¢y</option>
                    <option value="90">3 th√°ng g·∫ßn ƒë√¢y</option>
                </select>
            </div>
        </div>

        <!-- Filter Actions -->
        <div class="flex flex-wrap items-center justify-between mt-4 pt-4 border-t border-gray-200">
            <div class="flex items-center space-x-2">
                <button id="clearFilters" class="px-3 py-2 text-sm text-gray-600 hover:text-gray-800 transition-colors">
                    üóëÔ∏è X√≥a b·ªô l·ªçc
                </button>
                <span id="resultsCount" class="text-sm text-gray-500"></span>
            </div>
            <div class="flex items-center space-x-2">
                <button id="exportStudents" class="px-4 py-2 bg-green-600 text-white text-sm rounded-md hover:bg-green-700 transition-colors" disabled>
                    üìä Xu·∫•t Excel
                </button>
                <button id="refreshData" class="px-4 py-2 bg-purple-600 text-white text-sm rounded-md hover:bg-purple-700 transition-colors">
                    üîÑ L√†m m·ªõi
                </button>
            </div>
        </div>
    </div>

    <!-- Students List -->
    <div id="studentsContainer">
        <!-- Default state -->
        <div class="bg-white rounded-lg shadow-md p-12 text-center">
            <svg class="w-16 h-16 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
            </svg>
            <h3 class="text-lg font-semibold text-gray-900 mb-2">Ch·ªçn l·ªõp h·ªçc ƒë·ªÉ xem h·ªçc vi√™n</h3>
            <p class="text-gray-600">Vui l√≤ng ch·ªçn m·ªôt l·ªõp h·ªçc t·ª´ danh s√°ch tr√™n ƒë·ªÉ xem danh s√°ch h·ªçc vi√™n.</p>
        </div>
    </div>

    <!-- Loading State -->
    <div id="loadingState" class="bg-white rounded-lg shadow-md p-12 text-center hidden">
        <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600 mx-auto mb-4"></div>
        <p class="text-gray-600">ƒêang t·∫£i danh s√°ch h·ªçc vi√™n...</p>
    </div>

    <!-- Empty State -->
    <div id="emptyState" class="bg-white rounded-lg shadow-md p-12 text-center hidden">
        <svg class="w-16 h-16 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
        </svg>
        <h3 class="text-lg font-semibold text-gray-900 mb-2">Ch∆∞a c√≥ h·ªçc vi√™n n√†o</h3>
        <p class="text-gray-600">L·ªõp h·ªçc n√†y ch∆∞a c√≥ h·ªçc vi√™n ƒëƒÉng k√Ω.</p>
    </div>
</div>

<!-- Student Details Modal -->
<div id="studentModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
            <div class="sticky top-0 bg-white p-4 border-b border-gray-200 flex justify-between items-center rounded-t-lg">
                <h3 class="text-xl font-semibold text-gray-900 flex items-center">
                    üë§ Chi ti·∫øt h·ªçc vi√™n
                </h3>
                <button onclick="closeStudentModal()" class="text-gray-400 hover:text-gray-600 p-2 rounded-full hover:bg-gray-100 transition-colors">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            <div class="p-6">
                <div id="studentDetails">
                    <!-- Student details will be loaded here -->
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentStudents = [];
        
        document.addEventListener('DOMContentLoaded', function() {
            // Event listeners
            document.getElementById('classSelect').addEventListener('change', handleFilterChange);
            document.getElementById('searchStudent').addEventListener('input', debounce(filterStudents, 300));
            document.getElementById('statusFilter').addEventListener('change', filterStudents);
            document.getElementById('dateFilter').addEventListener('change', filterStudents);
            document.getElementById('clearFilters').addEventListener('click', clearAllFilters);
            document.getElementById('refreshData').addEventListener('click', refreshAllData);
            document.getElementById('exportStudents').addEventListener('click', exportToExcel);
            
            // Check if classId is provided in URL
            const urlParams = new URLSearchParams(window.location.search);
            const classId = urlParams.get('classId');
            if (classId) {
                document.getElementById('classSelect').value = classId;
                handleFilterChange();
            } else {
                // Load all students from all classes initially
                loadStudents();
            }
        });

        function loadStudents() {
            const classId = document.getElementById('classSelect').value;
            
            showLoadingState();
            
            // Choose API endpoint based on selection
            const apiUrl = !classId || classId === '' 
                ? '@Url.Action("GetAllStudentsByTrainer", "Trainer")'
                : `@Url.Action("GetStudentsByClass", "Trainer")?classId=${classId}`;
            
            // Load students via API
            fetch(apiUrl)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        currentStudents = data.data;
                        displayStudents(currentStudents);
                    } else {
                        showError(data.message || 'C√≥ l·ªói x·∫£y ra khi t·∫£i danh s√°ch h·ªçc vi√™n.');
                    }
                })
                .catch(error => {
                    console.error('Error loading students:', error);
                    showError('C√≥ l·ªói x·∫£y ra khi t·∫£i danh s√°ch h·ªçc vi√™n.');
                });
        }

        function displayStudents(students) {
            const container = document.getElementById('studentsContainer');
            
            if (!students || students.length === 0) {
                showEmptyState();
                return;
            }
            
            const studentsHtml = `
                <div class="bg-white rounded-lg shadow-md overflow-hidden">
                    <div class="px-6 py-4 bg-gray-50 border-b border-gray-200">
                        <h3 class="text-lg font-semibold text-gray-900">
                            Danh s√°ch h·ªçc vi√™n (${students.length} ng∆∞·ªùi)
                        </h3>
                    </div>
                    <div class="divide-y divide-gray-200">
                        ${students.map(student => `
                            <div class="p-6 hover:bg-gray-50 transition-colors student-item border-l-4 border-l-transparent hover:border-l-purple-500" 
                                 data-name="${student.name?.toLowerCase() || ''}"
                                 data-email="${student.email?.toLowerCase() || ''}"
                                 data-phone="${student.phone?.toLowerCase() || ''}"
                                 data-status="${student.status?.toUpperCase() || ''}"
                                 data-registration-date="${student.registrationDate || ''}">
                                <div class="flex items-center justify-between">
                                    <div class="flex items-center space-x-4">
                                        <div class="flex-shrink-0">
                                            <div class="h-12 w-12 rounded-full bg-purple-100 flex items-center justify-center">
                                                <span class="text-lg font-semibold text-purple-600">
                                                    ${(student.name || 'N/A').charAt(0).toUpperCase()}
                                                </span>
                                            </div>
                                        </div>
                                        <div class="flex-1">
                                            <h4 class="text-lg font-semibold text-gray-900">${student.name || 'N/A'}</h4>
                                            <div class="flex flex-wrap gap-2 text-sm text-gray-600 mt-1">
                                                <span class="flex items-center">
                                                    üìß ${student.email || 'Ch∆∞a c√≥ email'}
                                                </span>
                                                ${student.phone ? `<span class="flex items-center">üì± ${student.phone}</span>` : ''}
                                            </div>
                                            <p class="text-sm text-gray-500 mt-1">
                                                üìÖ ƒêƒÉng k√Ω: ${student.registrationDate || 'N/A'}
                                                ${student.expiryDate ? ` ‚Ä¢ H·∫øt h·∫°n: ${student.expiryDate}` : ''}
                                            </p>
                                        </div>
                                    </div>
                                    <div class="flex items-center space-x-3">
                                        <span class="px-3 py-1 text-xs font-medium rounded-full ${getStatusBadgeClass(student.status)}">
                                            ${getStatusText(student.status)}
                                        </span>
                                        <div class="flex space-x-1">
                                            <button onclick="viewStudentDetails('${student.id}')" 
                                                    class="px-3 py-1 text-sm bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
                                                    title="Xem chi ti·∫øt">
                                                üëÅÔ∏è Chi ti·∫øt
                                            </button>
                                            @* <button onclick="contactStudent('${student.id}', '${student.email}')" 
                                                    class="px-3 py-1 text-sm bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors"
                                                    title="Li√™n h·ªá">
                                                üí¨ Li√™n h·ªá
                                            </button> *@
                                        </div>
                                    </div>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                </div>
            `;
            
            container.innerHTML = studentsHtml;
            hideAllStates();
        }

        function filterStudents() {
            const searchTerm = document.getElementById('searchStudent').value.toLowerCase();
            const statusFilter = document.getElementById('statusFilter').value;
            const dateFilter = document.getElementById('dateFilter').value;
            const studentItems = document.querySelectorAll('.student-item');
            
            let visibleCount = 0;
            
            studentItems.forEach(item => {
                const name = item.getAttribute('data-name') || '';
                const email = item.getAttribute('data-email') || '';
                const phone = item.getAttribute('data-phone') || '';
                const status = item.getAttribute('data-status') || '';
                const registrationDate = item.getAttribute('data-registration-date') || '';
                
                // Text search (name, email, phone)
                const matchesSearch = !searchTerm || 
                    name.includes(searchTerm) || 
                    email.includes(searchTerm) || 
                    phone.includes(searchTerm);
                
                // Status filter
                const matchesStatus = !statusFilter || status === statusFilter;
                
                // Date filter
                let matchesDate = true;
                if (dateFilter && registrationDate) {
                    const regDate = new Date(registrationDate);
                    const now = new Date();
                    const daysAgo = parseInt(dateFilter);
                    const cutoffDate = new Date(now.getTime() - (daysAgo * 24 * 60 * 60 * 1000));
                    matchesDate = regDate >= cutoffDate;
                }
                
                if (matchesSearch && matchesStatus && matchesDate) {
                    item.style.display = 'block';
                    visibleCount++;
                } else {
                    item.style.display = 'none';
                }
            });
            
            updateResultsCount(visibleCount, studentItems.length);
            updateExportButton(visibleCount > 0);
        }

        function viewStudentDetails(studentId) {
            // Show loading in modal
            document.getElementById('studentDetails').innerHTML = `
                <div class="text-center py-8">
                    <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600 mx-auto mb-4"></div>
                    <p>ƒêang t·∫£i th√¥ng tin h·ªçc vi√™n...</p>
                </div>
            `;
            document.getElementById('studentModal').classList.remove('hidden');
            
            // Load student details via API
            fetch(`@Url.Action("GetStudentDetails", "Trainer")?studentId=${studentId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const student = data.data;
                        document.getElementById('studentDetails').innerHTML = `
                            <div class="space-y-6">
                                <!-- Student Header -->
                                <div class="flex items-center space-x-4 p-4 bg-gradient-to-r from-purple-50 to-blue-50 rounded-lg">
                                    <div class="h-16 w-16 rounded-full bg-purple-100 flex items-center justify-center">
                                        ${student.avatar ? 
                                            `<img src="${student.avatar}" alt="${student.name}" class="h-16 w-16 rounded-full object-cover">` :
                                            `<span class="text-2xl font-semibold text-purple-600">${(student.name || 'N/A').charAt(0).toUpperCase()}</span>`
                                        }
                                    </div>
                                    <div class="flex-1">
                                        <h4 class="text-xl font-semibold text-gray-900">${student.name || 'N/A'}</h4>
                                        <p class="text-gray-600">${student.email || 'Ch∆∞a c√≥ email'}</p>
                                        <p class="text-sm text-gray-500">Tham gia t·ª´ ${student.joinDate || 'N/A'}</p>
                                    </div>
                                </div>

                                <!-- Personal Information -->
                                <div>
                                    <h5 class="text-lg font-semibold text-gray-900 mb-3">üìã Th√¥ng tin c√° nh√¢n</h5>
                                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                                        <div class="p-3 bg-gray-50 rounded">
                                            <p class="font-medium text-gray-700">üìß Email:</p>
                                            <p class="text-gray-900">${student.email || 'Ch∆∞a c√≥ email'}</p>
                                        </div>
                                        <div class="p-3 bg-gray-50 rounded">
                                            <p class="font-medium text-gray-700">üì± S·ªë ƒëi·ªán tho·∫°i:</p>
                                            <p class="text-gray-900">${student.phone || 'Ch∆∞a c√≥'}</p>
                                        </div>
                                        <div class="p-3 bg-gray-50 rounded">
                                            <p class="font-medium text-gray-700">üéÇ Ng√†y sinh:</p>
                                            <p class="text-gray-900">${student.dateOfBirth || 'Ch∆∞a c√≥'}</p>
                                        </div>
                                        <div class="p-3 bg-gray-50 rounded">
                                            <p class="font-medium text-gray-700">üë§ Gi·ªõi t√≠nh:</p>
                                            <p class="text-gray-900">${student.gender || 'Ch∆∞a c√≥'}</p>
                                        </div>
                                        <div class="p-3 bg-gray-50 rounded md:col-span-2">
                                            <p class="font-medium text-gray-700">üè† ƒê·ªãa ch·ªâ:</p>
                                            <p class="text-gray-900">${student.address || 'Ch∆∞a c√≥'}</p>
                                        </div>
                                    </div>
                                </div>

                                <!-- Class Registrations -->
                                <div>
                                    <h5 class="text-lg font-semibold text-gray-900 mb-3">üéì L·ªõp h·ªçc ƒë√£ ƒëƒÉng k√Ω</h5>
                                    ${student.registrations && student.registrations.length > 0 ? `
                                        <div class="space-y-3">
                                            ${student.registrations.map(reg => `
                                                <div class="flex items-center justify-between p-3 border border-gray-200 rounded-lg">
                                                    <div>
                                                        <h6 class="font-medium text-gray-900">${reg.className}</h6>
                                                        <p class="text-sm text-gray-600">
                                                            ${reg.registrationDate} - ${reg.expiryDate}
                                                        </p>
                                                    </div>
                                                    <span class="px-3 py-1 text-xs font-medium rounded-full ${getStatusBadgeClass(reg.status)}">
                                                        ${getStatusText(reg.status)}
                                                    </span>
                                                </div>
                                            `).join('')}
                                        </div>
                                    ` : `
                                        <p class="text-gray-500 text-center py-4">Ch∆∞a ƒëƒÉng k√Ω l·ªõp h·ªçc n√†o</p>
                                    `}
                                </div>

                                <!-- Action Buttons -->
                                <div class="flex justify-center space-x-3 pt-4 border-t border-gray-200">
                                    @* <button onclick="contactStudent('${student.id}', '${student.email}')" 
                                            class="px-4 py-2 bg-green-600 text-white text-sm rounded-md hover:bg-green-700 transition-colors">
                                        üí¨ Li√™n h·ªá
                                    </button> *@
                                    <button onclick="closeStudentModal()" 
                                            class="px-4 py-2 bg-gray-600 text-white text-sm rounded-md hover:bg-gray-700 transition-colors">
                                        ‚úñÔ∏è ƒê√≥ng
                                    </button>
                                </div>
                            </div>
                        `;
                    } else {
                        document.getElementById('studentDetails').innerHTML = `
                            <div class="text-center py-8">
                                <div class="text-red-500 text-4xl mb-4">‚ö†Ô∏è</div>
                                <h4 class="text-lg font-semibold text-gray-900 mb-2">C√≥ l·ªói x·∫£y ra</h4>
                                <p class="text-gray-600 mb-4">${data.message || 'Kh√¥ng th·ªÉ t·∫£i th√¥ng tin h·ªçc vi√™n.'}</p>
                                <button onclick="closeStudentModal()" 
                                        class="px-4 py-2 bg-gray-600 text-white text-sm rounded-md hover:bg-gray-700 transition-colors">
                                    ƒê√≥ng
                                </button>
                            </div>
                        `;
                    }
                })
                .catch(error => {
                    console.error('Error loading student details:', error);
                    document.getElementById('studentDetails').innerHTML = `
                        <div class="text-center py-8">
                            <div class="text-red-500 text-4xl mb-4">‚ö†Ô∏è</div>
                            <h4 class="text-lg font-semibold text-gray-900 mb-2">C√≥ l·ªói x·∫£y ra</h4>
                            <p class="text-gray-600 mb-4">Kh√¥ng th·ªÉ t·∫£i th√¥ng tin h·ªçc vi√™n. Vui l√≤ng th·ª≠ l·∫°i.</p>
                            <button onclick="closeStudentModal()" 
                                    class="px-4 py-2 bg-gray-600 text-white text-sm rounded-md hover:bg-gray-700 transition-colors">
                                ƒê√≥ng
                            </button>
                        </div>
                    `;
                });
        }

        function closeStudentModal() {
            document.getElementById('studentModal').classList.add('hidden');
        }

        function showDefaultState() {
            hideAllStates();
            document.getElementById('studentsContainer').innerHTML = `
                <div class="bg-white rounded-lg shadow-md p-12 text-center">
                    <svg class="w-16 h-16 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                    </svg>
                    <h3 class="text-lg font-semibold text-gray-900 mb-2">Ch·ªçn l·ªõp h·ªçc ƒë·ªÉ xem h·ªçc vi√™n</h3>
                    <p class="text-gray-600">Vui l√≤ng ch·ªçn m·ªôt l·ªõp h·ªçc t·ª´ danh s√°ch tr√™n ƒë·ªÉ xem danh s√°ch h·ªçc vi√™n.</p>
                </div>
            `;
        }

        function showLoadingState() {
            hideAllStates();
            document.getElementById('studentsContainer').innerHTML = `
                <div class="bg-white rounded-lg shadow-md p-12 text-center">
                    <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600 mx-auto mb-4"></div>
                    <p class="text-gray-600">ƒêang t·∫£i danh s√°ch h·ªçc vi√™n...</p>
                </div>
            `;
        }

        function showEmptyState() {
            hideAllStates();
            document.getElementById('studentsContainer').innerHTML = `
                <div class="bg-white rounded-lg shadow-md p-12 text-center">
                    <svg class="w-16 h-16 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                    </svg>
                    <h3 class="text-lg font-semibold text-gray-900 mb-2">Ch∆∞a c√≥ h·ªçc vi√™n n√†o</h3>
                    <p class="text-gray-600">L·ªõp h·ªçc n√†y ch∆∞a c√≥ h·ªçc vi√™n ƒëƒÉng k√Ω.</p>
                </div>
            `;
        }

        function showError(message) {
            hideAllStates();
            document.getElementById('studentsContainer').innerHTML = `
                <div class="bg-white rounded-lg shadow-md p-12 text-center">
                    <svg class="w-16 h-16 mx-auto mb-4 text-red-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    <h3 class="text-lg font-semibold text-gray-900 mb-2">C√≥ l·ªói x·∫£y ra</h3>
                    <p class="text-gray-600">${message}</p>
                    <button onclick="loadStudents()" class="mt-4 px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 transition-colors">
                        Th·ª≠ l·∫°i
                    </button>
                </div>
            `;
        }

        function hideAllStates() {
            // This function is called when displaying students to hide other states
        }

        // Helper functions
        function getStatusBadgeClass(status) {
            switch(status?.toUpperCase()) {
                case 'ACTIVE': return 'bg-green-100 text-green-800';
                case 'INACTIVE': return 'bg-gray-100 text-gray-800';
                case 'EXPIRED': return 'bg-red-100 text-red-800';
                default: return 'bg-gray-100 text-gray-800';
            }
        }
        
        function getStatusText(status) {
            switch(status?.toUpperCase()) {
                case 'ACTIVE': return 'ƒêang ho·∫°t ƒë·ªông';
                case 'INACTIVE': return 'Kh√¥ng ho·∫°t ƒë·ªông';
                case 'EXPIRED': return 'H·∫øt h·∫°n';
                default: return 'Kh√¥ng x√°c ƒë·ªãnh';
            }
        }
        
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }
        
        function handleFilterChange() {
            const classId = document.getElementById('classSelect').value;
            if (classId) {
                loadStudents();
            } else {
                loadAllStudents();
            }
        }
        
        function loadAllStudents() {
            showLoadingState();
            // This would typically make multiple API calls to get students from all classes
            // For now, we'll show a message to select a class
            showDefaultState();
        }
        
        function clearAllFilters() {
            document.getElementById('classSelect').value = '';
            document.getElementById('searchStudent').value = '';
            document.getElementById('statusFilter').value = '';
            document.getElementById('dateFilter').value = '';
            showDefaultState();
            updateResultsCount(0, 0);
            updateExportButton(false);
        }
        
        function refreshAllData() {
            const classId = document.getElementById('classSelect').value;
            if (classId) {
                loadStudents();
            } else {
                loadAllStudents();
            }
        }
        
        function updateResultsCount(visible, total) {
            const countElement = document.getElementById('resultsCount');
            if (total > 0) {
                countElement.textContent = `Hi·ªÉn th·ªã ${visible} / ${total} h·ªçc vi√™n`;
            } else {
                countElement.textContent = '';
            }
        }
        
        function updateExportButton(enabled) {
            const exportBtn = document.getElementById('exportStudents');
            exportBtn.disabled = !enabled;
            exportBtn.classList.toggle('opacity-50', !enabled);
        }
        
        function exportToExcel() {
            const visibleStudents = Array.from(document.querySelectorAll('.student-item:not([style*="display: none"])'));
            if (visibleStudents.length === 0) {
                alert('Kh√¥ng c√≥ h·ªçc vi√™n n√†o ƒë·ªÉ xu·∫•t!');
                return;
            }
            
            // Create CSV content
            let csvContent = 'T√™n,Email,ƒêi·ªán tho·∫°i,Tr·∫°ng th√°i,Ng√†y ƒëƒÉng k√Ω\n';
            visibleStudents.forEach(item => {
                const name = item.getAttribute('data-name') || '';
                const email = item.getAttribute('data-email') || '';
                const phone = item.getAttribute('data-phone') || '';
                const status = getStatusText(item.getAttribute('data-status'));
                const regDate = item.getAttribute('data-registration-date') || '';
                
                csvContent += `"${name}","${email}","${phone}","${status}","${regDate}"\n`;
            });
            
            // Download file
            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            const url = URL.createObjectURL(blob);
            link.setAttribute('href', url);
            link.setAttribute('download', `students_${new Date().toISOString().split('T')[0]}.csv`);
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
        
        function contactStudent(studentId, email) {
            if (email && email !== 'Ch∆∞a c√≥ email') {
                window.location.href = `mailto:${email}?subject=Li√™n h·ªá t·ª´ hu·∫•n luy·ªán vi√™n&body=Xin ch√†o,\n\n`;
            } else {
                alert('H·ªçc vi√™n n√†y ch∆∞a c√≥ ƒë·ªãa ch·ªâ email!');
            }
        }

        // Close modal when clicking outside
        document.getElementById('studentModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeStudentModal();
            }
        });
    </script>
}
