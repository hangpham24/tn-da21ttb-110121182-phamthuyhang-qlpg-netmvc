@model IEnumerable<GymManagement.Web.Models.DTOs.NguoiDungWithSubscriptionDto>
@{
    ViewData["Title"] = "Qu·∫£n l√Ω ng∆∞·ªùi d√πng";
    Layout = "_Layout";
    var loaiNguoiDung = ViewBag.LoaiNguoiDung as string;
    var searchTerm = ViewBag.SearchTerm as string;

    string pageTitle = loaiNguoiDung switch
    {
        "THANHVIEN" => "Qu·∫£n l√Ω th√†nh vi√™n",
        "HLV" => "Qu·∫£n l√Ω hu·∫•n luy·ªán vi√™n",
        "ADMIN" => "Qu·∫£n l√Ω qu·∫£n tr·ªã vi√™n",
        "VANGLAI" => "Qu·∫£n l√Ω kh√°ch v√£ng lai",
        _ => "Qu·∫£n l√Ω ng∆∞·ªùi d√πng"
    };
}

@* CSRF Token for AJAX requests *@
<form id="csrfForm" style="display: none;">
    @Html.AntiForgeryToken()
</form>

<div class="min-h-screen bg-gray-50">
    <!-- Header Section -->
    <div class="bg-white border-b border-gray-200 shadow-sm">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex items-center justify-between py-6">
                <div class="flex items-center space-x-4">
                    <h1 class="text-3xl font-bold text-gray-900">@pageTitle</h1>
                    @* <span class="bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-0.5 rounded-full">
                        @Model.Count() ng∆∞·ªùi d√πng
                    </span> *@
                </div>
                <div class="flex space-x-3">
                    @if (ViewBag.ExpiringUsersCount != null && (int)ViewBag.ExpiringUsersCount > 0)
                    {
                        <button id="sendExpiryNotificationBtn" onclick="sendExpiryNotifications()"
                                class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-orange-600 hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 animate-pulse">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                            ‚è≥ Th√¥ng b√°o gia h·∫°n (@ViewBag.ExpiringUsersCount)
                        </button>
                    }
                    @* <button onclick="openWalkInModal()" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                        üö∂ Kh√°ch V√£ng Lai
                    </button> *@

                    <a href="@Url.Action("Create", "User")" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                    </svg>
                        Th√™m ng∆∞·ªùi d√πng
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">

        @* Expiry Warning Alert *@
        @if (ViewBag.ExpiringUsersCount != null && (int)ViewBag.ExpiringUsersCount > 0)
        {
            var expiringUsers = ViewBag.ExpiringUsers as List<GymManagement.Web.Models.DTOs.NguoiDungWithSubscriptionDto>;
            <div class="mb-6 bg-orange-50 border-l-4 border-orange-400 p-4 rounded-md">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <svg class="h-5 w-5 text-orange-400" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                        </svg>
                    </div>
                    <div class="ml-3 flex-1">
                        <h3 class="text-sm font-medium text-orange-800">
                            ‚è≥ C·∫£nh b√°o: C√≥ @ViewBag.ExpiringUsersCount th√†nh vi√™n s·∫Øp h·∫øt h·∫°n g√≥i t·∫≠p trong 7 ng√†y t·ªõi
                        </h3>
                        <div class="mt-2 text-sm text-orange-700">
                            <p>Danh s√°ch th√†nh vi√™n c·∫ßn gia h·∫°n:</p>
                            <ul class="mt-1 list-disc list-inside">
                                @if (expiringUsers != null)
                                {
                                    @foreach (var user in expiringUsers.Take(5))
                                    {
                                        var daysRemaining = user.PackageExpiryDate.HasValue ? (int)(user.PackageExpiryDate.Value - DateTime.Now).TotalDays : 0;
                                        <li class="text-xs">
                                            <strong>@($"{user.Ho} {user.Ten}".Trim())</strong> - @(user.ActivePackage?.TenGoi)
                                            (c√≤n <span class="@(daysRemaining <= 3 ? "text-red-600 font-bold" : daysRemaining <= 7 ? "text-orange-600 font-medium" : "")">@daysRemaining ng√†y</span>)
                                        </li>
                                    }
                                    @if (expiringUsers.Count > 5)
                                    {
                                        <li class="text-xs text-gray-600">... v√† @(expiringUsers.Count - 5) th√†nh vi√™n kh√°c</li>
                                    }
                                }
                            </ul>
                        </div>
                    </div>
                    <div class="ml-3 flex-shrink-0">
                        <button onclick="sendExpiryNotifications()"
                                class="bg-orange-600 hover:bg-orange-700 text-white text-xs font-medium px-3 py-1 rounded-md transition-colors">
                            üìß G·ª≠i th√¥ng b√°o ngay
                        </button>
                    </div>
                </div>
            </div>
        }
        @Html.AntiForgeryToken()

        <!-- Filters Card -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 mb-6">
            <div class="p-6">
                <form id="filterForm" method="get" action="@Url.Action("Index", "User")">
                    <div class="flex flex-col lg:flex-row lg:items-end gap-4">
                        <div class="flex-1">
                            <label for="searchInput" class="block text-sm font-medium text-gray-700 mb-2">T√¨m ki·∫øm</label>
                            <input type="text" id="searchInput" name="searchTerm"
                                   placeholder="T√¨m theo t√™n, email, s·ªë ƒëi·ªán tho·∫°i..."
                                   value="@searchTerm"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        </div>
                        <div>
                            <label for="loaiFilter" class="block text-sm font-medium text-gray-700 mb-2">Lo·∫°i ng∆∞·ªùi d√πng</label>
                            <select name="loaiNguoiDung" id="loaiFilter" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                            <option value="">T·∫•t c·∫£ lo·∫°i</option>
                            @if(loaiNguoiDung == "THANHVIEN")
                        {
                                <option value="THANHVIEN" selected>üë§ Th√†nh vi√™n</option>
                        }
                        else
                        {
                                <option value="THANHVIEN">üë§ Th√†nh vi√™n</option>
                        }
                            @if(loaiNguoiDung == "HLV")
                        {
                                <option value="HLV" selected>üí™ Hu·∫•n luy·ªán vi√™n</option>
                        }
                        else
                        {
                                <option value="HLV">üí™ Hu·∫•n luy·ªán vi√™n</option>
                        }
                                        @if(loaiNguoiDung == "ADMIN")
            {
                <option value="ADMIN" selected>üëî Qu·∫£n tr·ªã vi√™n</option>
            }
            else
            {
                <option value="ADMIN">üëî Qu·∫£n tr·ªã vi√™n</option>
            }
                            @if(loaiNguoiDung == "VANGLAI")
                        {
                                <option value="VANGLAI" selected>üö∂ V√£ng lai</option>
                        }
                        else
                        {
                                <option value="VANGLAI">üö∂ V√£ng lai</option>
                        }
                            </select>
                        </div>
                        @* <div>
                                <label for="statusFilter" class="block text-sm font-medium text-gray-700 mb-2">Tr·∫°ng th√°i</label>
                                <select id="statusFilter" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                                    <option value="">T·∫•t c·∫£</option>
                                    <option value="ACTIVE">‚úÖ Ho·∫°t ƒë·ªông</option>
                                    <option value="INACTIVE">‚ùå Ng·ª´ng ho·∫°t ƒë·ªông</option>
                                </select>
                            </div> *@
                        <div class="flex space-x-2">
                            <button type="submit" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.414A1 1 0 013 6.707V4z"></path>
                                </svg>
                                L·ªçc
                            </button>
                            <button type="button" onclick="clearFilters()" class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4l16 16m0-16L4 20"></path>
                                </svg>
                                X√≥a b·ªô l·ªçc
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Users Table -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200">
            @if (Model.Any())
        {
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Ng∆∞·ªùi d√πng
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                T√™n
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Th√¥ng tin li√™n h·ªá
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Lo·∫°i & Tr·∫°ng th√°i
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                G√≥i t·∫≠p hi·ªán t·∫°i
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Ng√†y tham gia
                            </th>
                                <th scope="col" class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Thao t√°c
                            </th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                            @foreach (var nguoiDung in Model)
                        {
                                <tr class="hover:bg-gray-50 transition-colors duration-200">
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="flex items-center">
                                            <div class="h-12 w-12 flex-shrink-0">
                                                @if (!string.IsNullOrEmpty(nguoiDung.AnhDaiDien))
                                                {
                                                    <img class="h-12 w-12 rounded-full object-cover border-2 border-gray-200"
                                                         src="@nguoiDung.AnhDaiDien"
                                                         alt="@nguoiDung.HoTen">
                                                }
                                            else
                                            {
                                                    <div class="h-12 w-12 rounded-full bg-gradient-to-br from-indigo-400 to-indigo-600 flex items-center justify-center text-white font-semibold text-lg">
                                                        @(string.IsNullOrEmpty(nguoiDung.Ho) ? "" : nguoiDung.Ho.Substring(0, 1))@(string.IsNullOrEmpty(nguoiDung.Ten) ? "" : nguoiDung.Ten.Substring(0, 1))
                                                    </div>
                                                }
                                            </div>
                                            <div class="ml-4">
                                                <div class="text-sm font-medium text-gray-900">@nguoiDung.HoTen</div>
                                                <div class="text-sm text-gray-500">#@nguoiDung.NguoiDungId.ToString("D4")</div>
                                                @if (!string.IsNullOrEmpty(nguoiDung.Username))
                                                {
                                                    <div class="flex items-center mt-1">
                                                        <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-green-100 text-green-800">
                                                            <span class="w-1.5 h-1.5 mr-1 rounded-full bg-green-400"></span>
                                                            @nguoiDung.Username
                                                        </span>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="mt-1">
                                                        <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-600">
                                                            <span class="w-1.5 h-1.5 mr-1 rounded-full bg-gray-400"></span>
                                                            Ch∆∞a c√≥ TK
                                                        </span>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <div class="text-sm font-medium text-gray-900">
                                            @nguoiDung.HoTen
                                        </div>
                                    </td>

                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <div class="text-sm text-gray-900">
                                            @if (!string.IsNullOrEmpty(nguoiDung.Email))
                                            {
                                                <div class="flex items-center mb-1">
                                                    <svg class="w-4 h-4 text-gray-400 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                                                    </svg>
                                                    <span class="text-sm text-gray-600">@nguoiDung.Email</span>
                                                </div>
                                            }
                                            @if (!string.IsNullOrEmpty(nguoiDung.SoDienThoai))
                                            {
                                                <div class="flex items-center">
                                                    <svg class="w-4 h-4 text-gray-400 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                                                    </svg>
                                                    <span class="text-sm text-gray-600">@nguoiDung.SoDienThoai</span>
                                                </div>
                                            }
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                        <div class="space-y-2">
                                    @{
                                                var (badgeClass, displayName, icon) = nguoiDung.LoaiNguoiDung switch
                                        {
                                            "THANHVIEN" => ("bg-blue-100 text-blue-800", "Th√†nh vi√™n", "üë§"),
                                                    "HLV" => ("bg-purple-100 text-purple-800", "Hu·∫•n luy·ªán vi√™n", "üí™"),
                                                    "ADMIN" => ("bg-green-100 text-green-800", "Qu·∫£n tr·ªã vi√™n", "üëî"),
                                            "VANGLAI" => ("bg-yellow-100 text-yellow-800", "V√£ng lai", "üö∂"),
                                                    _ => ("bg-gray-100 text-gray-800", nguoiDung.LoaiNguoiDung, "üë§")
                                        };
                                    }
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @badgeClass">
                                        <span class="mr-1">@icon</span>
                                        @displayName
                                    </span>
                                            <br>
                                            @if (nguoiDung.TrangThai == "ACTIVE")
                                    {
                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                                    <span class="w-1.5 h-1.5 mr-1.5 rounded-full bg-green-400"></span>
                                            Ho·∫°t ƒë·ªông
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                                    <span class="w-1.5 h-1.5 mr-1.5 rounded-full bg-red-400"></span>
                                                    Ng·ª´ng ho·∫°t ƒë·ªông
                                        </span>
                                    }
                                        </div>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                        @if (nguoiDung.LoaiNguoiDung == "THANHVIEN")
                                        {
                                            @if (nguoiDung.ActivePackageRegistration != null && nguoiDung.ActivePackage != null)
                                            {
                                                <div class="space-y-2">
                                                    <div class="text-sm font-medium text-gray-900">
                                                        @nguoiDung.ActivePackage.TenGoi
                                                    </div>
                                                    <div class="flex items-center space-x-2">
                                                        @{
                                                            var (statusClass, statusIcon, statusText) = nguoiDung.PackageStatus switch
                                                            {
                                                                "ACTIVE" => ("bg-green-100 text-green-800", "‚úÖ", "C√≤n hi·ªáu l·ª±c"),
                                                                "EXPIRING_SOON" => ("bg-yellow-100 text-yellow-800", "‚ö†Ô∏è", "S·∫Øp h·∫øt h·∫°n"),
                                                                "EXPIRED" => ("bg-red-100 text-red-800", "‚ùå", "ƒê√£ h·∫øt h·∫°n"),
                                                                _ => ("bg-gray-100 text-gray-800", "‚ùì", "Kh√¥ng x√°c ƒë·ªãnh")
                                                            };
                                                        }
                                                        <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium @statusClass">
                                                            @statusIcon @statusText
                                                        </span>
                                                    </div>
                                                    <div class="text-xs text-gray-500">
                                                        @if (nguoiDung.DaysRemaining.HasValue)
                                                        {
                                                            if (nguoiDung.DaysRemaining.Value >= 0)
                                                            {
                                                                <span>C√≤n @nguoiDung.DaysRemaining.Value ng√†y</span>
                                                            }
                                                            else
                                                            {
                                                                <span>H·∫øt h·∫°n @Math.Abs(nguoiDung.DaysRemaining.Value) ng√†y tr∆∞·ªõc</span>
                                                            }
                                                        }
                                                        <br>
                                                        <span>H·∫øt h·∫°n: @nguoiDung.PackageExpiryDate?.ToString("dd/MM/yyyy")</span>
                                                    </div>
                                                    @if (nguoiDung.ActiveClassCount > 0)
                                                    {
                                                        <div class="text-xs text-blue-600">
                                                            + @nguoiDung.ActiveClassCount l·ªõp h·ªçc
                                                        </div>
                                                    }
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="text-center py-2">
                                                    <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-600">
                                                        üì¶ Ch∆∞a c√≥ g√≥i t·∫≠p
                                                    </span>
                                                    @if (nguoiDung.ActiveClassCount > 0)
                                                    {
                                                        <div class="text-xs text-blue-600 mt-1">
                                                            @nguoiDung.ActiveClassCount l·ªõp h·ªçc
                                                        </div>
                                                    }
                                                </div>
                                            }
                                        }
                                        else
                                        {
                                            <div class="text-center py-2">
                                                <span class="text-xs text-gray-400">
                                                    @(nguoiDung.LoaiNguoiDung switch
                                                    {
                                                        "HLV" => "üë®‚Äçüè´ Hu·∫•n luy·ªán vi√™n",
                                                        "ADMIN" => "üëî Qu·∫£n tr·ªã vi√™n",
                                                        "VANGLAI" => "üö∂ Kh√°ch v√£ng lai",
                                                        _ => "N/A"
                                                    })
                                                </span>
                                            </div>
                                        }
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                        <div class="flex flex-col">
                                            <span>@nguoiDung.NgayThamGia.ToString("dd/MM/yyyy")</span>
                                            <span class="text-xs text-gray-400">
                                                @{
                                                    var daysSinceJoined = DateOnly.FromDateTime(DateTime.Today).DayNumber - nguoiDung.NgayThamGia.DayNumber;
                                                }
                                                @daysSinceJoined ng√†y tr∆∞·ªõc
                                            </span>
                                        </div>
                                </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-center text-sm font-medium">
                                        <div class="relative inline-block text-left">
                                            <!-- Three dots menu button -->
                                            <button onclick="toggleActionDropdown(@nguoiDung.NguoiDungId)"
                                                    class="text-gray-600 hover:text-gray-900 hover:bg-gray-50 p-2 rounded-lg transition-colors duration-200"
                                                    title="Thao t√°c">
                                                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                                                    <path d="M10 6a2 2 0 110-4 2 2 0 010 4zM10 12a2 2 0 110-4 2 2 0 010 4zM10 18a2 2 0 110-4 2 2 0 010 4z"></path>
                                                </svg>
                                            </button>

                                            <!-- Dropdown menu -->
                                            <div id="actionDropdown@(nguoiDung.NguoiDungId)" class="hidden absolute right-0 mt-2 w-56 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 z-20">
                                                <div class="py-1">
                                                    <!-- View Details -->
                                                    <a href="@Url.Action("Details", new { id = nguoiDung.NguoiDungId })"
                                                       class="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50">
                                                        <svg class="w-4 h-4 mr-3 text-indigo-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                                                        </svg>
                                                        Xem chi ti·∫øt
                                                    </a>

                                                    <!-- Edit -->
                                                    <a href="@Url.Action("Edit", new { id = nguoiDung.NguoiDungId })"
                                                       class="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50">
                                                        <svg class="w-4 h-4 mr-3 text-yellow-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                                        </svg>
                                                        Ch·ªânh s·ª≠a
                                                    </a>

                                                    <!-- Create Account (if no account) -->
                                                    @if (!nguoiDung.HasAccount)
                                                    {
                                                        <button onclick="createAccountForUser(@nguoiDung.NguoiDungId, '@nguoiDung.HoTen')"
                                                                class="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-50">
                                                            <svg class="w-4 h-4 mr-3 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z"></path>
                                                            </svg>
                                                            T·∫°o t√†i kho·∫£n
                                                        </button>
                                                    }

                                                    <!-- Add Face -->
                                                    <button onclick="openFaceRegistrationModal(@nguoiDung.NguoiDungId, '@nguoiDung.HoTen')"
                                                            class="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-50">
                                                        <svg class="w-4 h-4 mr-3 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                                                        </svg>
                                                        Th√™m khu√¥n m·∫∑t
                                                    </button>

                                                    <!-- Divider -->
                                                    <div class="border-t border-gray-100 my-1"></div>

                                                    <!-- Delete Face -->
                                                    <button onclick="deleteFace(@nguoiDung.NguoiDungId, '@nguoiDung.HoTen')"
                                                            class="flex items-center w-full px-4 py-2 text-sm text-orange-700 hover:bg-orange-50">
                                                        <svg class="w-4 h-4 mr-3 text-orange-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                                        </svg>
                                                        X√≥a khu√¥n m·∫∑t
                                                    </button>

                                                    <!-- Delete User (Temporary) -->
                                                    <button onclick="deactivateUser(@nguoiDung.NguoiDungId, '@nguoiDung.HoTen')"
                                                            class="flex items-center w-full px-4 py-2 text-sm @(nguoiDung.TrangThai == "INACTIVE" ? "text-green-600 hover:bg-green-50" : "text-red-600 hover:bg-red-50")">
                                                        @if (nguoiDung.TrangThai == "INACTIVE")
                                                        {
                                                            <svg class="w-4 h-4 mr-3 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                                            </svg>
                                                            <span>K√≠ch ho·∫°t</span>
                                                        }
                                                        else
                                                        {
                                                            <svg class="w-4 h-4 mr-3 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728L5.636 5.636m12.728 12.728L18.364 5.636M5.636 18.364l12.728-12.728"></path>
                                                            </svg>
                                                            <span>V√¥ hi·ªáu h√≥a</span>
                                                        }
                                                    </button>

                                                    <!-- Delete User (Permanent) -->
                                                    <button onclick="deleteUser(@nguoiDung.NguoiDungId, '@nguoiDung.HoTen')"
                                                            class="flex items-center w-full px-4 py-2 text-sm text-red-700 hover:bg-red-50">
                                                        <svg class="w-4 h-4 mr-3 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                                        </svg>
                                                        X√≥a vƒ©nh vi·ªÖn
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            @if (ViewBag.TotalPages > 1)
            {
                <div class="bg-white px-4 py-3 border-t border-gray-200 sm:px-6">
                    <div class="flex items-center justify-between">
                        <div class="flex-1 flex justify-between sm:hidden">
                            @if (ViewBag.HasPreviousPage)
                            {
                                <a href="@Url.Action("Index", "User", new { loaiNguoiDung = ViewBag.LoaiNguoiDung, searchTerm = ViewBag.SearchTerm, page = ViewBag.CurrentPage - 1 })"
                                   class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                                    Tr∆∞·ªõc
                                </a>
                            }
                            else
                            {
                                <span class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-400 bg-gray-100 cursor-not-allowed">
                                    Tr∆∞·ªõc
                                </span>
                            }
                            @if (ViewBag.HasNextPage)
                            {
                                <a href="@Url.Action("Index", "User", new { loaiNguoiDung = ViewBag.LoaiNguoiDung, searchTerm = ViewBag.SearchTerm, page = ViewBag.CurrentPage + 1 })"
                                   class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                                    Sau
                                </a>
                            }
                            else
                            {
                                <span class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-400 bg-gray-100 cursor-not-allowed">
                                    Sau
                                </span>
                            }
                        </div>
                        <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                            <div>
                                <p class="text-sm text-gray-700">
                                    Hi·ªÉn th·ªã
                                    <span class="font-medium">@((ViewBag.CurrentPage - 1) * ViewBag.PageSize + 1)</span>
                                    ƒë·∫øn
                                    <span class="font-medium">@Math.Min(ViewBag.CurrentPage * ViewBag.PageSize, ViewBag.TotalItems)</span>
                                    trong t·ªïng s·ªë
                                    <span class="font-medium">@ViewBag.TotalItems</span>
                                    ng∆∞·ªùi d√πng
                                </p>
                            </div>
                            <div>
                                <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                                    @if (ViewBag.HasPreviousPage)
                                    {
                                        <a href="@Url.Action("Index", "User", new { loaiNguoiDung = ViewBag.LoaiNguoiDung, searchTerm = ViewBag.SearchTerm, page = ViewBag.CurrentPage - 1 })"
                                           class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                                            <span class="sr-only">Trang tr∆∞·ªõc</span>
                                            <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                                                <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                                            </svg>
                                        </a>
                                    }
                                    else
                                    {
                                        <span class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-gray-100 text-sm font-medium text-gray-400 cursor-not-allowed">
                                            <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                                                <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                                            </svg>
                                        </span>
                                    }

                                    @for (int i = Math.Max(1, ViewBag.CurrentPage - 2); i <= Math.Min(ViewBag.TotalPages, ViewBag.CurrentPage + 2); i++)
                                    {
                                        if (i == ViewBag.CurrentPage)
                                        {
                                            <span class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-blue-50 text-sm font-medium text-blue-600">
                                                @i
                                            </span>
                                        }
                                        else
                                        {
                                            <a href="@Url.Action("Index", "User", new { loaiNguoiDung = ViewBag.LoaiNguoiDung, searchTerm = ViewBag.SearchTerm, page = i })"
                                               class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50">
                                                @i
                                            </a>
                                        }
                                    }

                                    @if (ViewBag.HasNextPage)
                                    {
                                        <a href="@Url.Action("Index", "User", new { loaiNguoiDung = ViewBag.LoaiNguoiDung, searchTerm = ViewBag.SearchTerm, page = ViewBag.CurrentPage + 1 })"
                                           class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                                            <span class="sr-only">Trang sau</span>
                                            <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                                                <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                                            </svg>
                                        </a>
                                    }
                                    else
                                    {
                                        <span class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-gray-100 text-sm font-medium text-gray-400 cursor-not-allowed">
                                            <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                                                <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                                            </svg>
                                        </span>
                                    }
                                </nav>
                            </div>
                        </div>
                    </div>
                </div>
            }
            }
            else
            {
                <div class="text-center py-12">
                    <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.196-2.196M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.196-2.196M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                                            </svg>
                    <h3 class="mt-2 text-sm font-medium text-gray-900">Kh√¥ng c√≥ ng∆∞·ªùi d√πng</h3>
                    <p class="mt-1 text-sm text-gray-500">B·∫Øt ƒë·∫ßu b·∫±ng c√°ch t·∫°o m·ªôt ng∆∞·ªùi d√πng m·ªõi.</p>
                    <div class="mt-6">
                        <a href="@Url.Action("Create", "User")" class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                                            </svg>
                            Th√™m ng∆∞·ªùi d√πng
                                        </a>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Face Registration Modal -->
<div id="faceRegistrationModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50 hidden">
    <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-md bg-white">
        <div class="mt-3">
            <!-- Modal Header -->
            <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-bold text-gray-900">üîç ƒêƒÉng K√Ω Khu√¥n M·∫∑t</h3>
                <button onclick="closeFaceRegistrationModal()" class="text-gray-400 hover:text-gray-600">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>

            <!-- Member Info -->
            <div id="selectedMemberInfo" class="bg-blue-50 border border-blue-200 rounded-lg p-3 mb-4">
                <div class="text-sm font-medium text-blue-800">ƒêang ƒëƒÉng k√Ω cho: <span id="selectedMemberName"></span></div>
            </div>

            <!-- Camera Section -->
            <div class="mb-4">
                <div class="relative bg-gray-100 rounded-lg overflow-hidden" style="height: 300px;">
                    <video id="modalRegisterVideo" class="w-full h-full object-cover" autoplay muted></video>
                    <canvas id="modalRegisterCanvas" class="absolute top-0 left-0 w-full h-full pointer-events-none"></canvas>

                    <!-- Status Overlay -->
                    <div class="absolute bottom-4 left-4 right-4">
                        <div class="bg-black bg-opacity-75 text-white px-3 py-2 rounded-lg text-sm">
                            <div id="modalRegisterCameraStatus">üì∑ Camera not started</div>
                            <div id="modalRegisterFaceStatus">üëÅÔ∏è No face detected</div>
                            <div id="modalRegisterQualityStatus">‚≠ê Quality: Not assessed</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Controls -->
            <div class="flex space-x-3 mb-4">
                <button id="modalStartRegisterCameraBtn" class="flex-1 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium transition-colors">
                    üì∑ Start Camera
                </button>
                <button id="modalStopRegisterCameraBtn" class="flex-1 bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg font-medium transition-colors">
                    ‚èπÔ∏è Stop Camera
                </button>
            </div>

            <button id="modalRegisterButton" class="w-full bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-medium transition-colors" disabled>
                üìù ƒêƒÉng K√Ω Khu√¥n M·∫∑t
            </button>

            <!-- Results -->
            <div id="modalRegisterResults" class="mt-4 hidden">
                <div class="bg-gray-50 rounded-lg p-4">
                    <h4 class="font-medium text-gray-900 mb-2">K·∫øt qu·∫£ ƒëƒÉng k√Ω:</h4>
                    <div id="modalRegisterResultContent"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Walk-in Registration Modal -->
<div id="walkInModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50 hidden">
    <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-2/3 lg:w-1/2 shadow-lg rounded-md bg-white">
        <div class="mt-3">
            <!-- Modal Header -->
            <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-bold text-gray-900">üö∂ ƒêƒÉng K√Ω Kh√°ch V√£ng Lai</h3>
                <button onclick="closeWalkInModal()" class="text-gray-400 hover:text-gray-600">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>

            <!-- Walk-in Form - Step 1: Information -->
            <div id="walkInStep1" class="space-y-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">H·ªç v√† t√™n *</label>
                    <input type="text" id="modalGuestName" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="Nguy·ªÖn VƒÉn A">
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">S·ªë ƒëi·ªán tho·∫°i *</label>
                    <input type="tel" id="modalGuestPhone" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="0123456789">
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Email (t√πy ch·ªçn)</label>
                    <input type="email" id="modalGuestEmail" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="example@email.com">
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Ghi ch√∫</label>
                    <textarea id="modalGuestNote" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="Ghi ch√∫ th√™m..."></textarea>
                </div>

                <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                    <div class="flex justify-between items-center mb-2">
                        <span class="text-sm font-medium text-blue-800">V√© t·∫≠p m·ªôt bu·ªïi</span>
                        <span class="text-lg font-bold text-blue-900">50,000 VNƒê</span>
                    </div>
                    <p class="text-xs text-blue-600">Bao g·ªìm: S·ª≠ d·ª•ng thi·∫øt b·ªã, ph√≤ng t·∫≠p, khƒÉn t·∫Øm</p>
                </div>

                <button id="continueToPaymentBtn" class="w-full bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium transition-colors">
                    üí≥ Ti·∫øp t·ª•c thanh to√°n
                </button>
            </div>

            <!-- Walk-in Form - Step 2: Payment Method -->
            <div id="walkInStep2" class="space-y-4 hidden">
                <!-- Customer Info Summary -->
                <div class="bg-gray-50 border border-gray-200 rounded-lg p-4">
                    <h4 class="font-medium text-gray-900 mb-2">Th√¥ng tin kh√°ch h√†ng:</h4>
                    <div class="text-sm text-gray-600">
                        <div id="customerSummaryName"></div>
                        <div id="customerSummaryPhone"></div>
                    </div>
                </div>

                <!-- Payment Method Selection -->
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-3">Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n *</label>
                    <div class="space-y-3">
                        <label class="flex items-center p-3 border border-gray-300 rounded-lg cursor-pointer hover:bg-gray-50">
                            <input type="radio" name="paymentMethod" value="CASH" class="mr-3" checked>
                            <div class="flex items-center">
                                <span class="text-2xl mr-3">üíµ</span>
                                <div>
                                    <div class="font-medium">Ti·ªÅn m·∫∑t</div>
                                    <div class="text-sm text-gray-500">Thanh to√°n tr·ª±c ti·∫øp t·∫°i qu·∫ßy</div>
                                </div>
                            </div>
                        </label>

                        <label class="flex items-center p-3 border border-gray-300 rounded-lg cursor-pointer hover:bg-gray-50">
                            <input type="radio" name="paymentMethod" value="VNPAY" class="mr-3">
                            <div class="flex items-center">
                                <span class="text-2xl mr-3">üè¶</span>
                                <div>
                                    <div class="font-medium">VNPay</div>
                                    <div class="text-sm text-gray-500">Thanh to√°n online qua VNPay</div>
                                </div>
                            </div>
                        </label>
                    </div>
                </div>

                <!-- Price Summary -->
                <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                    <div class="flex justify-between items-center mb-2">
                        <span class="text-sm font-medium text-blue-800">T·ªïng thanh to√°n</span>
                        <span class="text-xl font-bold text-blue-900">50,000 VNƒê</span>
                    </div>
                    <p class="text-xs text-blue-600">V√© t·∫≠p m·ªôt bu·ªïi - Bao g·ªìm: S·ª≠ d·ª•ng thi·∫øt b·ªã, ph√≤ng t·∫≠p, khƒÉn t·∫Øm</p>
                </div>

                <!-- Action Buttons -->
                <div class="flex space-x-3">
                    <button id="backToInfoBtn" class="flex-1 bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg font-medium transition-colors">
                        ‚Üê Quay l·∫°i
                    </button>
                    <button id="processPaymentBtn" class="flex-1 bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-medium transition-colors">
                        üí≥ Thanh to√°n & Check-in
                    </button>
                </div>
            </div>

            <!-- Walk-in Results -->
            <div id="modalWalkInResults" class="mt-4 hidden">
                <div class="bg-gray-50 rounded-lg p-4">
                    <h4 class="font-medium text-gray-900 mb-2">K·∫øt qu·∫£ ƒëƒÉng k√Ω:</h4>
                    <div id="modalWalkInResultContent"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create Account Modal -->
<div id="createAccountModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50 hidden">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <div class="mt-3">
            <!-- Modal Header -->
            <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-bold text-gray-900">üë§ T·∫°o t√†i kho·∫£n</h3>
                <button onclick="closeCreateAccountModal()" class="text-gray-400 hover:text-gray-600">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>

            <!-- User Info -->
            <div class="mb-4 p-3 bg-gray-50 rounded-lg">
                <div class="flex items-center">
                    <div id="userAvatar" class="h-10 w-10 rounded-full bg-gradient-to-br from-indigo-400 to-indigo-600 flex items-center justify-center text-white font-semibold text-sm mr-3">
                    </div>
                    <div>
                        <div id="userName" class="text-sm font-medium text-gray-900"></div>
                        <div id="userInfo" class="text-xs text-gray-500"></div>
                    </div>
                </div>
            </div>

            <!-- Form -->
            <form id="createAccountForm">
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 mb-2">T√™n ƒëƒÉng nh·∫≠p</label>
                    <input type="text" id="accountUsername" required
                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                           placeholder="Nh·∫≠p t√™n ƒëƒÉng nh·∫≠p">
                    <p class="text-xs text-gray-500 mt-1">T√™n ƒëƒÉng nh·∫≠p ph·∫£i duy nh·∫•t trong h·ªá th·ªëng</p>
                </div>

                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 mb-2">M·∫≠t kh·∫©u</label>
                    <input type="password" id="accountPassword" required
                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                           placeholder="Nh·∫≠p m·∫≠t kh·∫©u">
                    <p class="text-xs text-gray-500 mt-1">M·∫≠t kh·∫©u t·ªëi thi·ªÉu 6 k√Ω t·ª±</p>
                </div>

                <div class="mb-6">
                    <label class="block text-sm font-medium text-gray-700 mb-2">X√°c nh·∫≠n m·∫≠t kh·∫©u</label>
                    <input type="password" id="accountPasswordConfirm" required
                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                           placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u">
                </div>

                <!-- Action Buttons -->
                <div class="flex justify-end space-x-3">
                    <button type="button" onclick="closeCreateAccountModal()"
                            class="px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        H·ªßy
                    </button>
                    <button type="submit"
                            class="px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        <svg class="w-4 h-4 mr-2 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z"></path>
                        </svg>
                        T·∫°o t√†i kho·∫£n
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>



@section Scripts {
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        // Face Registration Modal variables (h·ªçc theo FaceTest)
        let isModelLoaded = false;
        let modalRegisterStream = null;
        let modalRegisterDetectionInterval = null;
        let currentModalRegisterDescriptor = null;
        let selectedMemberId = null;
        
        // Close all dropdowns when clicking outside
        document.addEventListener('click', function(e) {
            if (!e.target.closest('.relative')) {
                const dropdowns = document.querySelectorAll('[id^="actionDropdown"]');
                dropdowns.forEach(dropdown => dropdown.classList.add('hidden'));
            }
        });

        // Toggle action dropdown
        function toggleActionDropdown(userId) {
            const dropdown = document.getElementById(`actionDropdown${userId}`);
            // Close all other dropdowns first
            const allDropdowns = document.querySelectorAll('[id^="actionDropdown"]');
            allDropdowns.forEach(d => {
                if (d.id !== `actionDropdown${userId}`) {
                    d.classList.add('hidden');
                }
            });
            // Toggle current dropdown
            dropdown.classList.toggle('hidden');
        }

    // DOM elements for modal
        let modalRegisterVideo, modalRegisterCanvas;
        let modalStartRegisterCameraBtn, modalStopRegisterCameraBtn, modalRegisterButton;
        let modalRegisterCameraStatus, modalRegisterFaceStatus, modalRegisterQualityStatus;
        function applyFilters() {
            // Use form submission instead of manual URL construction
            const form = document.getElementById('filterForm');
            const searchTerm = document.getElementById('searchInput').value.trim();
            const loaiNguoiDung = document.getElementById('loaiFilter').value;

            console.log('=== APPLY FILTERS DEBUG ===');
            console.log('Search term:', searchTerm);
            console.log('Loai nguoi dung:', loaiNguoiDung);
            console.log('Form action:', form.action);
            console.log('Form method:', form.method);

            // Add page=1 to reset pagination
            let pageInput = form.querySelector('input[name="page"]');
            if (!pageInput) {
                pageInput = document.createElement('input');
                pageInput.type = 'hidden';
                pageInput.name = 'page';
                form.appendChild(pageInput);
            }
            pageInput.value = '1';

            console.log('Submitting filter form...');
            form.submit();
        }

        function clearFilters() {
            window.location.href = '@Url.Action("Index", "User")';
        }

        function deleteUser(userId, userName) {
            if (!confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ng∆∞·ªùi d√πng "${userName}"?\n\nThao t√°c n√†y kh√¥ng th·ªÉ ho√†n t√°c.`)) {
                return;
            }

            // Get antiforgery token
            const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;

            const formData = new FormData();
            formData.append('id', userId);
            if (token) {
                formData.append('__RequestVerificationToken', token);
            }

            fetch(`@Url.Action("Delete", "User")`, {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showNotification('success', data.message);
                    setTimeout(() => {
                        location.reload();
                    }, 1500);
                } else {
                    showNotification('error', data.message || 'Kh√¥ng th·ªÉ x√≥a ng∆∞·ªùi d√πng.');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showNotification('error', 'C√≥ l·ªói x·∫£y ra khi x√≥a ng∆∞·ªùi d√πng.');
            });
        }

        function showNotification(type, message) {
            // T·∫°o notification element
            const notification = document.createElement('div');
            notification.className = `fixed top-4 right-4 z-50 p-4 rounded-md shadow-lg ${type === 'success' ? 'bg-green-500 text-white' : 'bg-red-500 text-white'}`;
            notification.textContent = message;
            document.body.appendChild(notification);

            // T·ª± ƒë·ªông ·∫©n sau 3 gi√¢y
            setTimeout(() => {
                notification.remove();
            }, 3000);
                }

        // Search on Enter key - now uses form submission
        document.getElementById('searchInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault(); // Prevent default form submission
                applyFilters();
            }
        });

        // Also handle form submission
        document.getElementById('filterForm').addEventListener('submit', function(e) {
            e.preventDefault(); // Prevent default submission
            applyFilters();
        });

        // Initialize Face Registration Modal (h·ªçc theo FaceTest)
        document.addEventListener('DOMContentLoaded', function() {
            initializeModalElements();

            // Use global models instead of loading again
            checkGlobalModels();
        });

        function initializeModalElements() {
            // Modal Face Registration elements
            modalRegisterVideo = document.getElementById('modalRegisterVideo');
            modalRegisterCanvas = document.getElementById('modalRegisterCanvas');
            modalStartRegisterCameraBtn = document.getElementById('modalStartRegisterCameraBtn');
            modalStopRegisterCameraBtn = document.getElementById('modalStopRegisterCameraBtn');
            modalRegisterButton = document.getElementById('modalRegisterButton');
            modalRegisterCameraStatus = document.getElementById('modalRegisterCameraStatus');
            modalRegisterFaceStatus = document.getElementById('modalRegisterFaceStatus');
            modalRegisterQualityStatus = document.getElementById('modalRegisterQualityStatus');

            // Setup modal event listeners
            if (modalStartRegisterCameraBtn) modalStartRegisterCameraBtn.addEventListener('click', startModalRegisterCamera);
            if (modalStopRegisterCameraBtn) modalStopRegisterCameraBtn.addEventListener('click', stopModalRegisterCamera);
            if (modalRegisterButton) modalRegisterButton.addEventListener('click', testModalRegisterFace);

            // Walk-in modal buttons
            const continueToPaymentBtn = document.getElementById('continueToPaymentBtn');
            const backToInfoBtn = document.getElementById('backToInfoBtn');
            const processPaymentBtn = document.getElementById('processPaymentBtn');

            if (continueToPaymentBtn) continueToPaymentBtn.addEventListener('click', showPaymentStep);
            if (backToInfoBtn) backToInfoBtn.addEventListener('click', showInfoStep);
            if (processPaymentBtn) processPaymentBtn.addEventListener('click', processWalkInPayment);
        }

        // Check Global Models (kh√¥ng load l·∫°i)
        async function checkGlobalModels() {
            try {
                console.log('üîç Checking global Face-API models for User Management...');

                if (window.FaceAPIGlobal) {
                    if (window.FaceAPIGlobal.isReady()) {
                        console.log('‚úÖ Global Face-API models already ready!');
                        isModelLoaded = true;
                        return;
                    }

                    console.log('‚è≥ Waiting for global Face-API models...');
                    await window.FaceAPIGlobal.waitForModels(30000);
                    isModelLoaded = true;
                    console.log('‚úÖ Global Face-API models ready for User Management');
                } else {
                    console.log('‚ùå Global Face-API manager not available');
                    // Listen for global models loaded event
                    window.addEventListener('faceapi-models-loaded', () => {
                        console.log('‚úÖ Global Face-API models loaded via event');
                        isModelLoaded = true;
                    });
                }
            } catch (error) {
                console.error('‚ùå Error checking global models:', error);
            }
        }

        // Modal Management Functions
        function openFaceRegistrationModal(memberId, memberName) {
            console.log('üîç Opening face registration modal for:', memberName);
            selectedMemberId = memberId;
            document.getElementById('selectedMemberName').textContent = memberName;
            document.getElementById('faceRegistrationModal').classList.remove('hidden');
        }

        function closeFaceRegistrationModal() {
            console.log('‚ùå Closing face registration modal');
            document.getElementById('faceRegistrationModal').classList.add('hidden');
            stopModalRegisterCamera();
            selectedMemberId = null;
        }

        function openWalkInModal() {
            console.log('üö∂ Opening walk-in modal');
            document.getElementById('walkInModal').classList.remove('hidden');
        }

        function closeWalkInModal() {
            console.log('‚ùå Closing walk-in modal');
            document.getElementById('walkInModal').classList.add('hidden');

            // Reset to step 1
            showInfoStep();

            // Clear form
            document.getElementById('modalGuestName').value = '';
            document.getElementById('modalGuestPhone').value = '';
            document.getElementById('modalGuestEmail').value = '';
            document.getElementById('modalGuestNote').value = '';

            // Reset payment method
            document.querySelector('input[name="paymentMethod"][value="CASH"]').checked = true;
        }

        // Walk-in Step Navigation
        function showPaymentStep() {
            const name = document.getElementById('modalGuestName').value.trim();
            const phone = document.getElementById('modalGuestPhone').value.trim();

            if (!name || !phone) {
                showNotification('error', 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß h·ªç t√™n v√† s·ªë ƒëi·ªán tho·∫°i');
                return;
            }

            // Update customer summary
            document.getElementById('customerSummaryName').textContent = `H·ªç t√™n: ${name}`;
            document.getElementById('customerSummaryPhone').textContent = `SƒêT: ${phone}`;

            // Show step 2, hide step 1
            document.getElementById('walkInStep1').classList.add('hidden');
            document.getElementById('walkInStep2').classList.remove('hidden');
        }

        function showInfoStep() {
            // Show step 1, hide step 2
            document.getElementById('walkInStep1').classList.remove('hidden');
            document.getElementById('walkInStep2').classList.add('hidden');
        }

        // Dropdown Functions
        function toggleDeleteDropdown(userId) {
            // Close all other dropdowns first
            document.querySelectorAll('[id^="deleteDropdown"]').forEach(dropdown => {
                if (dropdown.id !== `deleteDropdown${userId}`) {
                    dropdown.classList.add('hidden');
                }
            });

            // Toggle current dropdown
            const dropdown = document.getElementById(`deleteDropdown${userId}`);
            dropdown.classList.toggle('hidden');
        }

        // Close dropdowns when clicking outside
        document.addEventListener('click', function(event) {
            if (!event.target.closest('[id^="deleteDropdown"]') && !event.target.closest('button[onclick*="toggleDeleteDropdown"]')) {
                document.querySelectorAll('[id^="deleteDropdown"]').forEach(dropdown => {
                    dropdown.classList.add('hidden');
                });
            }
        });

        // Modal Camera Functions (h·ªçc theo FaceTest)
        async function startModalRegisterCamera() {
            try {
                if (!isModelLoaded) {
                    alert('AI models not loaded yet. Please wait.');
                    return;
                }

                console.log('Requesting camera access for modal registration...');
                modalRegisterStream = await navigator.mediaDevices.getUserMedia({
                    video: {
                        width: { ideal: 640 },
                        height: { ideal: 480 }
                    }
                });

                modalRegisterVideo.srcObject = modalRegisterStream;
                updateModalStatus('modalRegisterCameraStatus', 'üì∑ Camera running');

                // Start face detection
                startModalRegisterDetection();

                console.log('‚úÖ Modal registration camera started successfully');
            } catch (error) {
                console.error('Modal registration camera error:', error);
                updateModalStatus('modalRegisterCameraStatus', 'üì∑ Camera error');
                alert('Failed to access camera. Please check permissions.');
            }
        }

        async function stopModalRegisterCamera() {
            if (modalRegisterStream) {
                modalRegisterStream.getTracks().forEach(track => track.stop());
                modalRegisterStream = null;
            }
            if (modalRegisterDetectionInterval) {
                clearInterval(modalRegisterDetectionInterval);
                modalRegisterDetectionInterval = null;
            }
            updateModalStatus('modalRegisterCameraStatus', 'üì∑ Camera stopped');
            updateModalStatus('modalRegisterFaceStatus', 'üëÅÔ∏è No face detected');
            updateModalStatus('modalRegisterQualityStatus', '‚≠ê Quality: Not assessed');
            modalRegisterButton.disabled = true;
        }

        // Modal Helper Functions
        function updateModalStatus(elementId, text) {
            const element = document.getElementById(elementId);
            if (element) {
                element.textContent = text;
            }
        }

        function clearModalCanvas(canvas) {
            const ctx = canvas.getContext('2d');
            ctx.clearRect(0, 0, canvas.width, canvas.height);
        }

        function drawModalFaceBox(canvas, box) {
            const ctx = canvas.getContext('2d');
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            ctx.strokeStyle = '#00ff00';
            ctx.lineWidth = 2;
            ctx.strokeRect(box.x, box.y, box.width, box.height);
        }

        // Notification System
        function showNotification(type, message) {
            const notification = document.createElement('div');
            notification.className = `fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg transform transition-all duration-300 ${
                type === 'success' ? 'bg-green-500 text-white' :
                type === 'error' ? 'bg-red-500 text-white' :
                type === 'info' ? 'bg-blue-500 text-white' :
                'bg-gray-500 text-white'
            }`;
            notification.innerHTML = `
                <div class="flex items-center">
                    <span class="mr-2">
                        ${type === 'success' ? '‚úÖ' : type === 'error' ? '‚ùå' : type === 'info' ? '‚ÑπÔ∏è' : 'üì¢'}
                    </span>
                    <span>${message}</span>
                    <button onclick="this.parentElement.parentElement.remove()" class="ml-4 text-white hover:text-gray-200">
                        ‚úï
                    </button>
                </div>
            `;

            document.body.appendChild(notification);

            // Auto remove after 5 seconds
            setTimeout(() => {
                if (notification.parentElement) {
                    notification.remove();
                }
            }, 5000);
        }
        // Modal Face Detection and Registration (h·ªçc theo FaceTest)
        function startModalRegisterDetection() {
            console.log('üîç Starting modal register detection...');

            modalRegisterDetectionInterval = setInterval(async () => {
                if (!modalRegisterVideo.videoWidth || !modalRegisterVideo.videoHeight) {
                    return;
                }

                if (!isModelLoaded) {
                    updateModalStatus('modalRegisterFaceStatus', 'üîÑ Loading models...');
                    return;
                }

                try {
                    // Detect face with landmarks and descriptor
                    const detection = await faceapi
                        .detectSingleFace(modalRegisterVideo, new faceapi.TinyFaceDetectorOptions())
                        .withFaceLandmarks()
                        .withFaceDescriptor();

                    if (detection) {
                        updateModalStatus('modalRegisterFaceStatus', '‚úÖ Face detected');

                        // Assess face quality
                        const quality = assessModalFaceQuality(detection);
                        updateModalStatus('modalRegisterQualityStatus', `‚≠ê Quality: ${quality.score.toFixed(1)}/10 (${quality.status})`);

                        currentModalRegisterDescriptor = detection.descriptor;
                        modalRegisterButton.disabled = false;

                        // Draw face box
                        drawModalFaceBox(modalRegisterCanvas, detection.detection.box);
                    } else {
                        updateModalStatus('modalRegisterFaceStatus', 'üëÅÔ∏è Searching for face...');
                        updateModalStatus('modalRegisterQualityStatus', '‚≠ê Quality: Not assessed');
                        currentModalRegisterDescriptor = null;
                        modalRegisterButton.disabled = true;
                        clearModalCanvas(modalRegisterCanvas);
                    }
                } catch (error) {
                    console.error('Modal register detection error:', error);
                }
            }, 500);
        }

        // Face Quality Assessment (h·ªçc theo FaceTest)
        function assessModalFaceQuality(detection) {
            const box = detection.detection.box;
            const landmarks = detection.landmarks;

            let score = 10;
            let issues = [];

            // Check face size
            const faceArea = box.width * box.height;
            const videoArea = modalRegisterVideo.videoWidth * modalRegisterVideo.videoHeight;
            const faceRatio = faceArea / videoArea;

            if (faceRatio < 0.05) {
                score -= 3;
                issues.push('Face too small');
            } else if (faceRatio > 0.5) {
                score -= 2;
                issues.push('Face too large');
            }

            // Check face position
            const centerX = box.x + box.width / 2;
            const centerY = box.y + box.height / 2;
            const videoCenterX = modalRegisterVideo.videoWidth / 2;
            const videoCenterY = modalRegisterVideo.videoHeight / 2;

            const offsetX = Math.abs(centerX - videoCenterX) / modalRegisterVideo.videoWidth;
            const offsetY = Math.abs(centerY - videoCenterY) / modalRegisterVideo.videoHeight;

            if (offsetX > 0.2 || offsetY > 0.2) {
                score -= 2;
                issues.push('Face not centered');
            }

            // Determine status
            let status;
            if (score >= 8) status = 'Excellent';
            else if (score >= 6) status = 'Good';
            else if (score >= 4) status = 'Fair';
            else status = 'Poor';

            return { score, status, issues };
        }

        // Modal Face Registration (h·ªçc theo FaceTest)
        async function testModalRegisterFace() {
            console.log('üî• testModalRegisterFace() called!');

            if (!selectedMemberId) {
                alert('No member selected.');
                return;
            }

            if (!currentModalRegisterDescriptor) {
                alert('No face detected. Please ensure your face is visible.');
                return;
            }

            try {
                modalRegisterButton.disabled = true;
                modalRegisterButton.textContent = 'ƒêang ƒëƒÉng k√Ω...';

                const response = await fetch('/FaceTest/TestRegisterFace', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: JSON.stringify({
                        memberId: parseInt(selectedMemberId),
                        descriptor: Array.from(currentModalRegisterDescriptor)
                    })
                });

                const result = await response.json();
                console.log('üì° Modal registration response:', result);

                // Show results
                showModalRegisterResults(result);

                if (result.success) {
                    // Show detailed success results
                    showModalRegisterResults(result);
                    showNotification('success', 'ƒêƒÉng k√Ω khu√¥n m·∫∑t th√†nh c√¥ng!');

                    // Close modal after showing results
                    setTimeout(() => {
                        closeFaceRegistrationModal();
                    }, 3000);
                } else {
                    showNotification('error', result.message || 'ƒêƒÉng k√Ω th·∫•t b·∫°i');
                }

            } catch (error) {
                console.error('‚ùå Modal registration error:', error);
                alert('L·ªói m·∫°ng khi ƒëƒÉng k√Ω.');
            } finally {
                modalRegisterButton.disabled = false;
                modalRegisterButton.textContent = 'üìù ƒêƒÉng K√Ω Khu√¥n M·∫∑t';
            }
        }

        // Show modal registration results
        function showModalRegisterResults(result) {
            const resultsDiv = document.getElementById('modalRegisterResults');
            const contentDiv = document.getElementById('modalRegisterResultContent');

            contentDiv.innerHTML = `
                <div class="space-y-3">
                    <div class="flex justify-between items-center">
                        <span class="font-medium text-gray-600">Status:</span>
                        <span class="${result.success ? 'text-green-600 font-semibold' : 'text-red-600 font-semibold'}">${result.success ? 'Success' : 'Failed'}</span>
                    </div>
                    ${result.success ? `
                    <div class="flex justify-between items-center">
                        <span class="font-medium text-gray-600">User ID:</span>
                        <span class="text-gray-900 font-medium">${selectedMemberId}</span>
                    </div>
                    <div class="flex justify-between items-center">
                        <span class="font-medium text-gray-600">Face ID:</span>
                        <span class="text-gray-900 font-medium">${result.faceId || 'N/A'}</span>
                    </div>
                    <div class="flex justify-between items-center">
                        <span class="font-medium text-gray-600">Processing Time:</span>
                        <span class="text-gray-900">${result.processingTime || 0}ms</span>
                    </div>
                    ` : ''}
                    <div class="flex justify-between items-center">
                        <span class="font-medium text-gray-600">Message:</span>
                        <span class="text-gray-900">${result.message}</span>
                    </div>
                    <div class="flex justify-between items-center">
                        <span class="font-medium text-gray-600">Timestamp:</span>
                        <span class="text-gray-900">${new Date().toLocaleString()}</span>
                    </div>
                </div>
            `;

            resultsDiv.classList.remove('hidden');
        }

        // Walk-in Payment Processing
        async function processWalkInPayment() {
            const name = document.getElementById('modalGuestName').value.trim();
            const phone = document.getElementById('modalGuestPhone').value.trim();
            const email = document.getElementById('modalGuestEmail').value.trim();
            const note = document.getElementById('modalGuestNote').value.trim();
            const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked').value;

            if (!name || !phone) {
                showNotification('error', 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin');
                return;
            }

            const processBtn = document.getElementById('processPaymentBtn');
            processBtn.disabled = true;
            processBtn.innerHTML = '<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white inline-block mr-2"></div>ƒêang x·ª≠ l√Ω...';

            try {
                if (paymentMethod === 'CASH') {
                    // Cash payment - direct registration and check-in
                    await processCashPayment(name, phone, email, note);
                } else if (paymentMethod === 'VNPAY') {
                    // VNPay payment - redirect to payment gateway
                    await processVNPayPayment(name, phone, email, note);
                }
            } catch (error) {
                console.error('‚ùå Payment processing error:', error);
                showNotification('error', 'C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω thanh to√°n');
            } finally {
                processBtn.disabled = false;
                processBtn.innerHTML = 'üí≥ Thanh to√°n & Check-in';
            }
        }

        // Cash Payment Processing
        async function processCashPayment(name, phone, email, note) {
            try {
                // Get face descriptor from sessionStorage
                const faceDescriptorJson = sessionStorage.getItem('walkInFaceDescriptor');
                let faceDescriptor = null;
                if (faceDescriptorJson) {
                    try {
                        faceDescriptor = JSON.parse(faceDescriptorJson);
                        console.log('üíæ Face descriptor found for registration:', faceDescriptor.length, 'dimensions');
                    } catch (e) {
                        console.warn('‚ö†Ô∏è Failed to parse face descriptor:', e);
                    }
                }

                const response = await fetch('/Reception/WalkInRegisterWithPayment', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: JSON.stringify({
                        fullName: name,
                        phoneNumber: phone,
                        email: email,
                        note: note,
                        paymentMethod: 'CASH',
                        amount: 50000,
                        faceDescriptor: faceDescriptor
                    })
                });

                const result = await response.json();

                if (result.success) {
                    // Clear face descriptor from sessionStorage after successful registration
                    sessionStorage.removeItem('walkInFaceDescriptor');
                    console.log('üóëÔ∏è Face descriptor cleared from sessionStorage');

                    if (faceDescriptor) {
                        showNotification('success', 'Thanh to√°n ti·ªÅn m·∫∑t v√† check-in th√†nh c√¥ng! Khu√¥n m·∫∑t ƒë√£ ƒë∆∞·ª£c l∆∞u ƒë·ªÉ checkout.');
                    } else {
                        showNotification('success', 'Thanh to√°n ti·ªÅn m·∫∑t v√† check-in th√†nh c√¥ng!');
                    }
                    closeWalkInModal();

                    // Show payment confirmation
                    showPaymentConfirmation({
                        customerName: name,
                        amount: 50000,
                        paymentMethod: 'Ti·ªÅn m·∫∑t',
                        transactionId: result.transactionId || 'CASH_' + Date.now()
                    });
                } else {
                    showNotification('error', result.message || 'Thanh to√°n th·∫•t b·∫°i');
                }
            } catch (error) {
                console.error('‚ùå Cash payment error:', error);
                throw error;
            }
        }

        // VNPay Payment Processing
        async function processVNPayPayment(name, phone, email, note) {
            try {
                const response = await fetch('/Reception/CreateWalkInVNPayPayment', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: JSON.stringify({
                        fullName: name,
                        phoneNumber: phone,
                        email: email,
                        note: note,
                        amount: 50000
                    })
                });

                const result = await response.json();

                if (result.success && result.paymentUrl) {
                    showNotification('info', 'ƒêang chuy·ªÉn h∆∞·ªõng ƒë·∫øn VNPay...');

                    // Store customer info for after payment return
                    sessionStorage.setItem('walkInCustomerInfo', JSON.stringify({
                        name, phone, email, note
                    }));

                    // Redirect to VNPay
                    window.location.href = result.paymentUrl;
                } else {
                    showNotification('error', result.message || 'Kh√¥ng th·ªÉ t·∫°o thanh to√°n VNPay');
                }
            } catch (error) {
                console.error('‚ùå VNPay payment error:', error);
                throw error;
            }
        }

        // Show Payment Confirmation
        function showPaymentConfirmation(paymentInfo) {
            const confirmationHtml = `
                <div class="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
                    <div class="bg-white rounded-lg p-6 max-w-md w-full mx-4">
                        <div class="text-center">
                            <div class="text-green-500 text-6xl mb-4">‚úÖ</div>
                            <h3 class="text-lg font-bold text-gray-900 mb-4">Thanh to√°n th√†nh c√¥ng!</h3>

                            <div class="text-left space-y-2 mb-6">
                                <div class="flex justify-between">
                                    <span class="text-gray-600">Kh√°ch h√†ng:</span>
                                    <span class="font-medium">${paymentInfo.customerName}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-600">S·ªë ti·ªÅn:</span>
                                    <span class="font-medium">${paymentInfo.amount.toLocaleString()} VNƒê</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-600">Ph∆∞∆°ng th·ª©c:</span>
                                    <span class="font-medium">${paymentInfo.paymentMethod}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-600">M√£ GD:</span>
                                    <span class="font-medium">${paymentInfo.transactionId}</span>
                                </div>
                            </div>

                            <button onclick="this.parentElement.parentElement.parentElement.remove()"
                                    class="w-full bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium transition-colors">
                                ƒê√≥ng
                            </button>
                        </div>
                    </div>
                </div>
            `;

            document.body.insertAdjacentHTML('beforeend', confirmationHtml);
        }

        // Delete Functions
        async function deleteFace(userId, userName) {
            if (!confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a t·∫•t c·∫£ khu√¥n m·∫∑t c·ªßa ${userName}?`)) {
                // Close dropdown
                document.getElementById(`deleteDropdown${userId}`).classList.add('hidden');
                return;
            }

            // Show loading spinner
            showLoadingSpinner('ƒêang x√≥a khu√¥n m·∫∑t...');

            try {
                // Use AdminDeleteAllMemberFaces to delete all faces for this member
                const response = await fetch(`/FaceManagement/AdminDeleteAllMemberFaces?memberId=${userId}`, {
                    method: 'DELETE',
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    }
                });

                const result = await response.json();

                hideLoadingSpinner();

                if (result.success) {
                    showNotification('success', 'X√≥a khu√¥n m·∫∑t th√†nh c√¥ng!');
                    // Refresh the page after short delay
                    setTimeout(() => location.reload(), 1500);
                } else {
                    showNotification('error', result.message || 'Kh√¥ng th·ªÉ x√≥a khu√¥n m·∫∑t');
                }
            } catch (error) {
                console.error('Error:', error);
                hideLoadingSpinner();
                showNotification('error', 'C√≥ l·ªói x·∫£y ra khi x√≥a khu√¥n m·∫∑t');
            }

            // Close dropdown
            document.getElementById(`deleteDropdown${userId}`).classList.add('hidden');
        }

        // Loading Spinner Functions
        function showLoadingSpinner(message = 'ƒêang x·ª≠ l√Ω...') {
            const spinner = document.createElement('div');
            spinner.id = 'loadingSpinner';
            spinner.className = 'fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50';
            spinner.innerHTML = `
                <div class="bg-white rounded-lg p-6 flex items-center space-x-3">
                    <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                    <span class="text-gray-700 font-medium">${message}</span>
                </div>
            `;
            document.body.appendChild(spinner);
        }

        function hideLoadingSpinner() {
            const spinner = document.getElementById('loadingSpinner');
            if (spinner) {
                spinner.remove();
            }
        }

        // Send Expiry Notifications Function
        async function sendExpiryNotifications() {
            if (!confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën g·ª≠i th√¥ng b√°o gia h·∫°n cho t·∫•t c·∫£ th√†nh vi√™n s·∫Øp h·∫øt h·∫°n g√≥i t·∫≠p kh√¥ng?')) {
                return;
            }

            const button = document.getElementById('sendExpiryNotificationBtn');
            const originalText = button.innerHTML;

            try {
                // Disable button and show loading
                button.disabled = true;
                button.innerHTML = `
                    <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    ƒêang g·ª≠i th√¥ng b√°o...
                `;

                showLoadingSpinner('ƒêang g·ª≠i th√¥ng b√°o gia h·∫°n...');

                // Get CSRF token
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                const response = await fetch('@Url.Action("SendExpiryNotifications", "User")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'RequestVerificationToken': token
                    },
                    body: `__RequestVerificationToken=${encodeURIComponent(token)}`
                });

                const result = await response.json();
                hideLoadingSpinner();

                if (result.success) {
                    // Show success notification with details
                    let message = result.message;
                    if (result.details && result.details.length > 0) {
                        message += '\n\nChi ti·∫øt:';
                        result.details.forEach(detail => {
                            message += `\n‚Ä¢ ${detail.name} (${detail.email}) - ${detail.packageName} - H·∫øt h·∫°n: ${detail.expiryDate} (c√≤n ${detail.daysRemaining} ng√†y)`;
                        });
                    }

                    showNotification('success', result.message);

                    // Show detailed modal
                    showExpiryNotificationModal(result);

                    // Hide the button since notifications were sent
                    button.style.display = 'none';
                } else {
                    showNotification('error', result.message || 'Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o gia h·∫°n');
                }
            } catch (error) {
                console.error('Error:', error);
                hideLoadingSpinner();
                showNotification('error', 'C√≥ l·ªói x·∫£y ra khi g·ª≠i th√¥ng b√°o gia h·∫°n');
            } finally {
                // Restore button
                button.disabled = false;
                button.innerHTML = originalText;
            }
        }

        // Show detailed notification modal
        function showExpiryNotificationModal(result) {
            const modal = document.createElement('div');
            modal.className = 'fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50';
            modal.innerHTML = `
                <div class="bg-white rounded-lg p-6 max-w-2xl w-full mx-4 max-h-96 overflow-y-auto">
                    <div class="flex items-center justify-between mb-4">
                        <h3 class="text-lg font-medium text-gray-900">üìß K·∫øt qu·∫£ g·ª≠i th√¥ng b√°o gia h·∫°n</h3>
                        <button onclick="this.closest('.fixed').remove()" class="text-gray-400 hover:text-gray-600">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </button>
                    </div>

                    <div class="mb-4">
                        <div class="bg-green-50 border border-green-200 rounded-md p-4">
                            <div class="flex">
                                <div class="flex-shrink-0">
                                    <svg class="h-5 w-5 text-green-400" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                                    </svg>
                                </div>
                                <div class="ml-3">
                                    <p class="text-sm text-green-800">
                                        <strong>Th√†nh c√¥ng:</strong> ${result.message}
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>

                    ${result.details && result.details.length > 0 ? `
                        <div class="mb-4">
                            <h4 class="text-sm font-medium text-gray-900 mb-2">Danh s√°ch th√†nh vi√™n ƒë√£ ƒë∆∞·ª£c g·ª≠i th√¥ng b√°o:</h4>
                            <div class="bg-gray-50 rounded-md p-3 max-h-48 overflow-y-auto">
                                ${result.details.map(detail => `
                                    <div class="flex items-center justify-between py-2 border-b border-gray-200 last:border-b-0">
                                        <div>
                                            <p class="text-sm font-medium text-gray-900">${detail.name}</p>
                                            <p class="text-xs text-gray-500">${detail.email}</p>
                                        </div>
                                        <div class="text-right">
                                            <p class="text-xs text-gray-600">${detail.packageName}</p>
                                            <p class="text-xs ${detail.daysRemaining <= 3 ? 'text-red-600' : detail.daysRemaining <= 7 ? 'text-orange-600' : 'text-gray-600'}">
                                                C√≤n ${detail.daysRemaining} ng√†y
                                            </p>
                                        </div>
                                    </div>
                                `).join('')}
                            </div>
                        </div>
                    ` : ''}

                    <div class="flex justify-end">
                        <button onclick="this.closest('.fixed').remove()"
                                class="px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-500">
                            ƒê√≥ng
                        </button>
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
        }

        // Action dropdown functions
        function toggleActionDropdown(userId) {
            const dropdown = document.getElementById(`actionDropdown${userId}`);
            const allDropdowns = document.querySelectorAll('[id^="actionDropdown"]');

            // Close all other dropdowns
            allDropdowns.forEach(d => {
                if (d.id !== `actionDropdown${userId}`) {
                    d.classList.add('hidden');
                }
            });

            // Toggle current dropdown
            dropdown.classList.toggle('hidden');
        }

        // Close dropdowns when clicking outside
        document.addEventListener('click', function(event) {
            if (!event.target.closest('[onclick*="toggleActionDropdown"]') &&
                !event.target.closest('[id^="actionDropdown"]')) {
                const allDropdowns = document.querySelectorAll('[id^="actionDropdown"]');
                allDropdowns.forEach(d => d.classList.add('hidden'));
            }
        });

        // Create account for specific user - Open modal
        let currentUserId = null;
        function createAccountForUser(userId, fullName) {
            currentUserId = userId;

            // Set user info in modal
            document.getElementById('userName').textContent = fullName;
            document.getElementById('userInfo').textContent = `ID: ${userId}`;

            // Set avatar initials
            const initials = fullName.split(' ').map(n => n[0]).join('').substring(0, 2).toUpperCase();
            document.getElementById('userAvatar').textContent = initials;

            // Clear form
            document.getElementById('createAccountForm').reset();

            // Show modal
            document.getElementById('createAccountModal').classList.remove('hidden');
        }

        // Close create account modal
        function closeCreateAccountModal() {
            document.getElementById('createAccountModal').classList.add('hidden');
            currentUserId = null;
        }

        // Handle create account form submission
        document.addEventListener('DOMContentLoaded', function() {
            document.getElementById('createAccountForm').addEventListener('submit', async function(e) {
                e.preventDefault();

                const username = document.getElementById('accountUsername').value.trim();
                const password = document.getElementById('accountPassword').value;
                const passwordConfirm = document.getElementById('accountPasswordConfirm').value;

                // Validation
                if (!username || !password || !passwordConfirm) {
                    showNotification('error', 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin');
                    return;
                }

                if (password.length < 6) {
                    showNotification('error', 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±');
                    return;
                }

                if (password !== passwordConfirm) {
                    showNotification('error', 'M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp');
                    return;
                }

                try {
                    showLoadingSpinner();
                    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                    const response = await fetch('@Url.Action("CreateAccountWithCredentials", "User")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'RequestVerificationToken': token
                        },
                        body: `userId=${currentUserId}&username=${encodeURIComponent(username)}&password=${encodeURIComponent(password)}&__RequestVerificationToken=${encodeURIComponent(token)}`
                    });

                    const result = await response.json();
                    hideLoadingSpinner();

                    if (result.success) {
                        showNotification('success', result.message);
                        closeCreateAccountModal();
                        // Refresh page to show updated account status
                        setTimeout(() => location.reload(), 1500);
                    } else {
                        showNotification('error', result.message || 'Kh√¥ng th·ªÉ t·∫°o t√†i kho·∫£n');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    hideLoadingSpinner();
                    showNotification('error', 'C√≥ l·ªói x·∫£y ra khi t·∫°o t√†i kho·∫£n');
                }
            });
        });

        // Deactivate/Activate user function
        async function deactivateUser(userId, userName) {
            const isInactive = document.querySelector(`[onclick="deactivateUser(${userId}, '${userName}')"] span`).textContent.trim() === 'K√≠ch ho·∫°t';
            const confirmMessage = isInactive
                ? `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën k√≠ch ho·∫°t t√†i kho·∫£n c·ªßa ${userName}?`
                : `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën v√¥ hi·ªáu h√≥a t√†i kho·∫£n c·ªßa ${userName}? Ng∆∞·ªùi d√πng s·∫Ω kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p nh∆∞ng d·ªØ li·ªáu v·∫´n ƒë∆∞·ª£c gi·ªØ l·∫°i.`;

            if (!confirm(confirmMessage)) {
                return;
            }

            try {
                showLoadingSpinner();
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                const action = isInactive ? 'Activate' : 'Deactivate';

                const response = await fetch(`@Url.Action("Deactivate", "User")?action=${action}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'RequestVerificationToken': token
                    },
                    body: `id=${userId}&__RequestVerificationToken=${encodeURIComponent(token)}`
                });

                const result = await response.json();
                hideLoadingSpinner();

                if (result.success) {
                    showNotification('success', result.message);
                    // Refresh page to show updated status
                    setTimeout(() => location.reload(), 1500);
                } else {
                    showNotification('error', result.message || `Kh√¥ng th·ªÉ ${isInactive ? 'k√≠ch ho·∫°t' : 'v√¥ hi·ªáu h√≥a'} ng∆∞·ªùi d√πng`);
                }
            } catch (error) {
                console.error('Error:', error);
                hideLoadingSpinner();
                showNotification('error', `C√≥ l·ªói x·∫£y ra khi ${isInactive ? 'k√≠ch ho·∫°t' : 'v√¥ hi·ªáu h√≥a'} ng∆∞·ªùi d√πng`);
            }
        }





        // Auto-open walk-in modal if redirected from face recognition
        document.addEventListener('DOMContentLoaded', function() {
            const urlParams = new URLSearchParams(window.location.search);
            if (urlParams.get('openWalkIn') === 'true') {
                console.log('üö∂ Auto-opening walk-in modal from face recognition redirect');

                // Check if face descriptor is available
                const faceDescriptor = sessionStorage.getItem('walkInFaceDescriptor');
                if (faceDescriptor) {
                    console.log('üíæ Face descriptor found for walk-in registration');
                    showNotification('info', 'üö∂ Khu√¥n m·∫∑t ƒë√£ ƒë∆∞·ª£c l∆∞u. Vui l√≤ng ƒëƒÉng k√Ω kh√°ch v√£ng lai ƒë·ªÉ c√≥ th·ªÉ checkout b·∫±ng Face ID.');
                } else {
                    showNotification('info', 'üö∂ Khu√¥n m·∫∑t kh√¥ng ƒë∆∞·ª£c nh·∫≠n di·ªán. Vui l√≤ng ƒëƒÉng k√Ω kh√°ch v√£ng lai.');
                }

                // Open walk-in modal after a short delay
                setTimeout(() => {
                    openWalkInModal();

                    // Clean URL by removing the parameter
                    const newUrl = window.location.pathname;
                    window.history.replaceState({}, document.title, newUrl);
                }, 500);
            }
        });

    </script>
}
